{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joem\\\\quickdiff-react\\\\src\\\\components\\\\DiffView.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DiffView = ({\n  diffResult,\n  viewMode,\n  currentChangeIndex\n}) => {\n  if (!diffResult) return null;\n\n  // Calculate maximum line count for consistent line number width\n  const getMaxLines = () => {\n    var _diffResult$originalL, _diffResult$changedLi;\n    const originalCount = ((_diffResult$originalL = diffResult.originalLines) === null || _diffResult$originalL === void 0 ? void 0 : _diffResult$originalL.length) || 0;\n    const changedCount = ((_diffResult$changedLi = diffResult.changedLines) === null || _diffResult$changedLi === void 0 ? void 0 : _diffResult$changedLi.length) || 0;\n    return Math.max(originalCount, changedCount);\n  };\n  const maxLines = getMaxLines();\n  const getLineWidthClass = () => {\n    if (maxLines >= 10000) return \"10000\";\n    if (maxLines >= 1000) return \"1000\";\n    if (maxLines >= 100) return \"100\";\n    return \"10\";\n  };\n  const renderDiffLine = (line, originalLineNum, changedLineNum, type = '') => {\n    const lineType = line.type || type || '';\n    const isCurrentChange = currentChangeIndex >= 0 && line.isCurrentChange;\n    const className = `diff-line ${lineType} ${isCurrentChange ? 'current-change' : ''}`.trim();\n\n    // Determine which line number to show based on line type and side\n    const getDisplayLineNumber = side => {\n      if (lineType === 'added' && side === 'original') return '';\n      if (lineType === 'removed' && side === 'changed') return '';\n      if (side === 'original') return originalLineNum || '';\n      if (side === 'changed') return changedLineNum || '';\n      return originalLineNum || changedLineNum || '';\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: className,\n      \"data-line-number\": originalLineNum || changedLineNum,\n      \"data-line-type\": lineType,\n      \"data-original-line\": originalLineNum,\n      \"data-changed-line\": changedLineNum,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"line-number\",\n        children: getDisplayLineNumber('unified')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"line-content\",\n        dangerouslySetInnerHTML: {\n          __html: line.content || line\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, `${lineType}-${originalLineNum}-${changedLineNum}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this);\n  };\n  const renderSideBySideLine = (line, originalLineNum, changedLineNum, type = '', side = '') => {\n    const lineType = line.type || type || '';\n    const isCurrentChange = currentChangeIndex >= 0 && line.isCurrentChange;\n    const className = `diff-line ${lineType} ${isCurrentChange ? 'current-change' : ''}`.trim();\n\n    // Determine which line number to show based on line type and side\n    const getDisplayLineNumber = () => {\n      if (lineType === 'added' && side === 'original') return '';\n      if (lineType === 'removed' && side === 'changed') return '';\n      if (side === 'original') return originalLineNum || '';\n      if (side === 'changed') return changedLineNum || '';\n      return originalLineNum || changedLineNum || '';\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: className,\n      \"data-line-number\": originalLineNum || changedLineNum,\n      \"data-line-type\": lineType,\n      \"data-original-line\": originalLineNum,\n      \"data-changed-line\": changedLineNum,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"line-number\",\n        children: getDisplayLineNumber()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"line-content\",\n        dangerouslySetInnerHTML: {\n          __html: line.content || line\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, `${side}-${lineType}-${originalLineNum}-${changedLineNum}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this);\n  };\n  if (viewMode === 'side-by-side') {\n    // Create synchronized line mapping for side-by-side view\n    const createSynchronizedLines = () => {\n      const originalLines = diffResult.originalLines || [];\n      const changedLines = diffResult.changedLines || [];\n      const maxLength = Math.max(originalLines.length, changedLines.length);\n      const syncedOriginal = [];\n      const syncedChanged = [];\n      let originalIndex = 0;\n      let changedIndex = 0;\n      let originalLineNum = 1;\n      let changedLineNum = 1;\n      for (let i = 0; i < maxLength; i++) {\n        const originalLine = originalLines[originalIndex];\n        const changedLine = changedLines[changedIndex];\n        if (originalLine && originalLine.type === 'removed') {\n          syncedOriginal.push({\n            line: originalLine,\n            originalLineNum: originalLineNum,\n            changedLineNum: null\n          });\n          syncedChanged.push({\n            line: {\n              content: '',\n              type: 'empty'\n            },\n            originalLineNum: originalLineNum,\n            changedLineNum: null\n          });\n          originalIndex++;\n          originalLineNum++;\n        } else if (changedLine && changedLine.type === 'added') {\n          syncedOriginal.push({\n            line: {\n              content: '',\n              type: 'empty'\n            },\n            originalLineNum: null,\n            changedLineNum: changedLineNum\n          });\n          syncedChanged.push({\n            line: changedLine,\n            originalLineNum: null,\n            changedLineNum: changedLineNum\n          });\n          changedIndex++;\n          changedLineNum++;\n        } else {\n          // Both lines exist or are unchanged\n          if (originalLine) {\n            syncedOriginal.push({\n              line: originalLine,\n              originalLineNum: originalLineNum,\n              changedLineNum: changedLineNum\n            });\n            originalIndex++;\n            originalLineNum++;\n          }\n          if (changedLine) {\n            syncedChanged.push({\n              line: changedLine,\n              originalLineNum: originalLineNum - 1,\n              changedLineNum: changedLineNum\n            });\n            changedIndex++;\n            changedLineNum++;\n          }\n        }\n      }\n      return {\n        syncedOriginal,\n        syncedChanged\n      };\n    };\n    const {\n      syncedOriginal,\n      syncedChanged\n    } = createSynchronizedLines();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"diff-container side-by-side\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"diff-column\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Original Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"diff-content\",\n          \"data-max-lines\": getLineWidthClass(),\n          children: syncedOriginal.map((item, index) => renderSideBySideLine(item.line, item.originalLineNum, item.changedLineNum, item.line.type, 'original'))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"diff-column\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Changed Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"diff-content\",\n          \"data-max-lines\": getLineWidthClass(),\n          children: syncedChanged.map((item, index) => renderSideBySideLine(item.line, item.originalLineNum, item.changedLineNum, item.line.type, 'changed'))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Inline view - combine both original and changed lines\n  const createUnifiedView = () => {\n    var _diffResult$originalL2, _diffResult$changedLi2;\n    const unified = [];\n    const maxLines = Math.max(((_diffResult$originalL2 = diffResult.originalLines) === null || _diffResult$originalL2 === void 0 ? void 0 : _diffResult$originalL2.length) || 0, ((_diffResult$changedLi2 = diffResult.changedLines) === null || _diffResult$changedLi2 === void 0 ? void 0 : _diffResult$changedLi2.length) || 0);\n    for (let i = 0; i < maxLines; i++) {\n      var _diffResult$originalL3, _diffResult$changedLi3;\n      const originalLine = (_diffResult$originalL3 = diffResult.originalLines) === null || _diffResult$originalL3 === void 0 ? void 0 : _diffResult$originalL3[i];\n      const changedLine = (_diffResult$changedLi3 = diffResult.changedLines) === null || _diffResult$changedLi3 === void 0 ? void 0 : _diffResult$changedLi3[i];\n      if (originalLine && originalLine.type === 'removed') {\n        unified.push(originalLine);\n      }\n      if (changedLine && changedLine.type === 'added') {\n        unified.push(changedLine);\n      }\n      if (originalLine && (!originalLine.type || originalLine.type === 'unchanged')) {\n        unified.push(originalLine);\n      }\n    }\n    return unified;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"diff-container inline\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"diff-column full-width\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Unified Diff View\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"diff-content\",\n        \"data-max-lines\": getLineWidthClass(),\n        children: createUnifiedView().map((line, index) => renderDiffLine(line, index + 1, line.type))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 5\n  }, this);\n};\n_c = DiffView;\nexport default DiffView;\nvar _c;\n$RefreshReg$(_c, \"DiffView\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","DiffView","diffResult","viewMode","currentChangeIndex","getMaxLines","_diffResult$originalL","_diffResult$changedLi","originalCount","originalLines","length","changedCount","changedLines","Math","max","maxLines","getLineWidthClass","renderDiffLine","line","originalLineNum","changedLineNum","type","lineType","isCurrentChange","className","trim","getDisplayLineNumber","side","children","fileName","_jsxFileName","lineNumber","columnNumber","dangerouslySetInnerHTML","__html","content","renderSideBySideLine","createSynchronizedLines","maxLength","syncedOriginal","syncedChanged","originalIndex","changedIndex","i","originalLine","changedLine","push","map","item","index","createUnifiedView","_diffResult$originalL2","_diffResult$changedLi2","unified","_diffResult$originalL3","_diffResult$changedLi3","_c","$RefreshReg$"],"sources":["C:/Users/Joem/quickdiff-react/src/components/DiffView.js"],"sourcesContent":["import React from 'react';\r\n\r\nconst DiffView = ({ diffResult, viewMode, currentChangeIndex }) => {\r\n  if (!diffResult) return null;\r\n\r\n  // Calculate maximum line count for consistent line number width\r\n  const getMaxLines = () => {\r\n    const originalCount = diffResult.originalLines?.length || 0;\r\n    const changedCount = diffResult.changedLines?.length || 0;\r\n    return Math.max(originalCount, changedCount);\r\n  };\r\n\r\n  const maxLines = getMaxLines();\r\n  const getLineWidthClass = () => {\r\n    if (maxLines >= 10000) return \"10000\";\r\n    if (maxLines >= 1000) return \"1000\";\r\n    if (maxLines >= 100) return \"100\";\r\n    return \"10\";\r\n  };\r\n\r\n  const renderDiffLine = (line, originalLineNum, changedLineNum, type = '') => {\r\n    const lineType = line.type || type || '';\r\n    const isCurrentChange = currentChangeIndex >= 0 && line.isCurrentChange;\r\n    const className = `diff-line ${lineType} ${isCurrentChange ? 'current-change' : ''}`.trim();\r\n\r\n    // Determine which line number to show based on line type and side\r\n    const getDisplayLineNumber = (side) => {\r\n      if (lineType === 'added' && side === 'original') return '';\r\n      if (lineType === 'removed' && side === 'changed') return '';\r\n      if (side === 'original') return originalLineNum || '';\r\n      if (side === 'changed') return changedLineNum || '';\r\n      return originalLineNum || changedLineNum || '';\r\n    };\r\n\r\n    return (\r\n      <div \r\n        key={`${lineType}-${originalLineNum}-${changedLineNum}`} \r\n        className={className}\r\n        data-line-number={originalLineNum || changedLineNum}\r\n        data-line-type={lineType}\r\n        data-original-line={originalLineNum}\r\n        data-changed-line={changedLineNum}\r\n      >\r\n        <span className=\"line-number\">{getDisplayLineNumber('unified')}</span>\r\n        <span \r\n          className=\"line-content\"\r\n          dangerouslySetInnerHTML={{ __html: line.content || line }}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderSideBySideLine = (line, originalLineNum, changedLineNum, type = '', side = '') => {\r\n    const lineType = line.type || type || '';\r\n    const isCurrentChange = currentChangeIndex >= 0 && line.isCurrentChange;\r\n    const className = `diff-line ${lineType} ${isCurrentChange ? 'current-change' : ''}`.trim();\r\n\r\n    // Determine which line number to show based on line type and side\r\n    const getDisplayLineNumber = () => {\r\n      if (lineType === 'added' && side === 'original') return '';\r\n      if (lineType === 'removed' && side === 'changed') return '';\r\n      if (side === 'original') return originalLineNum || '';\r\n      if (side === 'changed') return changedLineNum || '';\r\n      return originalLineNum || changedLineNum || '';\r\n    };\r\n\r\n    return (\r\n      <div \r\n        key={`${side}-${lineType}-${originalLineNum}-${changedLineNum}`} \r\n        className={className}\r\n        data-line-number={originalLineNum || changedLineNum}\r\n        data-line-type={lineType}\r\n        data-original-line={originalLineNum}\r\n        data-changed-line={changedLineNum}\r\n      >\r\n        <span className=\"line-number\">{getDisplayLineNumber()}</span>\r\n        <span \r\n          className=\"line-content\"\r\n          dangerouslySetInnerHTML={{ __html: line.content || line }}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  if (viewMode === 'side-by-side') {\r\n    // Create synchronized line mapping for side-by-side view\r\n    const createSynchronizedLines = () => {\r\n      const originalLines = diffResult.originalLines || [];\r\n      const changedLines = diffResult.changedLines || [];\r\n      const maxLength = Math.max(originalLines.length, changedLines.length);\r\n      \r\n      const syncedOriginal = [];\r\n      const syncedChanged = [];\r\n      \r\n      let originalIndex = 0;\r\n      let changedIndex = 0;\r\n      let originalLineNum = 1;\r\n      let changedLineNum = 1;\r\n      \r\n      for (let i = 0; i < maxLength; i++) {\r\n        const originalLine = originalLines[originalIndex];\r\n        const changedLine = changedLines[changedIndex];\r\n        \r\n        if (originalLine && originalLine.type === 'removed') {\r\n          syncedOriginal.push({\r\n            line: originalLine,\r\n            originalLineNum: originalLineNum,\r\n            changedLineNum: null\r\n          });\r\n          syncedChanged.push({\r\n            line: { content: '', type: 'empty' },\r\n            originalLineNum: originalLineNum,\r\n            changedLineNum: null\r\n          });\r\n          originalIndex++;\r\n          originalLineNum++;\r\n        } else if (changedLine && changedLine.type === 'added') {\r\n          syncedOriginal.push({\r\n            line: { content: '', type: 'empty' },\r\n            originalLineNum: null,\r\n            changedLineNum: changedLineNum\r\n          });\r\n          syncedChanged.push({\r\n            line: changedLine,\r\n            originalLineNum: null,\r\n            changedLineNum: changedLineNum\r\n          });\r\n          changedIndex++;\r\n          changedLineNum++;\r\n        } else {\r\n          // Both lines exist or are unchanged\r\n          if (originalLine) {\r\n            syncedOriginal.push({\r\n              line: originalLine,\r\n              originalLineNum: originalLineNum,\r\n              changedLineNum: changedLineNum\r\n            });\r\n            originalIndex++;\r\n            originalLineNum++;\r\n          }\r\n          if (changedLine) {\r\n            syncedChanged.push({\r\n              line: changedLine,\r\n              originalLineNum: originalLineNum - 1,\r\n              changedLineNum: changedLineNum\r\n            });\r\n            changedIndex++;\r\n            changedLineNum++;\r\n          }\r\n        }\r\n      }\r\n      \r\n      return { syncedOriginal, syncedChanged };\r\n    };\r\n\r\n    const { syncedOriginal, syncedChanged } = createSynchronizedLines();\r\n\r\n    return (\r\n      <div className=\"diff-container side-by-side\">\r\n        <div className=\"diff-column\">\r\n          <h3>Original Text</h3>\r\n          <div className=\"diff-content\" data-max-lines={getLineWidthClass()}>\r\n            {syncedOriginal.map((item, index) => \r\n              renderSideBySideLine(\r\n                item.line, \r\n                item.originalLineNum, \r\n                item.changedLineNum, \r\n                item.line.type, \r\n                'original'\r\n              )\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"diff-column\">\r\n          <h3>Changed Text</h3>\r\n          <div className=\"diff-content\" data-max-lines={getLineWidthClass()}>\r\n            {syncedChanged.map((item, index) => \r\n              renderSideBySideLine(\r\n                item.line, \r\n                item.originalLineNum, \r\n                item.changedLineNum, \r\n                item.line.type, \r\n                'changed'\r\n              )\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Inline view - combine both original and changed lines\r\n  const createUnifiedView = () => {\r\n    const unified = [];\r\n    const maxLines = Math.max(\r\n      diffResult.originalLines?.length || 0,\r\n      diffResult.changedLines?.length || 0\r\n    );\r\n    \r\n    for (let i = 0; i < maxLines; i++) {\r\n      const originalLine = diffResult.originalLines?.[i];\r\n      const changedLine = diffResult.changedLines?.[i];\r\n      \r\n      if (originalLine && originalLine.type === 'removed') {\r\n        unified.push(originalLine);\r\n      }\r\n      if (changedLine && changedLine.type === 'added') {\r\n        unified.push(changedLine);\r\n      }\r\n      if (originalLine && (!originalLine.type || originalLine.type === 'unchanged')) {\r\n        unified.push(originalLine);\r\n      }\r\n    }\r\n    \r\n    return unified;\r\n  };\r\n\r\n  return (\r\n    <div className=\"diff-container inline\">\r\n      <div className=\"diff-column full-width\">\r\n        <h3>Unified Diff View</h3>\r\n        <div className=\"diff-content\" data-max-lines={getLineWidthClass()}>\r\n          {createUnifiedView().map((line, index) => \r\n            renderDiffLine(line, index + 1, line.type)\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DiffView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}