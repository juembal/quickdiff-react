{"ast":null,"code":"/**\r\n * Enhanced Language Auto-Detection Utility\r\n * Detects programming language based on content patterns with improved accuracy\r\n */\n\nexport class LanguageDetector {\n  constructor() {\n    this.patterns = {\n      javascript: {\n        strong: [/\\b(const|let|var)\\s+\\w+\\s*=/, /\\b(function|async\\s+function)\\s*\\w*\\s*\\(/, /\\b(React|useState|useEffect|useContext|props)\\b/, /\\b(console\\.(log|error|warn))\\s*\\(/, /\\b(document\\.|window\\.)\\w+/, /\\b(require|import|export)\\s*\\(/, /\\bexport\\s+(default\\s+)?/, /=>\\s*[{(]/, /\\.(js|jsx|ts|tsx)$/i],\n        medium: [/\\b(if|else|for|while|switch|case|break|continue|return)\\b/, /\\b(setTimeout|setInterval|Promise|async|await)\\b/, /\\b(null|undefined|NaN|Infinity)\\b/, /\\/\\/.*$/m, /\\/\\*[\\s\\S]*?\\*\\//, /\\b(true|false)\\b/, /\\$\\{[^}]*\\}/],\n        weak: [/\\b(npm|node|express|axios|webpack)\\b/, /\\.(json|js)\"/]\n      },\n      python: {\n        strong: [/\\bdef\\s+\\w+\\s*\\(/, /\\bclass\\s+\\w+\\s*(\\([^)]*\\))?\\s*:/, /\\bfrom\\s+\\w+\\s+import\\b/, /\\bimport\\s+\\w+/, /\\b(if|elif|else)\\s+.*:/, /\\bfor\\s+\\w+\\s+in\\b/, /\\bwhile\\s+.*:/, /\\b(try|except|finally)\\s*:/, /\\bwith\\s+.*:/, /\\.(py|pyw)$/i],\n        medium: [/\\b(self|__init__|__name__|__main__)\\b/, /\\b(print|input|len|range|enumerate|zip)\\b/, /\\b(True|False|None)\\b/, /\\b(and|or|not|in|is)\\b/, /#.*$/m, /\"\"\"[\\s\\S]*?\"\"\"/, /'''[\\s\\S]*?'''/],\n        weak: [/\\bindent/, /\\bpip\\s+install\\b/]\n      },\n      java: {\n        strong: [/\\bpublic\\s+class\\s+\\w+/, /\\bpublic\\s+static\\s+void\\s+main\\s*\\(/, /\\b(public|private|protected)\\s+(static\\s+)?\\w+\\s+\\w+\\s*\\(/, /\\bSystem\\.out\\.(println|print)\\s*\\(/, /\\b(extends|implements)\\s+\\w+/, /\\.(java)$/i],\n        medium: [/\\b(String|int|double|float|boolean|char|void|Object)\\b/, /\\b(if|else|for|while|switch|case|break|continue|return|try|catch|finally)\\b/, /\\b(public|private|protected|static|final|abstract)\\b/, /\\/\\/.*$/m, /\\/\\*[\\s\\S]*?\\*\\//, /\\bnew\\s+\\w+\\s*\\(/],\n        weak: [/\\bimport\\s+java\\./, /\\bpackage\\s+\\w+/]\n      },\n      html: {\n        strong: [/<!DOCTYPE\\s+html>/i, /<html\\b[^>]*>/i, /<(head|body|div|span|p|a|img|script|style|link|meta)\\b[^>]*>/i, /\\.(html|htm)$/i],\n        medium: [/<\\/?[a-z][\\s\\S]*?>/i, /<!--[\\s\\S]*?-->/, /<\\w+(\\s+\\w+(\\s*=\\s*(\"[^\"]*\"|'[^']*'|[^\\s>]+))?)*\\s*\\/?>/],\n        weak: []\n      },\n      css: {\n        strong: [/[.#]?[\\w-]+\\s*\\{[^}]*\\}/, /@(media|import|keyframes|font-face)\\b/, /\\.(css|scss|sass|less)$/i],\n        medium: [/\\b(color|background|margin|padding|border|width|height|font|display|position|flex|grid)\\s*:/, /#[a-fA-F0-9]{3,8}\\b/, /\\b\\d+(px|em|rem|vh|vw|%|pt|pc|in|cm|mm|ex|ch)\\b/, /\\/\\*[\\s\\S]*?\\*\\//, /rgba?\\([^)]+\\)/],\n        weak: [/\\b(hover|focus|active|visited)\\b/]\n      },\n      json: {\n        strong: [/^\\s*\\{[\\s\\S]*\\}\\s*$/, /^\\s*\\[[\\s\\S]*\\]\\s*$/, /\"[^\"]*\"\\s*:\\s*(\"[^\"]*\"|\\d+|true|false|null|\\{|\\[)/, /\\.(json)$/i],\n        medium: [/^\\s*[{[]/, /\"[^\"]*\"\\s*:/, /:\\s*(true|false|null)\\b/],\n        weak: []\n      },\n      xml: {\n        strong: [/<\\?xml\\s+version/i, /\\.(xml|xsd|xsl|xslt)$/i, /<\\w+(\\s+\\w+\\s*=\\s*\"[^\"]*\")*\\s*\\/?>[\\s\\S]*<\\/\\w+>/],\n        medium: [/<!--[\\s\\S]*?-->/, /<\\/\\w+>/],\n        weak: []\n      },\n      markdown: {\n        strong: [/^#{1,6}\\s+.+$/m, /```[\\w]*\\n[\\s\\S]*?\\n```/, /\\.(md|markdown)$/i, /\\[([^\\]]+)\\]\\(([^)]+)\\)/],\n        medium: [/^\\s*[-*+]\\s+/m, /^\\s*\\d+\\.\\s+/m, /\\*\\*[^*\\n]+\\*\\*/, /\\*[^*\\n]+\\*/, /`[^`\\n]+`/, /^\\s*>\\s+/m],\n        weak: [/\\n\\s*\\n/, /^\\s*---+\\s*$/m]\n      },\n      sql: {\n        strong: [/\\b(SELECT\\s+.*\\s+FROM|INSERT\\s+INTO|UPDATE\\s+.*\\s+SET|DELETE\\s+FROM)\\b/i, /\\b(CREATE\\s+(TABLE|DATABASE|INDEX)|DROP\\s+(TABLE|DATABASE|INDEX)|ALTER\\s+TABLE)\\b/i, /\\.(sql)$/i],\n        medium: [/\\b(JOIN|INNER|LEFT|RIGHT|OUTER|ON|GROUP\\s+BY|ORDER\\s+BY|HAVING|WHERE)\\b/i, /--.*$/m, /\\/\\*[\\s\\S]*?\\*\\//],\n        weak: [/\\b(COUNT|SUM|AVG|MIN|MAX)\\s*\\(/i]\n      },\n      php: {\n        strong: [/<\\?php\\b/, /\\.(php|phtml)$/i, /\\$\\w+\\s*=/, /\\bfunction\\s+\\w+\\s*\\([^)]*\\)\\s*\\{/],\n        medium: [/\\b(echo|print|var_dump|isset|empty|array)\\b/, /\\$(this|_GET|_POST|_SESSION|_COOKIE)\\b/, /\\/\\/.*$|#.*$/m, /\\/\\*[\\s\\S]*?\\*\\//],\n        weak: [/\\b(public|private|protected|class|extends)\\b/]\n      },\n      c: {\n        strong: [/#include\\s*<[^>]+\\.h>/, /\\bint\\s+main\\s*\\([^)]*\\)\\s*\\{/, /\\.(c|h)$/i, /\\b(printf|scanf|malloc|free)\\s*\\(/],\n        medium: [/\\b(int|char|float|double|void|struct|typedef|enum)\\b/, /\\bsizeof\\s*\\(/, /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*$/m, /\\b(if|else|for|while|switch|case|break|continue|return)\\b/],\n        weak: [/\\b(stdio|stdlib|string)\\.h\\b/]\n      },\n      cpp: {\n        strong: [/\\.(cpp|cxx|cc|hpp|hxx)$/i, /#include\\s*<[^>]+>/, /\\b(std::|cout|cin|endl|vector|string|namespace\\s+std)\\b/, /\\bclass\\s+\\w+\\s*\\{/],\n        medium: [/\\b(public|private|protected):\\s*$/m, /\\b(int|char|float|double|void|bool|auto)\\b/, /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*$/m, /\\bnew\\s+\\w+/, /\\bdelete\\s+/],\n        weak: [/\\b(iostream|vector|string|algorithm)\\b/]\n      },\n      csharp: {\n        strong: [/\\.(cs)$/i, /\\bnamespace\\s+\\w+/, /\\busing\\s+System\\b/, /\\bConsole\\.(WriteLine|Write)\\s*\\(/],\n        medium: [/\\b(public|private|protected|internal|static)\\s+(class|void|string|int|bool)\\b/, /\\/\\/.*$/m, /\\/\\*[\\s\\S]*?\\*\\//],\n        weak: [/\\bvar\\s+\\w+\\s*=/]\n      },\n      ruby: {\n        strong: [/\\.(rb)$/i, /\\bdef\\s+\\w+.*\\bend\\b/s, /\\bclass\\s+\\w+.*\\bend\\b/s, /\\b(puts|print|p)\\s/],\n        medium: [/\\b(if|elsif|else|unless|case|when|for|while|until|do|begin|rescue|ensure|end)\\b/, /#.*$/m, /\\b(true|false|nil)\\b/, /\\b(require|include|extend)\\b/],\n        weak: [/\\|\\w+\\|/, /@\\w+/]\n      },\n      go: {\n        strong: [/\\.(go)$/i, /\\bpackage\\s+\\w+/, /\\bfunc\\s+\\w+\\s*\\(/, /\\bfmt\\.(Print|Println|Printf)\\s*\\(/],\n        medium: [/\\b(import|var|const|type|struct|interface|map|chan)\\b/, /\\/\\/.*$/m, /\\/\\*[\\s\\S]*?\\*\\//, /:=\\s*/],\n        weak: [/\\bgo\\s+\\w+\\(/]\n      },\n      rust: {\n        strong: [/\\.(rs)$/i, /\\bfn\\s+\\w+\\s*\\(/, /\\b(println!|print!|panic!|vec!)\\s*!/, /\\buse\\s+std::/],\n        medium: [/\\b(let|mut|const|struct|enum|impl|trait|mod|pub|crate)\\b/, /\\/\\/.*$/m, /\\/\\*[\\s\\S]*?\\*\\//, /&\\w+/, /->\\s*\\w+/],\n        weak: [/\\bCargo\\./]\n      },\n      yaml: {\n        strong: [/\\.(yml|yaml)$/i, /^[\\s]*[\\w-]+\\s*:\\s*[\\w\\s-]+$/m, /^[\\s]*-\\s+[\\w-]+:/m],\n        medium: [/^[\\s]*-\\s+/m, /#.*$/m, /^\\s*\\|\\s*$/m, /^\\s*>\\s*$/m],\n        weak: []\n      },\n      dockerfile: {\n        strong: [/^FROM\\s+\\w+/m, /\\b(RUN|COPY|ADD|WORKDIR|EXPOSE|CMD|ENTRYPOINT)\\s+/m, /\\.(dockerfile|Dockerfile)$/i],\n        medium: [/\\b(ENV|ARG|LABEL|USER|VOLUME)\\s+/m],\n        weak: []\n      },\n      shell: {\n        strong: [/^#!/, /\\.(sh|bash|zsh|fish)$/i, /\\b(echo|cd|ls|grep|awk|sed|cat|chmod|chown|mkdir|rm|mv|cp)\\s+/],\n        medium: [/#.*$/m, /\\$\\{?\\w+\\}?/, /\\|\\s*\\w+/, /&&|\\|\\|/],\n        weak: [/\\bexport\\s+\\w+=/]\n      }\n    };\n    this.fileExtensions = {\n      js: 'javascript',\n      jsx: 'javascript',\n      ts: 'javascript',\n      tsx: 'javascript',\n      mjs: 'javascript',\n      py: 'python',\n      pyw: 'python',\n      pyi: 'python',\n      java: 'java',\n      class: 'java',\n      html: 'html',\n      htm: 'html',\n      xhtml: 'html',\n      css: 'css',\n      scss: 'css',\n      sass: 'css',\n      less: 'css',\n      stylus: 'css',\n      json: 'json',\n      jsonc: 'json',\n      xml: 'xml',\n      xsd: 'xml',\n      xsl: 'xml',\n      xslt: 'xml',\n      svg: 'xml',\n      md: 'markdown',\n      markdown: 'markdown',\n      mdown: 'markdown',\n      mkd: 'markdown',\n      sql: 'sql',\n      mysql: 'sql',\n      pgsql: 'sql',\n      sqlite: 'sql',\n      php: 'php',\n      phtml: 'php',\n      php3: 'php',\n      php4: 'php',\n      php5: 'php',\n      c: 'c',\n      h: 'c',\n      cpp: 'cpp',\n      cxx: 'cpp',\n      cc: 'cpp',\n      hpp: 'cpp',\n      hxx: 'cpp',\n      hh: 'cpp',\n      cs: 'csharp',\n      csx: 'csharp',\n      rb: 'ruby',\n      rbw: 'ruby',\n      rake: 'ruby',\n      gemspec: 'ruby',\n      go: 'go',\n      mod: 'go',\n      rs: 'rust',\n      rlib: 'rust',\n      yml: 'yaml',\n      yaml: 'yaml',\n      sh: 'shell',\n      bash: 'shell',\n      zsh: 'shell',\n      fish: 'shell',\n      ksh: 'shell',\n      dockerfile: 'dockerfile'\n    };\n\n    // Scoring weights\n    this.weights = {\n      strong: 10,\n      medium: 3,\n      weak: 1,\n      filename: 15\n    };\n  }\n\n  /**\r\n   * Detect language from filename with improved extension handling\r\n   */\n  detectFromFilename(filename) {\n    var _filename$split$pop;\n    if (!filename) return null;\n\n    // Handle special cases\n    if (/^Dockerfile$/i.test(filename) || /\\.dockerfile$/i.test(filename)) {\n      return 'dockerfile';\n    }\n    if (/^Makefile$/i.test(filename) || /\\.mk$/i.test(filename)) {\n      return 'shell';\n    }\n    const extension = (_filename$split$pop = filename.split('.').pop()) === null || _filename$split$pop === void 0 ? void 0 : _filename$split$pop.toLowerCase();\n    return this.fileExtensions[extension] || null;\n  }\n\n  /**\r\n   * Enhanced content detection with weighted scoring\r\n   */\n  detectFromContent(content) {\n    if (!content || content.trim().length === 0) return 'plaintext';\n\n    // Check for clear plain text indicators first\n    if (this.isPlainText(content)) {\n      return 'plaintext';\n    }\n    const scores = {};\n    const contentLines = content.split('\\n');\n    const sampleSize = Math.min(50, contentLines.length); // Analyze first 50 lines for efficiency\n    const sampleContent = contentLines.slice(0, sampleSize).join('\\n');\n\n    // Initialize scores\n    Object.keys(this.patterns).forEach(lang => {\n      scores[lang] = 0;\n    });\n\n    // Score each language\n    Object.entries(this.patterns).forEach(([language, categories]) => {\n      Object.entries(categories).forEach(([category, patterns]) => {\n        const weight = this.weights[category];\n        patterns.forEach(pattern => {\n          // Skip filename patterns when analyzing content\n          if (pattern.source.includes('\\\\.(') && pattern.source.includes(')$/i')) {\n            return;\n          }\n          const matches = sampleContent.match(new RegExp(pattern.source, pattern.flags + 'g'));\n          if (matches) {\n            let matchScore = Math.min(matches.length, 5) * weight; // Cap matches per pattern\n\n            // Bonus for early matches (first 10 lines are more significant)\n            const earlyContent = contentLines.slice(0, 10).join('\\n');\n            const earlyMatches = earlyContent.match(new RegExp(pattern.source, pattern.flags + 'g'));\n            if (earlyMatches) {\n              matchScore += earlyMatches.length * weight * 0.5;\n            }\n            scores[language] += matchScore;\n          }\n        });\n      });\n    });\n\n    // Apply penalties for conflicting patterns\n    this.applyConflictPenalties(scores, sampleContent);\n\n    // Apply plain text penalties for weak matches\n    this.applyPlainTextPenalties(scores, sampleContent);\n\n    // Find best match\n    const sortedLanguages = Object.entries(scores).sort(([, a], [, b]) => b - a).filter(([, score]) => score > 0);\n    if (sortedLanguages.length === 0) {\n      return 'plaintext';\n    }\n    const [topLanguage, topScore] = sortedLanguages[0];\n    const [, secondScore] = sortedLanguages[1] || [null, 0];\n\n    // More conservative thresholds for plain text detection\n    const minStrongScore = 15; // Requires at least one strong pattern match\n    const minWeakScore = 8; // For multiple weak matches\n    const confidenceRatio = secondScore > 0 ? topScore / secondScore : Infinity;\n\n    // Check if we have strong evidence for a language\n    const hasStrongEvidence = this.hasStrongLanguageEvidence(topLanguage, sampleContent);\n    if (!hasStrongEvidence && topScore < minStrongScore) {\n      return 'plaintext';\n    }\n    if (topScore < minWeakScore || confidenceRatio < 1.3 && topScore < 25) {\n      return 'plaintext';\n    }\n    return topLanguage;\n  }\n\n  /**\r\n   * Apply penalties for conflicting language indicators\r\n   */\n  applyConflictPenalties(scores, content) {\n    // HTML vs XML conflict resolution\n    if (scores.html > 0 && scores.xml > 0) {\n      if (content.includes('<!DOCTYPE html') || content.includes('<html')) {\n        scores.xml *= 0.3;\n      } else if (content.includes('<?xml')) {\n        scores.html *= 0.3;\n      }\n    }\n\n    // JavaScript vs JSON conflict\n    if (scores.javascript > 0 && scores.json > 0) {\n      if (content.includes('function') || content.includes('var ') || content.includes('let ') || content.includes('const ')) {\n        scores.json *= 0.1;\n      }\n    }\n\n    // C vs C++ conflict\n    if (scores.c > 0 && scores.cpp > 0) {\n      if (content.includes('std::') || content.includes('#include <iostream>') || content.includes('class ')) {\n        scores.c *= 0.3;\n      } else if (!content.includes('std::') && !content.includes('class ') && !content.includes('namespace')) {\n        scores.cpp *= 0.5;\n      }\n    }\n\n    // Shell vs other languages\n    if (scores.shell > 0) {\n      const hasShebang = content.startsWith('#!');\n      if (!hasShebang && (scores.python > 0 || scores.ruby > 0)) {\n        scores.shell *= 0.4;\n      }\n    }\n  }\n\n  /**\r\n   * Check if content appears to be plain text\r\n   */\n  isPlainText(content) {\n    const lines = content.split('\\n');\n    const totalLines = lines.length;\n    const trimmedContent = content.trim();\n\n    // Empty or very minimal content\n    if (trimmedContent.length === 0) {\n      return true;\n    }\n\n    // Very short content is likely plain text unless it has clear code indicators\n    if (content.length < 100 && totalLines <= 5) {\n      const strongCodeIndicators = [/^#!/,\n      // shebang\n      /<[a-z][^>]*>/i,\n      // HTML tags\n      /^\\s*[\\{\\[]/,\n      // JSON/CSS/array start\n      /^\\s*<\\?/,\n      // XML/PHP\n      /\\bfunction\\s*\\(/,\n      // function definitions\n      /\\bclass\\s+\\w+\\s*[\\{\\(]/,\n      // class definitions\n      /\\bdef\\s+\\w+\\s*\\(/,\n      // Python functions\n      /\\b(public|private|protected)\\s+/,\n      // access modifiers\n      /^FROM\\s+\\w+/i,\n      // Dockerfile\n      /^\\w+\\s*:\\s*[\\[\\{]/,\n      // YAML/JSON objects\n      /;\\s*$/m,\n      // statements ending with semicolon\n      /\\{[^}]*\\}/,\n      // code blocks\n      /\\/\\/.*$|\\/\\*[\\s\\S]*?\\*\\//,\n      // code comments\n      /\\b(import|export|require)\\s*[\\(\\{]/,\n      // module imports\n      /\\b(console\\.|print\\(|echo\\s)/,\n      // output statements\n      /\\$\\w+|@\\w+/,\n      // variables with sigils\n      /\\b\\d+\\s*[+\\-*\\/]\\s*\\d+/ // mathematical expressions\n      ];\n      const hasStrongCodeIndicator = strongCodeIndicators.some(pattern => pattern.test(content));\n      if (!hasStrongCodeIndicator) {\n        return true;\n      }\n    }\n\n    // Enhanced natural language vs code analysis\n    const naturalLanguageScore = this.calculateEnhancedNaturalLanguageScore(content);\n    const codeScore = this.calculateEnhancedCodeScore(content);\n    const proseScore = this.calculateProseScore(content);\n\n    // Strong natural language indicators\n    if (naturalLanguageScore > codeScore * 2 && naturalLanguageScore > 0.02) {\n      return true;\n    }\n\n    // High prose score indicates natural text\n    if (proseScore > 0.15 && content.length > 50) {\n      return true;\n    }\n\n    // Check for conversational patterns\n    if (this.hasConversationalPatterns(content)) {\n      return true;\n    }\n\n    // Check for narrative/descriptive text patterns\n    if (this.hasNarrativePatterns(content) && codeScore < 0.05) {\n      return true;\n    }\n\n    // Check sentence structure\n    const sentenceScore = this.calculateSentenceScore(content);\n    if (sentenceScore > 0.3 && codeScore < naturalLanguageScore) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\r\n   * Enhanced natural language score calculation\r\n   */\n  calculateEnhancedNaturalLanguageScore(content) {\n    const commonWords = [/\\b(the|and|or|but|in|on|at|to|for|of|with|by|this|that|these|those|a|an)\\b/gi, /\\b(is|are|was|were|been|being|have|has|had|do|does|did|will|would|could|should|can|may|might)\\b/gi, /\\b(I|you|he|she|it|we|they|me|him|her|us|them|my|your|his|her|its|our|their)\\b/gi, /\\b(what|when|where|why|how|who|which|whose)\\b/gi, /\\b(very|really|quite|rather|pretty|fairly|extremely|incredibly|absolutely)\\b/gi];\n    let totalMatches = 0;\n    commonWords.forEach(pattern => {\n      const matches = content.match(pattern);\n      if (matches) totalMatches += matches.length;\n    });\n\n    // Normalize by word count instead of character count\n    const wordCount = content.split(/\\s+/).filter(word => word.length > 0).length;\n    return totalMatches / Math.max(wordCount, 1);\n  }\n\n  /**\r\n   * Enhanced code score calculation\r\n   */\n  calculateEnhancedCodeScore(content) {\n    const codeIndicators = [/[{}();]/g,\n    // code punctuation\n    /\\b(function|class|def|var|let|const|if|for|while|return|import|export)\\b/gi, /[=<>!]+[=]/g,\n    // comparison operators\n    /\\/\\/.*$|\\/\\*[\\s\\S]*?\\*\\/|#.*$/gm,\n    // comments\n    /\\b0x[0-9a-f]+\\b/gi,\n    // hex numbers\n    /\\d+\\.\\d+/g,\n    // floating point numbers\n    /\\$\\w+|@\\w+/g,\n    // variables with sigils\n    /\\b\\w+\\s*\\(/g,\n    // function calls\n    /\\b(true|false|null|undefined|None|nil)\\b/gi // programming literals\n    ];\n    let totalMatches = 0;\n    codeIndicators.forEach(pattern => {\n      const matches = content.match(pattern);\n      if (matches) totalMatches += matches.length;\n    });\n    const wordCount = content.split(/\\s+/).filter(word => word.length > 0).length;\n    return totalMatches / Math.max(wordCount, 1);\n  }\n\n  /**\r\n   * Calculate prose/narrative score\r\n   */\n  calculateProseScore(content) {\n    const proseIndicators = [/[.!?]\\s+[A-Z]/g,\n    // sentence endings followed by capital letters\n    /\\b[A-Z][a-z]{2,}\\b/g,\n    // properly capitalized words\n    /,\\s+/g,\n    // comma usage\n    /\\b(said|told|asked|replied|explained|described|mentioned|noted|observed)\\b/gi,\n    // narrative verbs\n    /\\b(because|since|although|however|therefore|moreover|furthermore|nevertheless)\\b/gi,\n    // connective words\n    /\\b(first|second|third|finally|then|next|after|before|during|while)\\b/gi // sequence words\n    ];\n    let totalMatches = 0;\n    proseIndicators.forEach(pattern => {\n      const matches = content.match(pattern);\n      if (matches) totalMatches += matches.length;\n    });\n    return totalMatches / Math.max(content.length, 1);\n  }\n\n  /**\r\n   * Check for conversational patterns\r\n   */\n  hasConversationalPatterns(content) {\n    const conversationalPatterns = [/\\b(hello|hi|hey|thanks|thank you|please|sorry|excuse me)\\b/gi, /\\b(I think|I believe|I feel|I know|I understand|I agree|I disagree)\\b/gi, /\\b(you know|you see|you understand|right\\?|okay\\?|isn't it\\?)\\b/gi, /\\b(well|so|now|actually|basically|essentially|obviously)\\b/gi];\n    let matches = 0;\n    conversationalPatterns.forEach(pattern => {\n      if (content.match(pattern)) matches++;\n    });\n    return matches >= 2;\n  }\n\n  /**\r\n   * Check for narrative/descriptive patterns\r\n   */\n  hasNarrativePatterns(content) {\n    const narrativePatterns = [/\\b(once upon a time|in the beginning|long ago|yesterday|today|tomorrow)\\b/gi, /\\b(beautiful|amazing|wonderful|terrible|horrible|fantastic|incredible)\\b/gi, /\\b(walked|ran|jumped|looked|saw|heard|felt|thought|remembered)\\b/gi, /\\b(suddenly|quickly|slowly|carefully|quietly|loudly)\\b/gi];\n    let matches = 0;\n    narrativePatterns.forEach(pattern => {\n      if (content.match(pattern)) matches++;\n    });\n    return matches >= 1;\n  }\n\n  /**\r\n   * Calculate sentence structure score\r\n   */\n  calculateSentenceScore(content) {\n    const sentences = content.split(/[.!?]+/).filter(s => s.trim().length > 5);\n    if (sentences.length === 0) return 0;\n    let validSentences = 0;\n    sentences.forEach(sentence => {\n      const words = sentence.trim().split(/\\s+/).filter(w => w.length > 0);\n      // Valid sentences typically have 3+ words and start with capital letter\n      if (words.length >= 3 && /^[A-Z]/.test(sentence.trim())) {\n        validSentences++;\n      }\n    });\n    return validSentences / sentences.length;\n  }\n\n  /**\r\n   * Calculate natural language score (legacy method - redirects to enhanced version)\r\n   */\n  calculateNaturalLanguageScore(content) {\n    return this.calculateEnhancedNaturalLanguageScore(content);\n  }\n\n  /**\r\n   * Calculate code score (legacy method - redirects to enhanced version)\r\n   */\n  calculateCodeScore(content) {\n    return this.calculateEnhancedCodeScore(content);\n  }\n\n  /**\r\n   * Apply penalties when content looks like plain text\r\n   */\n  applyPlainTextPenalties(scores, content) {\n    const naturalLanguageScore = this.calculateNaturalLanguageScore(content);\n    const codeScore = this.calculateCodeScore(content);\n\n    // If content looks like natural language, penalize all programming languages\n    if (naturalLanguageScore > codeScore && naturalLanguageScore > 0.02) {\n      const penalty = Math.min(0.8, naturalLanguageScore * 10);\n      Object.keys(scores).forEach(lang => {\n        if (lang !== 'markdown' && lang !== 'plaintext') {\n          scores[lang] *= 1 - penalty;\n        }\n      });\n    }\n\n    // Penalize languages with very weak evidence\n    Object.entries(scores).forEach(([lang, score]) => {\n      if (score > 0 && score < 5) {\n        const strongEvidence = this.hasStrongLanguageEvidence(lang, content);\n        if (!strongEvidence) {\n          scores[lang] *= 0.3;\n        }\n      }\n    });\n  }\n\n  /**\r\n   * Check if content has strong evidence for a specific language\r\n   */\n  hasStrongLanguageEvidence(language, content) {\n    if (!this.patterns[language] || !this.patterns[language].strong) {\n      return false;\n    }\n    let strongMatches = 0;\n    this.patterns[language].strong.forEach(pattern => {\n      // Skip filename patterns\n      if (pattern.source.includes('\\\\.(') && pattern.source.includes(')$/i')) {\n        return;\n      }\n      if (content.match(pattern)) {\n        strongMatches++;\n      }\n    });\n    return strongMatches >= 1;\n  }\n\n  /**\r\n   * Calculate confidence level based on score and patterns\r\n   */\n  calculateConfidence(language, score, content) {\n    var _patterns$strong;\n    if (language === 'plaintext') {\n      // For plaintext, confidence depends on how clearly it's NOT code\n      const naturalLanguageScore = this.calculateNaturalLanguageScore(content);\n      const codeScore = this.calculateCodeScore(content);\n      if (naturalLanguageScore > codeScore * 2) return 'high';\n      if (naturalLanguageScore > codeScore) return 'medium';\n      return 'low';\n    }\n    const patterns = this.patterns[language];\n    if (!patterns) return 'low';\n    const strongMatches = ((_patterns$strong = patterns.strong) === null || _patterns$strong === void 0 ? void 0 : _patterns$strong.filter(pattern => {\n      // Skip filename patterns in confidence calculation\n      if (pattern.source.includes('\\\\.(') && pattern.source.includes(')$/i')) {\n        return false;\n      }\n      return content.match(pattern);\n    }).length) || 0;\n    if (strongMatches >= 2 && score >= 25) return 'high';\n    if (strongMatches >= 1 && score >= 15) return 'medium';\n    if (strongMatches >= 1 || score >= 12) return 'low';\n    return 'very-low';\n  }\n\n  /**\r\n   * Enhanced auto-detection with improved logic\r\n   */\n  autoDetect(content, filename = null) {\n    // Filename detection with high confidence\n    const filenameLanguage = this.detectFromFilename(filename);\n    if (filenameLanguage) {\n      // Verify filename detection with content if available\n      if (content && content.trim().length > 0) {\n        const contentLanguage = this.detectFromContent(content);\n\n        // If content strongly suggests a different language, use content detection\n        if (contentLanguage !== 'plaintext' && contentLanguage !== filenameLanguage) {\n          const contentScore = this.getLanguageScore(content, contentLanguage);\n          const filenameScore = this.getLanguageScore(content, filenameLanguage);\n          if (contentScore > filenameScore * 1.5) {\n            return {\n              language: contentLanguage,\n              confidence: this.calculateConfidence(contentLanguage, contentScore, content),\n              method: 'content-override',\n              alternateDetection: filenameLanguage\n            };\n          }\n        }\n      }\n      return {\n        language: filenameLanguage,\n        confidence: 'high',\n        method: 'filename'\n      };\n    }\n\n    // Content-only detection\n    const contentLanguage = this.detectFromContent(content);\n    const score = this.getLanguageScore(content, contentLanguage);\n    return {\n      language: contentLanguage,\n      confidence: this.calculateConfidence(contentLanguage, score, content),\n      method: 'content'\n    };\n  }\n\n  /**\r\n   * Get score for a specific language\r\n   */\n  getLanguageScore(content, language) {\n    if (!this.patterns[language]) return 0;\n    let score = 0;\n    Object.entries(this.patterns[language]).forEach(([category, patterns]) => {\n      const weight = this.weights[category];\n      patterns.forEach(pattern => {\n        const matches = content.match(new RegExp(pattern.source, pattern.flags + 'g'));\n        if (matches) {\n          score += Math.min(matches.length, 5) * weight;\n        }\n      });\n    });\n    return score;\n  }\n\n  /**\r\n   * Get detailed detection results for debugging\r\n   */\n  getDetectionDetails(content, filename = null) {\n    const results = this.autoDetect(content, filename);\n    const scores = {};\n\n    // Calculate scores for all languages\n    Object.keys(this.patterns).forEach(lang => {\n      scores[lang] = this.getLanguageScore(content, lang);\n    });\n    const sortedScores = Object.entries(scores).sort(([, a], [, b]) => b - a).slice(0, 5);\n    return {\n      ...results,\n      topScores: sortedScores,\n      totalPatterns: Object.keys(this.patterns).length,\n      contentLength: (content === null || content === void 0 ? void 0 : content.length) || 0\n    };\n  }\n\n  /**\r\n   * Get all supported languages\r\n   */\n  getSupportedLanguages() {\n    return ['plaintext', ...Object.keys(this.patterns).sort()];\n  }\n\n  /**\r\n   * Check if a language is supported\r\n   */\n  isLanguageSupported(language) {\n    return language === 'plaintext' || this.patterns.hasOwnProperty(language);\n  }\n}\nexport default LanguageDetector;","map":{"version":3,"names":["LanguageDetector","constructor","patterns","javascript","strong","medium","weak","python","java","html","css","json","xml","markdown","sql","php","c","cpp","csharp","ruby","go","rust","yaml","dockerfile","shell","fileExtensions","js","jsx","ts","tsx","mjs","py","pyw","pyi","class","htm","xhtml","scss","sass","less","stylus","jsonc","xsd","xsl","xslt","svg","md","mdown","mkd","mysql","pgsql","sqlite","phtml","php3","php4","php5","h","cxx","cc","hpp","hxx","hh","cs","csx","rb","rbw","rake","gemspec","mod","rs","rlib","yml","sh","bash","zsh","fish","ksh","weights","filename","detectFromFilename","_filename$split$pop","test","extension","split","pop","toLowerCase","detectFromContent","content","trim","length","isPlainText","scores","contentLines","sampleSize","Math","min","sampleContent","slice","join","Object","keys","forEach","lang","entries","language","categories","category","weight","pattern","source","includes","matches","match","RegExp","flags","matchScore","earlyContent","earlyMatches","applyConflictPenalties","applyPlainTextPenalties","sortedLanguages","sort","a","b","filter","score","topLanguage","topScore","secondScore","minStrongScore","minWeakScore","confidenceRatio","Infinity","hasStrongEvidence","hasStrongLanguageEvidence","hasShebang","startsWith","lines","totalLines","trimmedContent","strongCodeIndicators","hasStrongCodeIndicator","some","naturalLanguageScore","calculateEnhancedNaturalLanguageScore","codeScore","calculateEnhancedCodeScore","proseScore","calculateProseScore","hasConversationalPatterns","hasNarrativePatterns","sentenceScore","calculateSentenceScore","commonWords","totalMatches","wordCount","word","max","codeIndicators","proseIndicators","conversationalPatterns","narrativePatterns","sentences","s","validSentences","sentence","words","w","calculateNaturalLanguageScore","calculateCodeScore","penalty","strongEvidence","strongMatches","calculateConfidence","_patterns$strong","autoDetect","filenameLanguage","contentLanguage","contentScore","getLanguageScore","filenameScore","confidence","method","alternateDetection","getDetectionDetails","results","sortedScores","topScores","totalPatterns","contentLength","getSupportedLanguages","isLanguageSupported","hasOwnProperty"],"sources":["C:/Users/Joem/quickdiff-react/src/utils/LanguageDetector.js"],"sourcesContent":["/**\r\n * Enhanced Language Auto-Detection Utility\r\n * Detects programming language based on content patterns with improved accuracy\r\n */\r\n\r\nexport class LanguageDetector {\r\n  constructor() {\r\n    this.patterns = {\r\n      javascript: {\r\n        strong: [\r\n          /\\b(const|let|var)\\s+\\w+\\s*=/,\r\n          /\\b(function|async\\s+function)\\s*\\w*\\s*\\(/,\r\n          /\\b(React|useState|useEffect|useContext|props)\\b/,\r\n          /\\b(console\\.(log|error|warn))\\s*\\(/,\r\n          /\\b(document\\.|window\\.)\\w+/,\r\n          /\\b(require|import|export)\\s*\\(/,\r\n          /\\bexport\\s+(default\\s+)?/,\r\n          /=>\\s*[{(]/,\r\n          /\\.(js|jsx|ts|tsx)$/i\r\n        ],\r\n        medium: [\r\n          /\\b(if|else|for|while|switch|case|break|continue|return)\\b/,\r\n          /\\b(setTimeout|setInterval|Promise|async|await)\\b/,\r\n          /\\b(null|undefined|NaN|Infinity)\\b/,\r\n          /\\/\\/.*$/m,\r\n          /\\/\\*[\\s\\S]*?\\*\\//,\r\n          /\\b(true|false)\\b/,\r\n          /\\$\\{[^}]*\\}/\r\n        ],\r\n        weak: [\r\n          /\\b(npm|node|express|axios|webpack)\\b/,\r\n          /\\.(json|js)\"/\r\n        ]\r\n      },\r\n      python: {\r\n        strong: [\r\n          /\\bdef\\s+\\w+\\s*\\(/,\r\n          /\\bclass\\s+\\w+\\s*(\\([^)]*\\))?\\s*:/,\r\n          /\\bfrom\\s+\\w+\\s+import\\b/,\r\n          /\\bimport\\s+\\w+/,\r\n          /\\b(if|elif|else)\\s+.*:/,\r\n          /\\bfor\\s+\\w+\\s+in\\b/,\r\n          /\\bwhile\\s+.*:/,\r\n          /\\b(try|except|finally)\\s*:/,\r\n          /\\bwith\\s+.*:/,\r\n          /\\.(py|pyw)$/i\r\n        ],\r\n        medium: [\r\n          /\\b(self|__init__|__name__|__main__)\\b/,\r\n          /\\b(print|input|len|range|enumerate|zip)\\b/,\r\n          /\\b(True|False|None)\\b/,\r\n          /\\b(and|or|not|in|is)\\b/,\r\n          /#.*$/m,\r\n          /\"\"\"[\\s\\S]*?\"\"\"/,\r\n          /'''[\\s\\S]*?'''/\r\n        ],\r\n        weak: [\r\n          /\\bindent/,\r\n          /\\bpip\\s+install\\b/\r\n        ]\r\n      },\r\n      java: {\r\n        strong: [\r\n          /\\bpublic\\s+class\\s+\\w+/,\r\n          /\\bpublic\\s+static\\s+void\\s+main\\s*\\(/,\r\n          /\\b(public|private|protected)\\s+(static\\s+)?\\w+\\s+\\w+\\s*\\(/,\r\n          /\\bSystem\\.out\\.(println|print)\\s*\\(/,\r\n          /\\b(extends|implements)\\s+\\w+/,\r\n          /\\.(java)$/i\r\n        ],\r\n        medium: [\r\n          /\\b(String|int|double|float|boolean|char|void|Object)\\b/,\r\n          /\\b(if|else|for|while|switch|case|break|continue|return|try|catch|finally)\\b/,\r\n          /\\b(public|private|protected|static|final|abstract)\\b/,\r\n          /\\/\\/.*$/m,\r\n          /\\/\\*[\\s\\S]*?\\*\\//,\r\n          /\\bnew\\s+\\w+\\s*\\(/\r\n        ],\r\n        weak: [\r\n          /\\bimport\\s+java\\./,\r\n          /\\bpackage\\s+\\w+/\r\n        ]\r\n      },\r\n      html: {\r\n        strong: [\r\n          /<!DOCTYPE\\s+html>/i,\r\n          /<html\\b[^>]*>/i,\r\n          /<(head|body|div|span|p|a|img|script|style|link|meta)\\b[^>]*>/i,\r\n          /\\.(html|htm)$/i\r\n        ],\r\n        medium: [\r\n          /<\\/?[a-z][\\s\\S]*?>/i,\r\n          /<!--[\\s\\S]*?-->/,\r\n          /<\\w+(\\s+\\w+(\\s*=\\s*(\"[^\"]*\"|'[^']*'|[^\\s>]+))?)*\\s*\\/?>/\r\n        ],\r\n        weak: []\r\n      },\r\n      css: {\r\n        strong: [\r\n          /[.#]?[\\w-]+\\s*\\{[^}]*\\}/,\r\n          /@(media|import|keyframes|font-face)\\b/,\r\n          /\\.(css|scss|sass|less)$/i\r\n        ],\r\n        medium: [\r\n          /\\b(color|background|margin|padding|border|width|height|font|display|position|flex|grid)\\s*:/,\r\n          /#[a-fA-F0-9]{3,8}\\b/,\r\n          /\\b\\d+(px|em|rem|vh|vw|%|pt|pc|in|cm|mm|ex|ch)\\b/,\r\n          /\\/\\*[\\s\\S]*?\\*\\//,\r\n          /rgba?\\([^)]+\\)/\r\n        ],\r\n        weak: [\r\n          /\\b(hover|focus|active|visited)\\b/\r\n        ]\r\n      },\r\n      json: {\r\n        strong: [\r\n          /^\\s*\\{[\\s\\S]*\\}\\s*$/,\r\n          /^\\s*\\[[\\s\\S]*\\]\\s*$/,\r\n          /\"[^\"]*\"\\s*:\\s*(\"[^\"]*\"|\\d+|true|false|null|\\{|\\[)/,\r\n          /\\.(json)$/i\r\n        ],\r\n        medium: [\r\n          /^\\s*[{[]/,\r\n          /\"[^\"]*\"\\s*:/,\r\n          /:\\s*(true|false|null)\\b/\r\n        ],\r\n        weak: []\r\n      },\r\n      xml: {\r\n        strong: [\r\n          /<\\?xml\\s+version/i,\r\n          /\\.(xml|xsd|xsl|xslt)$/i,\r\n          /<\\w+(\\s+\\w+\\s*=\\s*\"[^\"]*\")*\\s*\\/?>[\\s\\S]*<\\/\\w+>/\r\n        ],\r\n        medium: [\r\n          /<!--[\\s\\S]*?-->/,\r\n          /<\\/\\w+>/\r\n        ],\r\n        weak: []\r\n      },\r\n      markdown: {\r\n        strong: [\r\n          /^#{1,6}\\s+.+$/m,\r\n          /```[\\w]*\\n[\\s\\S]*?\\n```/,\r\n          /\\.(md|markdown)$/i,\r\n          /\\[([^\\]]+)\\]\\(([^)]+)\\)/\r\n        ],\r\n        medium: [\r\n          /^\\s*[-*+]\\s+/m,\r\n          /^\\s*\\d+\\.\\s+/m,\r\n          /\\*\\*[^*\\n]+\\*\\*/,\r\n          /\\*[^*\\n]+\\*/,\r\n          /`[^`\\n]+`/,\r\n          /^\\s*>\\s+/m\r\n        ],\r\n        weak: [\r\n          /\\n\\s*\\n/,\r\n          /^\\s*---+\\s*$/m\r\n        ]\r\n      },\r\n      sql: {\r\n        strong: [\r\n          /\\b(SELECT\\s+.*\\s+FROM|INSERT\\s+INTO|UPDATE\\s+.*\\s+SET|DELETE\\s+FROM)\\b/i,\r\n          /\\b(CREATE\\s+(TABLE|DATABASE|INDEX)|DROP\\s+(TABLE|DATABASE|INDEX)|ALTER\\s+TABLE)\\b/i,\r\n          /\\.(sql)$/i\r\n        ],\r\n        medium: [\r\n          /\\b(JOIN|INNER|LEFT|RIGHT|OUTER|ON|GROUP\\s+BY|ORDER\\s+BY|HAVING|WHERE)\\b/i,\r\n          /--.*$/m,\r\n          /\\/\\*[\\s\\S]*?\\*\\//\r\n        ],\r\n        weak: [\r\n          /\\b(COUNT|SUM|AVG|MIN|MAX)\\s*\\(/i\r\n        ]\r\n      },\r\n      php: {\r\n        strong: [\r\n          /<\\?php\\b/,\r\n          /\\.(php|phtml)$/i,\r\n          /\\$\\w+\\s*=/,\r\n          /\\bfunction\\s+\\w+\\s*\\([^)]*\\)\\s*\\{/\r\n        ],\r\n        medium: [\r\n          /\\b(echo|print|var_dump|isset|empty|array)\\b/,\r\n          /\\$(this|_GET|_POST|_SESSION|_COOKIE)\\b/,\r\n          /\\/\\/.*$|#.*$/m,\r\n          /\\/\\*[\\s\\S]*?\\*\\//\r\n        ],\r\n        weak: [\r\n          /\\b(public|private|protected|class|extends)\\b/\r\n        ]\r\n      },\r\n      c: {\r\n        strong: [\r\n          /#include\\s*<[^>]+\\.h>/,\r\n          /\\bint\\s+main\\s*\\([^)]*\\)\\s*\\{/,\r\n          /\\.(c|h)$/i,\r\n          /\\b(printf|scanf|malloc|free)\\s*\\(/\r\n        ],\r\n        medium: [\r\n          /\\b(int|char|float|double|void|struct|typedef|enum)\\b/,\r\n          /\\bsizeof\\s*\\(/,\r\n          /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*$/m,\r\n          /\\b(if|else|for|while|switch|case|break|continue|return)\\b/\r\n        ],\r\n        weak: [\r\n          /\\b(stdio|stdlib|string)\\.h\\b/\r\n        ]\r\n      },\r\n      cpp: {\r\n        strong: [\r\n          /\\.(cpp|cxx|cc|hpp|hxx)$/i,\r\n          /#include\\s*<[^>]+>/,\r\n          /\\b(std::|cout|cin|endl|vector|string|namespace\\s+std)\\b/,\r\n          /\\bclass\\s+\\w+\\s*\\{/\r\n        ],\r\n        medium: [\r\n          /\\b(public|private|protected):\\s*$/m,\r\n          /\\b(int|char|float|double|void|bool|auto)\\b/,\r\n          /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*$/m,\r\n          /\\bnew\\s+\\w+/,\r\n          /\\bdelete\\s+/\r\n        ],\r\n        weak: [\r\n          /\\b(iostream|vector|string|algorithm)\\b/\r\n        ]\r\n      },\r\n      csharp: {\r\n        strong: [\r\n          /\\.(cs)$/i,\r\n          /\\bnamespace\\s+\\w+/,\r\n          /\\busing\\s+System\\b/,\r\n          /\\bConsole\\.(WriteLine|Write)\\s*\\(/\r\n        ],\r\n        medium: [\r\n          /\\b(public|private|protected|internal|static)\\s+(class|void|string|int|bool)\\b/,\r\n          /\\/\\/.*$/m,\r\n          /\\/\\*[\\s\\S]*?\\*\\//\r\n        ],\r\n        weak: [\r\n          /\\bvar\\s+\\w+\\s*=/\r\n        ]\r\n      },\r\n      ruby: {\r\n        strong: [\r\n          /\\.(rb)$/i,\r\n          /\\bdef\\s+\\w+.*\\bend\\b/s,\r\n          /\\bclass\\s+\\w+.*\\bend\\b/s,\r\n          /\\b(puts|print|p)\\s/\r\n        ],\r\n        medium: [\r\n          /\\b(if|elsif|else|unless|case|when|for|while|until|do|begin|rescue|ensure|end)\\b/,\r\n          /#.*$/m,\r\n          /\\b(true|false|nil)\\b/,\r\n          /\\b(require|include|extend)\\b/\r\n        ],\r\n        weak: [\r\n          /\\|\\w+\\|/,\r\n          /@\\w+/\r\n        ]\r\n      },\r\n      go: {\r\n        strong: [\r\n          /\\.(go)$/i,\r\n          /\\bpackage\\s+\\w+/,\r\n          /\\bfunc\\s+\\w+\\s*\\(/,\r\n          /\\bfmt\\.(Print|Println|Printf)\\s*\\(/\r\n        ],\r\n        medium: [\r\n          /\\b(import|var|const|type|struct|interface|map|chan)\\b/,\r\n          /\\/\\/.*$/m,\r\n          /\\/\\*[\\s\\S]*?\\*\\//,\r\n          /:=\\s*/\r\n        ],\r\n        weak: [\r\n          /\\bgo\\s+\\w+\\(/\r\n        ]\r\n      },\r\n      rust: {\r\n        strong: [\r\n          /\\.(rs)$/i,\r\n          /\\bfn\\s+\\w+\\s*\\(/,\r\n          /\\b(println!|print!|panic!|vec!)\\s*!/,\r\n          /\\buse\\s+std::/\r\n        ],\r\n        medium: [\r\n          /\\b(let|mut|const|struct|enum|impl|trait|mod|pub|crate)\\b/,\r\n          /\\/\\/.*$/m,\r\n          /\\/\\*[\\s\\S]*?\\*\\//,\r\n          /&\\w+/,\r\n          /->\\s*\\w+/\r\n        ],\r\n        weak: [\r\n          /\\bCargo\\./\r\n        ]\r\n      },\r\n      yaml: {\r\n        strong: [\r\n          /\\.(yml|yaml)$/i,\r\n          /^[\\s]*[\\w-]+\\s*:\\s*[\\w\\s-]+$/m,\r\n          /^[\\s]*-\\s+[\\w-]+:/m\r\n        ],\r\n        medium: [\r\n          /^[\\s]*-\\s+/m,\r\n          /#.*$/m,\r\n          /^\\s*\\|\\s*$/m,\r\n          /^\\s*>\\s*$/m\r\n        ],\r\n        weak: []\r\n      },\r\n      dockerfile: {\r\n        strong: [\r\n          /^FROM\\s+\\w+/m,\r\n          /\\b(RUN|COPY|ADD|WORKDIR|EXPOSE|CMD|ENTRYPOINT)\\s+/m,\r\n          /\\.(dockerfile|Dockerfile)$/i\r\n        ],\r\n        medium: [\r\n          /\\b(ENV|ARG|LABEL|USER|VOLUME)\\s+/m\r\n        ],\r\n        weak: []\r\n      },\r\n      shell: {\r\n        strong: [\r\n          /^#!/,\r\n          /\\.(sh|bash|zsh|fish)$/i,\r\n          /\\b(echo|cd|ls|grep|awk|sed|cat|chmod|chown|mkdir|rm|mv|cp)\\s+/\r\n        ],\r\n        medium: [\r\n          /#.*$/m,\r\n          /\\$\\{?\\w+\\}?/,\r\n          /\\|\\s*\\w+/,\r\n          /&&|\\|\\|/\r\n        ],\r\n        weak: [\r\n          /\\bexport\\s+\\w+=/\r\n        ]\r\n      }\r\n    };\r\n\r\n    this.fileExtensions = {\r\n      js: 'javascript', jsx: 'javascript', ts: 'javascript', tsx: 'javascript', mjs: 'javascript',\r\n      py: 'python', pyw: 'python', pyi: 'python',\r\n      java: 'java', class: 'java',\r\n      html: 'html', htm: 'html', xhtml: 'html',\r\n      css: 'css', scss: 'css', sass: 'css', less: 'css', stylus: 'css',\r\n      json: 'json', jsonc: 'json',\r\n      xml: 'xml', xsd: 'xml', xsl: 'xml', xslt: 'xml', svg: 'xml',\r\n      md: 'markdown', markdown: 'markdown', mdown: 'markdown', mkd: 'markdown',\r\n      sql: 'sql', mysql: 'sql', pgsql: 'sql', sqlite: 'sql',\r\n      php: 'php', phtml: 'php', php3: 'php', php4: 'php', php5: 'php',\r\n      c: 'c', h: 'c',\r\n      cpp: 'cpp', cxx: 'cpp', cc: 'cpp', hpp: 'cpp', hxx: 'cpp', hh: 'cpp',\r\n      cs: 'csharp', csx: 'csharp',\r\n      rb: 'ruby', rbw: 'ruby', rake: 'ruby', gemspec: 'ruby',\r\n      go: 'go', mod: 'go',\r\n      rs: 'rust', rlib: 'rust',\r\n      yml: 'yaml', yaml: 'yaml',\r\n      sh: 'shell', bash: 'shell', zsh: 'shell', fish: 'shell', ksh: 'shell',\r\n      dockerfile: 'dockerfile'\r\n    };\r\n\r\n    // Scoring weights\r\n    this.weights = {\r\n      strong: 10,\r\n      medium: 3,\r\n      weak: 1,\r\n      filename: 15\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Detect language from filename with improved extension handling\r\n   */\r\n  detectFromFilename(filename) {\r\n    if (!filename) return null;\r\n    \r\n    // Handle special cases\r\n    if (/^Dockerfile$/i.test(filename) || /\\.dockerfile$/i.test(filename)) {\r\n      return 'dockerfile';\r\n    }\r\n    \r\n    if (/^Makefile$/i.test(filename) || /\\.mk$/i.test(filename)) {\r\n      return 'shell';\r\n    }\r\n\r\n    const extension = filename.split('.').pop()?.toLowerCase();\r\n    return this.fileExtensions[extension] || null;\r\n  }\r\n\r\n  /**\r\n   * Enhanced content detection with weighted scoring\r\n   */\r\n  detectFromContent(content) {\r\n    if (!content || content.trim().length === 0) return 'plaintext';\r\n\r\n    // Check for clear plain text indicators first\r\n    if (this.isPlainText(content)) {\r\n      return 'plaintext';\r\n    }\r\n\r\n    const scores = {};\r\n    const contentLines = content.split('\\n');\r\n    const sampleSize = Math.min(50, contentLines.length); // Analyze first 50 lines for efficiency\r\n    const sampleContent = contentLines.slice(0, sampleSize).join('\\n');\r\n    \r\n    // Initialize scores\r\n    Object.keys(this.patterns).forEach(lang => {\r\n      scores[lang] = 0;\r\n    });\r\n\r\n    // Score each language\r\n    Object.entries(this.patterns).forEach(([language, categories]) => {\r\n      Object.entries(categories).forEach(([category, patterns]) => {\r\n        const weight = this.weights[category];\r\n        \r\n        patterns.forEach(pattern => {\r\n          // Skip filename patterns when analyzing content\r\n          if (pattern.source.includes('\\\\.(') && pattern.source.includes(')$/i')) {\r\n            return;\r\n          }\r\n          \r\n          const matches = sampleContent.match(new RegExp(pattern.source, pattern.flags + 'g'));\r\n          if (matches) {\r\n            let matchScore = Math.min(matches.length, 5) * weight; // Cap matches per pattern\r\n            \r\n            // Bonus for early matches (first 10 lines are more significant)\r\n            const earlyContent = contentLines.slice(0, 10).join('\\n');\r\n            const earlyMatches = earlyContent.match(new RegExp(pattern.source, pattern.flags + 'g'));\r\n            if (earlyMatches) {\r\n              matchScore += earlyMatches.length * weight * 0.5;\r\n            }\r\n            \r\n            scores[language] += matchScore;\r\n          }\r\n        });\r\n      });\r\n    });\r\n\r\n    // Apply penalties for conflicting patterns\r\n    this.applyConflictPenalties(scores, sampleContent);\r\n\r\n    // Apply plain text penalties for weak matches\r\n    this.applyPlainTextPenalties(scores, sampleContent);\r\n\r\n    // Find best match\r\n    const sortedLanguages = Object.entries(scores)\r\n      .sort(([,a], [,b]) => b - a)\r\n      .filter(([,score]) => score > 0);\r\n\r\n    if (sortedLanguages.length === 0) {\r\n      return 'plaintext';\r\n    }\r\n\r\n    const [topLanguage, topScore] = sortedLanguages[0];\r\n    const [, secondScore] = sortedLanguages[1] || [null, 0];\r\n    \r\n    // More conservative thresholds for plain text detection\r\n    const minStrongScore = 15; // Requires at least one strong pattern match\r\n    const minWeakScore = 8;    // For multiple weak matches\r\n    const confidenceRatio = secondScore > 0 ? topScore / secondScore : Infinity;\r\n    \r\n    // Check if we have strong evidence for a language\r\n    const hasStrongEvidence = this.hasStrongLanguageEvidence(topLanguage, sampleContent);\r\n    \r\n    if (!hasStrongEvidence && topScore < minStrongScore) {\r\n      return 'plaintext';\r\n    }\r\n    \r\n    if (topScore < minWeakScore || (confidenceRatio < 1.3 && topScore < 25)) {\r\n      return 'plaintext';\r\n    }\r\n\r\n    return topLanguage;\r\n  }\r\n\r\n  /**\r\n   * Apply penalties for conflicting language indicators\r\n   */\r\n  applyConflictPenalties(scores, content) {\r\n    // HTML vs XML conflict resolution\r\n    if (scores.html > 0 && scores.xml > 0) {\r\n      if (content.includes('<!DOCTYPE html') || content.includes('<html')) {\r\n        scores.xml *= 0.3;\r\n      } else if (content.includes('<?xml')) {\r\n        scores.html *= 0.3;\r\n      }\r\n    }\r\n\r\n    // JavaScript vs JSON conflict\r\n    if (scores.javascript > 0 && scores.json > 0) {\r\n      if (content.includes('function') || content.includes('var ') || content.includes('let ') || content.includes('const ')) {\r\n        scores.json *= 0.1;\r\n      }\r\n    }\r\n\r\n    // C vs C++ conflict\r\n    if (scores.c > 0 && scores.cpp > 0) {\r\n      if (content.includes('std::') || content.includes('#include <iostream>') || content.includes('class ')) {\r\n        scores.c *= 0.3;\r\n      } else if (!content.includes('std::') && !content.includes('class ') && !content.includes('namespace')) {\r\n        scores.cpp *= 0.5;\r\n      }\r\n    }\r\n\r\n    // Shell vs other languages\r\n    if (scores.shell > 0) {\r\n      const hasShebang = content.startsWith('#!');\r\n      if (!hasShebang && (scores.python > 0 || scores.ruby > 0)) {\r\n        scores.shell *= 0.4;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if content appears to be plain text\r\n   */\r\n  isPlainText(content) {\r\n    const lines = content.split('\\n');\r\n    const totalLines = lines.length;\r\n    const trimmedContent = content.trim();\r\n    \r\n    // Empty or very minimal content\r\n    if (trimmedContent.length === 0) {\r\n      return true;\r\n    }\r\n    \r\n    // Very short content is likely plain text unless it has clear code indicators\r\n    if (content.length < 100 && totalLines <= 5) {\r\n      const strongCodeIndicators = [\r\n        /^#!/, // shebang\r\n        /<[a-z][^>]*>/i, // HTML tags\r\n        /^\\s*[\\{\\[]/, // JSON/CSS/array start\r\n        /^\\s*<\\?/, // XML/PHP\r\n        /\\bfunction\\s*\\(/, // function definitions\r\n        /\\bclass\\s+\\w+\\s*[\\{\\(]/, // class definitions\r\n        /\\bdef\\s+\\w+\\s*\\(/, // Python functions\r\n        /\\b(public|private|protected)\\s+/, // access modifiers\r\n        /^FROM\\s+\\w+/i, // Dockerfile\r\n        /^\\w+\\s*:\\s*[\\[\\{]/, // YAML/JSON objects\r\n        /;\\s*$/m, // statements ending with semicolon\r\n        /\\{[^}]*\\}/, // code blocks\r\n        /\\/\\/.*$|\\/\\*[\\s\\S]*?\\*\\//, // code comments\r\n        /\\b(import|export|require)\\s*[\\(\\{]/, // module imports\r\n        /\\b(console\\.|print\\(|echo\\s)/, // output statements\r\n        /\\$\\w+|@\\w+/, // variables with sigils\r\n        /\\b\\d+\\s*[+\\-*\\/]\\s*\\d+/, // mathematical expressions\r\n      ];\r\n      \r\n      const hasStrongCodeIndicator = strongCodeIndicators.some(pattern => pattern.test(content));\r\n      if (!hasStrongCodeIndicator) {\r\n        return true;\r\n      }\r\n    }\r\n    \r\n    // Enhanced natural language vs code analysis\r\n    const naturalLanguageScore = this.calculateEnhancedNaturalLanguageScore(content);\r\n    const codeScore = this.calculateEnhancedCodeScore(content);\r\n    const proseScore = this.calculateProseScore(content);\r\n    \r\n    // Strong natural language indicators\r\n    if (naturalLanguageScore > codeScore * 2 && naturalLanguageScore > 0.02) {\r\n      return true;\r\n    }\r\n    \r\n    // High prose score indicates natural text\r\n    if (proseScore > 0.15 && content.length > 50) {\r\n      return true;\r\n    }\r\n    \r\n    // Check for conversational patterns\r\n    if (this.hasConversationalPatterns(content)) {\r\n      return true;\r\n    }\r\n    \r\n    // Check for narrative/descriptive text patterns\r\n    if (this.hasNarrativePatterns(content) && codeScore < 0.05) {\r\n      return true;\r\n    }\r\n    \r\n    // Check sentence structure\r\n    const sentenceScore = this.calculateSentenceScore(content);\r\n    if (sentenceScore > 0.3 && codeScore < naturalLanguageScore) {\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Enhanced natural language score calculation\r\n   */\r\n  calculateEnhancedNaturalLanguageScore(content) {\r\n    const commonWords = [\r\n      /\\b(the|and|or|but|in|on|at|to|for|of|with|by|this|that|these|those|a|an)\\b/gi,\r\n      /\\b(is|are|was|were|been|being|have|has|had|do|does|did|will|would|could|should|can|may|might)\\b/gi,\r\n      /\\b(I|you|he|she|it|we|they|me|him|her|us|them|my|your|his|her|its|our|their)\\b/gi,\r\n      /\\b(what|when|where|why|how|who|which|whose)\\b/gi,\r\n      /\\b(very|really|quite|rather|pretty|fairly|extremely|incredibly|absolutely)\\b/gi,\r\n    ];\r\n    \r\n    let totalMatches = 0;\r\n    commonWords.forEach(pattern => {\r\n      const matches = content.match(pattern);\r\n      if (matches) totalMatches += matches.length;\r\n    });\r\n    \r\n    // Normalize by word count instead of character count\r\n    const wordCount = content.split(/\\s+/).filter(word => word.length > 0).length;\r\n    return totalMatches / Math.max(wordCount, 1);\r\n  }\r\n\r\n  /**\r\n   * Enhanced code score calculation\r\n   */\r\n  calculateEnhancedCodeScore(content) {\r\n    const codeIndicators = [\r\n      /[{}();]/g, // code punctuation\r\n      /\\b(function|class|def|var|let|const|if|for|while|return|import|export)\\b/gi,\r\n      /[=<>!]+[=]/g, // comparison operators\r\n      /\\/\\/.*$|\\/\\*[\\s\\S]*?\\*\\/|#.*$/gm, // comments\r\n      /\\b0x[0-9a-f]+\\b/gi, // hex numbers\r\n      /\\d+\\.\\d+/g, // floating point numbers\r\n      /\\$\\w+|@\\w+/g, // variables with sigils\r\n      /\\b\\w+\\s*\\(/g, // function calls\r\n      /\\b(true|false|null|undefined|None|nil)\\b/gi, // programming literals\r\n    ];\r\n    \r\n    let totalMatches = 0;\r\n    codeIndicators.forEach(pattern => {\r\n      const matches = content.match(pattern);\r\n      if (matches) totalMatches += matches.length;\r\n    });\r\n    \r\n    const wordCount = content.split(/\\s+/).filter(word => word.length > 0).length;\r\n    return totalMatches / Math.max(wordCount, 1);\r\n  }\r\n\r\n  /**\r\n   * Calculate prose/narrative score\r\n   */\r\n  calculateProseScore(content) {\r\n    const proseIndicators = [\r\n      /[.!?]\\s+[A-Z]/g, // sentence endings followed by capital letters\r\n      /\\b[A-Z][a-z]{2,}\\b/g, // properly capitalized words\r\n      /,\\s+/g, // comma usage\r\n      /\\b(said|told|asked|replied|explained|described|mentioned|noted|observed)\\b/gi, // narrative verbs\r\n      /\\b(because|since|although|however|therefore|moreover|furthermore|nevertheless)\\b/gi, // connective words\r\n      /\\b(first|second|third|finally|then|next|after|before|during|while)\\b/gi, // sequence words\r\n    ];\r\n    \r\n    let totalMatches = 0;\r\n    proseIndicators.forEach(pattern => {\r\n      const matches = content.match(pattern);\r\n      if (matches) totalMatches += matches.length;\r\n    });\r\n    \r\n    return totalMatches / Math.max(content.length, 1);\r\n  }\r\n\r\n  /**\r\n   * Check for conversational patterns\r\n   */\r\n  hasConversationalPatterns(content) {\r\n    const conversationalPatterns = [\r\n      /\\b(hello|hi|hey|thanks|thank you|please|sorry|excuse me)\\b/gi,\r\n      /\\b(I think|I believe|I feel|I know|I understand|I agree|I disagree)\\b/gi,\r\n      /\\b(you know|you see|you understand|right\\?|okay\\?|isn't it\\?)\\b/gi,\r\n      /\\b(well|so|now|actually|basically|essentially|obviously)\\b/gi,\r\n    ];\r\n    \r\n    let matches = 0;\r\n    conversationalPatterns.forEach(pattern => {\r\n      if (content.match(pattern)) matches++;\r\n    });\r\n    \r\n    return matches >= 2;\r\n  }\r\n\r\n  /**\r\n   * Check for narrative/descriptive patterns\r\n   */\r\n  hasNarrativePatterns(content) {\r\n    const narrativePatterns = [\r\n      /\\b(once upon a time|in the beginning|long ago|yesterday|today|tomorrow)\\b/gi,\r\n      /\\b(beautiful|amazing|wonderful|terrible|horrible|fantastic|incredible)\\b/gi,\r\n      /\\b(walked|ran|jumped|looked|saw|heard|felt|thought|remembered)\\b/gi,\r\n      /\\b(suddenly|quickly|slowly|carefully|quietly|loudly)\\b/gi,\r\n    ];\r\n    \r\n    let matches = 0;\r\n    narrativePatterns.forEach(pattern => {\r\n      if (content.match(pattern)) matches++;\r\n    });\r\n    \r\n    return matches >= 1;\r\n  }\r\n\r\n  /**\r\n   * Calculate sentence structure score\r\n   */\r\n  calculateSentenceScore(content) {\r\n    const sentences = content.split(/[.!?]+/).filter(s => s.trim().length > 5);\r\n    if (sentences.length === 0) return 0;\r\n    \r\n    let validSentences = 0;\r\n    sentences.forEach(sentence => {\r\n      const words = sentence.trim().split(/\\s+/).filter(w => w.length > 0);\r\n      // Valid sentences typically have 3+ words and start with capital letter\r\n      if (words.length >= 3 && /^[A-Z]/.test(sentence.trim())) {\r\n        validSentences++;\r\n      }\r\n    });\r\n    \r\n    return validSentences / sentences.length;\r\n  }\r\n\r\n  /**\r\n   * Calculate natural language score (legacy method - redirects to enhanced version)\r\n   */\r\n  calculateNaturalLanguageScore(content) {\r\n    return this.calculateEnhancedNaturalLanguageScore(content);\r\n  }\r\n\r\n  /**\r\n   * Calculate code score (legacy method - redirects to enhanced version)\r\n   */\r\n  calculateCodeScore(content) {\r\n    return this.calculateEnhancedCodeScore(content);\r\n  }\r\n\r\n  /**\r\n   * Apply penalties when content looks like plain text\r\n   */\r\n  applyPlainTextPenalties(scores, content) {\r\n    const naturalLanguageScore = this.calculateNaturalLanguageScore(content);\r\n    const codeScore = this.calculateCodeScore(content);\r\n    \r\n    // If content looks like natural language, penalize all programming languages\r\n    if (naturalLanguageScore > codeScore && naturalLanguageScore > 0.02) {\r\n      const penalty = Math.min(0.8, naturalLanguageScore * 10);\r\n      Object.keys(scores).forEach(lang => {\r\n        if (lang !== 'markdown' && lang !== 'plaintext') {\r\n          scores[lang] *= (1 - penalty);\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Penalize languages with very weak evidence\r\n    Object.entries(scores).forEach(([lang, score]) => {\r\n      if (score > 0 && score < 5) {\r\n        const strongEvidence = this.hasStrongLanguageEvidence(lang, content);\r\n        if (!strongEvidence) {\r\n          scores[lang] *= 0.3;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check if content has strong evidence for a specific language\r\n   */\r\n  hasStrongLanguageEvidence(language, content) {\r\n    if (!this.patterns[language] || !this.patterns[language].strong) {\r\n      return false;\r\n    }\r\n    \r\n    let strongMatches = 0;\r\n    this.patterns[language].strong.forEach(pattern => {\r\n      // Skip filename patterns\r\n      if (pattern.source.includes('\\\\.(') && pattern.source.includes(')$/i')) {\r\n        return;\r\n      }\r\n      \r\n      if (content.match(pattern)) {\r\n        strongMatches++;\r\n      }\r\n    });\r\n    \r\n    return strongMatches >= 1;\r\n  }\r\n\r\n  /**\r\n   * Calculate confidence level based on score and patterns\r\n   */\r\n  calculateConfidence(language, score, content) {\r\n    if (language === 'plaintext') {\r\n      // For plaintext, confidence depends on how clearly it's NOT code\r\n      const naturalLanguageScore = this.calculateNaturalLanguageScore(content);\r\n      const codeScore = this.calculateCodeScore(content);\r\n      \r\n      if (naturalLanguageScore > codeScore * 2) return 'high';\r\n      if (naturalLanguageScore > codeScore) return 'medium';\r\n      return 'low';\r\n    }\r\n    \r\n    const patterns = this.patterns[language];\r\n    if (!patterns) return 'low';\r\n    \r\n    const strongMatches = patterns.strong?.filter(pattern => {\r\n      // Skip filename patterns in confidence calculation\r\n      if (pattern.source.includes('\\\\.(') && pattern.source.includes(')$/i')) {\r\n        return false;\r\n      }\r\n      return content.match(pattern);\r\n    }).length || 0;\r\n    \r\n    if (strongMatches >= 2 && score >= 25) return 'high';\r\n    if (strongMatches >= 1 && score >= 15) return 'medium';\r\n    if (strongMatches >= 1 || score >= 12) return 'low';\r\n    \r\n    return 'very-low';\r\n  }\r\n\r\n  /**\r\n   * Enhanced auto-detection with improved logic\r\n   */\r\n  autoDetect(content, filename = null) {\r\n    // Filename detection with high confidence\r\n    const filenameLanguage = this.detectFromFilename(filename);\r\n    if (filenameLanguage) {\r\n      // Verify filename detection with content if available\r\n      if (content && content.trim().length > 0) {\r\n        const contentLanguage = this.detectFromContent(content);\r\n        \r\n        // If content strongly suggests a different language, use content detection\r\n        if (contentLanguage !== 'plaintext' && contentLanguage !== filenameLanguage) {\r\n          const contentScore = this.getLanguageScore(content, contentLanguage);\r\n          const filenameScore = this.getLanguageScore(content, filenameLanguage);\r\n          \r\n          if (contentScore > filenameScore * 1.5) {\r\n            return {\r\n              language: contentLanguage,\r\n              confidence: this.calculateConfidence(contentLanguage, contentScore, content),\r\n              method: 'content-override',\r\n              alternateDetection: filenameLanguage\r\n            };\r\n          }\r\n        }\r\n      }\r\n      \r\n      return {\r\n        language: filenameLanguage,\r\n        confidence: 'high',\r\n        method: 'filename'\r\n      };\r\n    }\r\n\r\n    // Content-only detection\r\n    const contentLanguage = this.detectFromContent(content);\r\n    const score = this.getLanguageScore(content, contentLanguage);\r\n    \r\n    return {\r\n      language: contentLanguage,\r\n      confidence: this.calculateConfidence(contentLanguage, score, content),\r\n      method: 'content'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get score for a specific language\r\n   */\r\n  getLanguageScore(content, language) {\r\n    if (!this.patterns[language]) return 0;\r\n    \r\n    let score = 0;\r\n    Object.entries(this.patterns[language]).forEach(([category, patterns]) => {\r\n      const weight = this.weights[category];\r\n      patterns.forEach(pattern => {\r\n        const matches = content.match(new RegExp(pattern.source, pattern.flags + 'g'));\r\n        if (matches) {\r\n          score += Math.min(matches.length, 5) * weight;\r\n        }\r\n      });\r\n    });\r\n    \r\n    return score;\r\n  }\r\n\r\n  /**\r\n   * Get detailed detection results for debugging\r\n   */\r\n  getDetectionDetails(content, filename = null) {\r\n    const results = this.autoDetect(content, filename);\r\n    const scores = {};\r\n    \r\n    // Calculate scores for all languages\r\n    Object.keys(this.patterns).forEach(lang => {\r\n      scores[lang] = this.getLanguageScore(content, lang);\r\n    });\r\n    \r\n    const sortedScores = Object.entries(scores)\r\n      .sort(([,a], [,b]) => b - a)\r\n      .slice(0, 5);\r\n    \r\n    return {\r\n      ...results,\r\n      topScores: sortedScores,\r\n      totalPatterns: Object.keys(this.patterns).length,\r\n      contentLength: content?.length || 0\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get all supported languages\r\n   */\r\n  getSupportedLanguages() {\r\n    return [\r\n      'plaintext',\r\n      ...Object.keys(this.patterns).sort()\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Check if a language is supported\r\n   */\r\n  isLanguageSupported(language) {\r\n    return language === 'plaintext' || this.patterns.hasOwnProperty(language);\r\n  }\r\n}\r\n\r\nexport default LanguageDetector;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}