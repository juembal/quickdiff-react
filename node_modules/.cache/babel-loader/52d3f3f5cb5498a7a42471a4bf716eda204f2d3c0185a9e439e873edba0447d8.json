{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joem\\\\quickdiff-react\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport './App.css';\nimport './user-guide.css';\nimport Header from './components/Header';\nimport SettingsPanel from './components/SettingsPanel';\nimport InputSection from './components/InputSection';\nimport Controls from './components/Controls';\nimport Legend from './components/Legend';\nimport Results from './components/Results';\nimport ReactUserGuide from './user-guide.js';\nimport { DiffEngine } from './utils/DiffEngine';\nimport { ExportUtils } from './utils/ExportUtils';\nimport { GroqService } from './utils/GroqService';\nimport { LanguageDetector } from './utils/LanguageDetector';\nimport PDFTextExtractor from './utils/PDFTextExtractor';\nimport { NotificationProvider, useNotification } from './components/NotificationProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuickDiffApp() {\n  _s();\n  // State management\n  const [originalText, setOriginalText] = useState('');\n  const [changedText, setChangedText] = useState('');\n  const [diffResult, setDiffResult] = useState(null);\n  const [showResults, setShowResults] = useState(false);\n  const [theme, setTheme] = useState('light');\n  const [contrast, setContrast] = useState('normal');\n\n  // Track last compared texts to prevent AI analysis on uncompared content\n  const [lastComparedOriginal, setLastComparedOriginal] = useState('');\n  const [lastComparedChanged, setLastComparedChanged] = useState('');\n\n  // Settings state\n  const [settings, setSettings] = useState({\n    diffMode: 'line',\n    viewMode: 'side-by-side',\n    language: 'plaintext',\n    autoDetectLanguage: true,\n    ignoreCase: false,\n    ignoreWhitespace: false,\n    ignorePunctuation: false,\n    livePreview: false\n  });\n\n  // Language detection state\n  const [detectedLanguage, setDetectedLanguage] = useState({\n    language: 'plaintext',\n    confidence: 'low',\n    method: 'default'\n  });\n\n  // AI state\n  const [aiResults, setAiResults] = useState([]);\n  const [showAiResults, setShowAiResults] = useState(false);\n  const [isGeneratingAI, setIsGeneratingAI] = useState(false);\n\n  // Navigation state\n  const [changes, setChanges] = useState([]);\n  const [currentChangeIndex, setCurrentChangeIndex] = useState(-1);\n  const [minimapVisible, setMinimapVisible] = useState(false);\n\n  // Initialize user guide\n  useEffect(() => {\n    if (!window.userGuideInitialized) {\n      userGuide.current = new ReactUserGuide();\n      window.userGuideInitialized = true;\n    }\n\n    // Cleanup function\n    return () => {\n      if (userGuide.current) {\n        userGuide.current.destroy();\n        userGuide.current = null;\n      }\n    };\n  }, []);\n\n  // Refs\n  const debounceTimer = useRef(null);\n  const diffEngine = useRef(new DiffEngine());\n  const exportUtils = useRef(new ExportUtils());\n  const groqService = useRef(new GroqService());\n  const languageDetector = useRef(new LanguageDetector());\n  const pdfExtractor = useRef(new PDFTextExtractor());\n  const userGuide = useRef(null);\n  const {\n    showNotification\n  } = useNotification();\n\n  // Settings management functions (defined early to avoid hoisting issues)\n  const loadSettings = () => {\n    try {\n      const savedSettings = localStorage.getItem('quickdiff_react_settings');\n      if (savedSettings) {\n        setSettings(prev => ({\n          ...prev,\n          ...JSON.parse(savedSettings)\n        }));\n      }\n    } catch (error) {\n      console.error('Error loading settings:', error);\n    }\n  };\n  const saveSettings = useCallback(() => {\n    try {\n      localStorage.setItem('quickdiff_react_settings', JSON.stringify(settings));\n    } catch (error) {\n      console.error('Error saving settings:', error);\n    }\n  }, [settings]);\n  const loadTheme = () => {\n    const savedTheme = localStorage.getItem('quickdiff_theme') || 'light';\n    const savedContrast = localStorage.getItem('quickdiff_contrast') || 'normal';\n    setTheme(savedTheme);\n    setContrast(savedContrast);\n    document.documentElement.setAttribute('data-theme', savedTheme);\n    document.documentElement.setAttribute('data-contrast', savedContrast);\n  };\n\n  // Load settings and theme on mount\n  useEffect(() => {\n    loadSettings();\n    loadTheme();\n\n    // Debug AI API configurations\n    console.log('=== QuickDiff App Debug ===');\n    console.log('Environment variables check:');\n    console.log('REACT_APP_GROQ_API_KEY:', process.env.REACT_APP_GROQ_API_KEY ? 'Found' : 'Not found');\n    if (groqService.current) {\n      groqService.current.debugConfig();\n\n      // Make Groq service available globally for testing\n      window.testGroq = async () => {\n        console.log('🧪 Testing Groq API...');\n        try {\n          const result = await groqService.current.testConnection();\n          console.log('🧪 Test result:', result);\n          return result;\n        } catch (error) {\n          console.error('🧪 Test failed:', error);\n          return {\n            success: false,\n            error: error.message\n          };\n        }\n      };\n      console.log('💡 You can test Groq API by running: testGroq() in console');\n    }\n    console.log('========================');\n  }, []);\n\n  // Auto-save settings when they change\n  useEffect(() => {\n    saveSettings();\n  }, [settings, saveSettings]);\n\n  // Collect changes for navigation (defined early to avoid hoisting issues)\n  const collectChanges = useCallback(result => {\n    if (!result) return;\n    const newChanges = [];\n\n    // Handle different diff modes\n    if (settings.diffMode === 'word' || settings.diffMode === 'char') {\n      // For word and character modes, use stats to determine actual change count\n      let changeCount = 0;\n      let changeType = 'modified';\n      let changeDescription = '';\n      if (result.stats) {\n        if (settings.diffMode === 'word') {\n          const wordsAdded = result.stats.wordsAdded || 0;\n          const wordsRemoved = result.stats.wordsRemoved || 0;\n\n          // Use totalChanges if available, otherwise calculate\n          changeCount = result.stats.totalChanges || wordsAdded + wordsRemoved;\n          if (wordsAdded > 0 && wordsRemoved > 0) {\n            changeDescription = `${wordsRemoved} words removed, ${wordsAdded} words added`;\n            changeType = 'changed';\n          } else if (wordsAdded > 0) {\n            changeDescription = `${wordsAdded} words added`;\n            changeType = 'added';\n          } else if (wordsRemoved > 0) {\n            changeDescription = `${wordsRemoved} words removed`;\n            changeType = 'removed';\n          }\n        } else if (settings.diffMode === 'char') {\n          const charsAdded = result.stats.charactersAdded || 0;\n          const charsRemoved = result.stats.charactersRemoved || 0;\n\n          // Use totalChanges if available, otherwise calculate\n          changeCount = result.stats.totalChanges || charsAdded + charsRemoved;\n          if (charsAdded > 0 && charsRemoved > 0) {\n            changeDescription = `${charsRemoved} characters removed, ${charsAdded} characters added`;\n            changeType = 'changed';\n          } else if (charsAdded > 0) {\n            changeDescription = `${charsAdded} characters added`;\n            changeType = 'added';\n          } else if (charsRemoved > 0) {\n            changeDescription = `${charsRemoved} characters removed`;\n            changeType = 'removed';\n          }\n        }\n      }\n\n      // Create one change entry when changes are detected\n      if (changeCount > 0) {\n        newChanges.push({\n          lineNumber: 1,\n          type: changeType,\n          content: changeDescription,\n          originalLineNumber: 1,\n          changedLineNumber: 1\n        });\n      }\n    } else {\n      // Line mode - original logic\n      // Extract changes from originalLines (DiffEngine returns originalLines and changedLines)\n      if (result.originalLines) {\n        result.originalLines.forEach((line, index) => {\n          if (line.type && line.type !== 'unchanged' && line.type !== '') {\n            newChanges.push({\n              lineNumber: index + 1,\n              type: line.type,\n              content: line.content || '',\n              originalLineNumber: index + 1,\n              changedLineNumber: index + 1\n            });\n          }\n        });\n      }\n\n      // Also check changedLines for additional changes (like added lines)\n      if (result.changedLines) {\n        result.changedLines.forEach((line, index) => {\n          if (line.type && line.type !== 'unchanged' && line.type !== '') {\n            // Avoid duplicates by checking if we already have this change\n            const exists = newChanges.some(change => change.lineNumber === index + 1 && change.type === line.type);\n            if (!exists) {\n              newChanges.push({\n                lineNumber: index + 1,\n                type: line.type,\n                content: line.content || '',\n                originalLineNumber: index + 1,\n                changedLineNumber: index + 1\n              });\n            }\n          }\n        });\n      }\n    }\n\n    // Sort changes by line number\n    newChanges.sort((a, b) => a.lineNumber - b.lineNumber);\n    console.log('Collected Changes:', newChanges); // Debug log\n    console.log('Diff Mode:', settings.diffMode); // Debug log\n    console.log('Result Stats:', result.stats); // Debug log\n\n    setChanges(newChanges);\n    setCurrentChangeIndex(newChanges.length > 0 ? 0 : -1);\n    if (newChanges.length > 0) {\n      // For word and character modes, show the actual change count from stats\n      if (settings.diffMode === 'word' || settings.diffMode === 'char') {\n        let actualChangeCount = 0;\n        let changeDetails = '';\n        if (result.stats) {\n          if (settings.diffMode === 'word') {\n            // Use totalChanges if available for more accurate count\n            actualChangeCount = result.stats.totalChanges || (result.stats.wordsAdded || 0) + (result.stats.wordsRemoved || 0);\n            const added = result.stats.wordsAdded || 0;\n            const removed = result.stats.wordsRemoved || 0;\n            if (added > 0 && removed > 0) {\n              changeDetails = `${added} added, ${removed} removed`;\n            } else if (added > 0) {\n              changeDetails = `${added} added`;\n            } else if (removed > 0) {\n              changeDetails = `${removed} removed`;\n            }\n          } else if (settings.diffMode === 'char') {\n            // Use totalChanges if available for more accurate count\n            actualChangeCount = result.stats.totalChanges || (result.stats.charactersAdded || 0) + (result.stats.charactersRemoved || 0);\n            const added = result.stats.charactersAdded || 0;\n            const removed = result.stats.charactersRemoved || 0;\n            if (added > 0 && removed > 0) {\n              changeDetails = `${added} added, ${removed} removed`;\n            } else if (added > 0) {\n              changeDetails = `${added} added`;\n            } else if (removed > 0) {\n              changeDetails = `${removed} removed`;\n            }\n          }\n        }\n        if (actualChangeCount > 0) {\n          const unit = settings.diffMode === 'word' ? 'word' : 'character';\n          const plural = actualChangeCount !== 1 ? 's' : '';\n          showNotification(`Found ${actualChangeCount} ${unit}${plural} changed (${changeDetails})`);\n        } else {\n          showNotification('Changes detected');\n        }\n      } else {\n        // Line mode - show number of line changes\n        showNotification(`Found ${newChanges.length} line${newChanges.length !== 1 ? 's' : ''} changed`);\n      }\n    } else {\n      showNotification('No changes detected');\n    }\n  }, [showNotification, settings.diffMode]);\n\n  // Main comparison function (defined early to avoid hoisting issues)\n  const performComparison = useCallback(() => {\n    // Check if both text areas are empty\n    if (!originalText.trim() && !changedText.trim()) {\n      showNotification('❌ Please enter text in both areas to compare');\n      return;\n    }\n\n    // Check if only one text area has content\n    if (!originalText.trim() || !changedText.trim()) {\n      showNotification('❌ Please provide text in both Original and Changed areas for comparison');\n      return;\n    }\n    try {\n      const result = diffEngine.current.performComparison(originalText, changedText, settings);\n      console.log('Diff Result:', result); // Debug log\n      setDiffResult(result);\n      setShowResults(true);\n\n      // Store the texts that were just compared\n      setLastComparedOriginal(originalText.trim());\n      setLastComparedChanged(changedText.trim());\n      collectChanges(result);\n\n      // Auto-generate AI analysis is disabled to prevent duplicate results\n      // Users can manually trigger AI analysis using the AI buttons\n\n      // Auto-scroll to results only if live preview is disabled\n      if (!settings.livePreview) {\n        setTimeout(() => {\n          const resultsElement = document.getElementById('results-section');\n          if (resultsElement) {\n            resultsElement.scrollIntoView({\n              behavior: 'smooth',\n              block: 'start'\n            });\n          }\n        }, 100);\n      }\n      showNotification('Comparison completed');\n    } catch (error) {\n      console.error('Comparison error:', error);\n      showNotification('Error performing comparison');\n    }\n  }, [originalText, changedText, settings, showNotification, collectChanges]);\n\n  // NEW: Simple file loader - size check already done in InputSection.js\n  const handleFileLoad = async (file, target) => {\n    console.log(`🔍 Loading file: ${file.name} (${(file.size / 1024 / 1024).toFixed(1)}MB)`);\n\n    // Basic validation\n    if (!file) {\n      showNotification('❌ No file selected');\n      return;\n    }\n    if (file.size === 0) {\n      showNotification(`❌ File is empty: ${file.name}`, 'error', 5000);\n      return;\n    }\n\n    // File type check\n    const isPDF = file.name.toLowerCase().endsWith('.pdf');\n    const isText = file.type.startsWith('text/') || ['.txt', '.md', '.json', '.js', '.html', '.css', '.xml', '.csv'].some(ext => file.name.toLowerCase().endsWith(ext));\n    if (!isPDF && !isText) {\n      showNotification(`❌ Unsupported file type: ${file.name}`, 'error', 5000);\n      return;\n    }\n\n    // Show loading notification\n    showNotification(`📁 Loading ${file.name}...`);\n    try {\n      let content = '';\n      if (isPDF) {\n        console.log(`📄 Starting PDF extraction for ${file.name}...`);\n        showNotification(`📄 Extracting text from PDF: ${file.name}...`);\n        const result = await pdfExtractor.current.extractTextFromPDF(file);\n        if (result.success) {\n          content = result.text;\n          showNotification(`✅ PDF extracted successfully: ${file.name}`);\n          console.log(`✅ PDF extraction completed: ${result.message}`);\n        } else {\n          showNotification(`❌ PDF extraction failed: ${result.error}`, 'error', 6000);\n          console.error(`❌ PDF extraction error:`, result.error);\n          throw new Error(result.error);\n        }\n      } else {\n        // Handle text files\n        console.log(`📄 Reading text file: ${file.name}...`);\n        showNotification(`📄 Reading text file: ${file.name}...`);\n        try {\n          content = await new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.onload = e => {\n              console.log(`✅ Text file read successfully`);\n              resolve(e.target.result);\n            };\n            reader.onerror = e => {\n              console.error(`❌ FileReader error:`, e);\n              reject(new Error('Failed to read file - file may be corrupted or in an unsupported format'));\n            };\n            reader.readAsText(file, 'UTF-8'); // Specify UTF-8 encoding\n          });\n          showNotification(`✅ Text file loaded: ${file.name}`);\n        } catch (readError) {\n          console.error('Text file reading error:', readError);\n          showNotification(`❌ Failed to read file: ${readError.message}`, 'error', 6000);\n          throw readError;\n        }\n      }\n\n      // Validate extracted content\n      if (!content || content.trim().length === 0) {\n        const emptyMessage = `File appears to be empty or contains no readable text: ${file.name}`;\n        showNotification(`⚠️ ${emptyMessage}`, 'warning', 6000);\n        console.log(`⚠️ Empty content warning: ${emptyMessage}`);\n        throw new Error('Empty file content');\n      }\n\n      // Check content size after extraction\n      const contentSizeKB = (content.length / 1024).toFixed(1);\n      console.log(`📊 Extracted content size: ${contentSizeKB}KB`);\n\n      // Set the content to the appropriate text area\n      if (target === 'original') {\n        setOriginalText(content);\n        console.log(`✅ Content set to original text area`);\n      } else {\n        setChangedText(content);\n        console.log(`✅ Content set to changed text area`);\n      }\n\n      // Auto-detect language from filename if enabled\n      if (settings.autoDetectLanguage) {\n        try {\n          const detection = languageDetector.current.autoDetect(content, file.name);\n          setDetectedLanguage(detection);\n          if (detection.language !== 'plaintext') {\n            setSettings(prev => ({\n              ...prev,\n              language: detection.language\n            }));\n            console.log(`🔍 Language detected: ${detection.language} (${detection.confidence})`);\n          }\n        } catch (langError) {\n          console.error('Language detection error:', langError);\n          // Don't show notification for language detection errors - not critical\n        }\n      }\n\n      // Trigger live preview if enabled\n      if (settings.livePreview && originalText.trim() && changedText.trim()) {\n        performComparison();\n      }\n\n      // Final success notification\n      const finalMessage = isPDF ? `✅ PDF processed: ${file.name} (${contentSizeKB}KB text extracted)` : `✅ File loaded: ${file.name} (${contentSizeKB}KB)`;\n      showNotification(finalMessage);\n      console.log(`🎉 File processing completed successfully: ${file.name}`);\n      return true;\n    } catch (error) {\n      console.error('File processing error:', error);\n      const errorMessage = `Failed to process file: ${file.name}`;\n      showNotification(`❌ ${errorMessage} - ${error.message}`, 'error', 8000);\n      throw error;\n    }\n  };\n\n  // Theme management\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n    localStorage.setItem('quickdiff_theme', newTheme);\n    document.documentElement.setAttribute('data-theme', newTheme);\n    showNotification(`Switched to ${newTheme} theme`);\n  };\n  const toggleContrast = () => {\n    const newContrast = contrast === 'normal' ? 'high' : 'normal';\n    setContrast(newContrast);\n    localStorage.setItem('quickdiff_contrast', newContrast);\n    document.documentElement.setAttribute('data-contrast', newContrast);\n    showNotification(`${newContrast === 'high' ? 'Enabled' : 'Disabled'} high contrast mode`);\n  };\n\n  // Text manipulation functions\n  const clearAll = () => {\n    setOriginalText('');\n    setChangedText('');\n    setShowResults(false);\n    setDiffResult(null);\n    setAiResults([]);\n    setShowAiResults(false);\n\n    // Clear last compared texts\n    setLastComparedOriginal('');\n    setLastComparedChanged('');\n    showNotification('All content cleared');\n  };\n  const swapTexts = () => {\n    const temp = originalText;\n    setOriginalText(changedText);\n    setChangedText(temp);\n    showNotification('Texts swapped');\n    if (settings.livePreview && originalText.trim() && changedText.trim()) {\n      performComparison();\n    }\n  };\n\n  // Export functions\n  const copyResults = () => {\n    exportUtils.current.copyResults(originalText, changedText, aiResults).then(() => showNotification('Results copied to clipboard')).catch(() => showNotification('Failed to copy results'));\n  };\n  const exportToTxt = () => {\n    exportUtils.current.exportToTxt(originalText, changedText, diffResult, aiResults);\n    showNotification('Exported as TXT file');\n  };\n  const exportToHtml = () => {\n    exportUtils.current.exportToHtml(originalText, changedText, diffResult, aiResults);\n    showNotification('Exported as HTML file');\n  };\n  const exportToMarkdown = () => {\n    exportUtils.current.exportToMarkdown(originalText, changedText, diffResult, aiResults);\n    showNotification('Exported as Markdown file');\n  };\n  const exportToPdf = () => {\n    exportUtils.current.exportToPdf(originalText, changedText, diffResult, aiResults);\n    showNotification('Exported as PDF file');\n  };\n\n  // AI functions\n  const generateAIAnalysis = async type => {\n    // Check if both text areas are empty\n    if (!originalText.trim() && !changedText.trim()) {\n      showNotification('❌ Please enter text in both areas to analyze');\n      return;\n    }\n\n    // Check if only one text area has content\n    if (!originalText.trim() || !changedText.trim()) {\n      showNotification('❌ Please provide text in both Original and Changed areas for AI analysis');\n      return;\n    }\n\n    // Check if texts have been compared first\n    // Ensure current texts match what was last compared\n    if (!showResults || !diffResult || originalText.trim() !== lastComparedOriginal || changedText.trim() !== lastComparedChanged) {\n      showNotification('❌ Please compare the current texts first before running AI analysis (Ctrl+Enter)');\n      return;\n    }\n\n    // Check if this analysis type already exists\n    const existingAnalysisIndex = aiResults.findIndex(result => result.type === type);\n    const isRefreshingExisting = existingAnalysisIndex !== -1;\n    setIsGeneratingAI(true);\n    try {\n      if (groqService.current.isConfigured()) {\n        // Use Groq API when configured\n        if (isRefreshingExisting) {\n          showNotification(`🔄 Refreshing ${type} analysis with Groq...`);\n        } else {\n          showNotification('Generating AI analysis with Groq...');\n        }\n        const analysis = await groqService.current.generateAnalysis(type, originalText, changedText);\n        if (isRefreshingExisting) {\n          // Replace existing analysis\n          setAiResults(prev => prev.map((result, index) => index === existingAnalysisIndex ? analysis : result));\n          showNotification(`✅ ${type} analysis refreshed`);\n        } else {\n          // Add new analysis\n          setAiResults(prev => [...prev, analysis]);\n          showNotification('✅ Groq AI analysis completed');\n        }\n        setShowAiResults(true);\n\n        // Auto-scroll to the latest AI result card\n        setTimeout(() => {\n          const aiCards = document.querySelectorAll('.ai-analysis-card');\n          if (aiCards.length > 0) {\n            // Scroll to the last (newest) AI card\n            const latestCard = aiCards[aiCards.length - 1];\n            latestCard.scrollIntoView({\n              behavior: 'smooth',\n              block: 'start',\n              inline: 'nearest'\n            });\n          }\n        }, 200);\n      } else {\n        // No API configured\n        showNotification('❌ Groq API not configured. Please set up your API key.');\n        return;\n      }\n    } catch (error) {\n      console.error('AI Analysis Error:', error);\n      showNotification(`❌ Analysis failed: ${error.message}`);\n    } finally {\n      setIsGeneratingAI(false);\n    }\n  };\n  const clearAIResults = () => {\n    setAiResults([]);\n    setShowAiResults(false);\n    showNotification('AI results cleared');\n  };\n  const removeAICard = index => {\n    setAiResults(prev => prev.filter((_, i) => i !== index));\n    showNotification('AI analysis removed');\n\n    // Hide AI results section if no cards left\n    if (aiResults.length <= 1) {\n      setShowAiResults(false);\n    }\n  };\n\n  // Navigation functions\n  const navigateToPreviousChange = () => {\n    console.log('Navigate Previous - Changes:', changes.length, 'Current Index:', currentChangeIndex); // Debug log\n    if (changes.length === 0) {\n      showNotification('No changes to navigate');\n      return;\n    }\n    const newIndex = currentChangeIndex > 0 ? currentChangeIndex - 1 : changes.length - 1;\n    setCurrentChangeIndex(newIndex);\n    scrollToChange(newIndex);\n  };\n  const navigateToNextChange = () => {\n    console.log('Navigate Next - Changes:', changes.length, 'Current Index:', currentChangeIndex); // Debug log\n    if (changes.length === 0) {\n      showNotification('No changes to navigate');\n      return;\n    }\n    const newIndex = currentChangeIndex < changes.length - 1 ? currentChangeIndex + 1 : 0;\n    setCurrentChangeIndex(newIndex);\n    scrollToChange(newIndex);\n  };\n  const scrollToChange = index => {\n    if (index < 0 || index >= changes.length) return;\n    const change = changes[index];\n\n    // Try multiple selectors to find the line\n    let lineElement = document.querySelector(`[data-line-number=\"${change.lineNumber}\"][data-line-type=\"${change.type}\"]`);\n    if (!lineElement) {\n      lineElement = document.querySelector(`[data-original-line=\"${change.lineNumber}\"]`);\n    }\n    if (!lineElement) {\n      lineElement = document.querySelector(`[data-line-number=\"${change.lineNumber}\"]`);\n    }\n    if (lineElement) {\n      // Remove previous highlights\n      document.querySelectorAll('.current-change').forEach(el => {\n        el.classList.remove('current-change');\n      });\n      lineElement.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center'\n      });\n\n      // Highlight the current change temporarily\n      lineElement.classList.add('current-change');\n      setTimeout(() => {\n        lineElement.classList.remove('current-change');\n      }, 3000);\n      showNotification(`Navigated to change ${index + 1} of ${changes.length}: ${change.type}`);\n    } else {\n      showNotification(`Could not find change ${index + 1} (line ${change.lineNumber})`);\n    }\n  };\n  const toggleMinimap = () => {\n    setMinimapVisible(!minimapVisible);\n    showNotification(minimapVisible ? 'Minimap hidden' : 'Minimap shown');\n  };\n\n  // Auto-detect language when text changes\n  useEffect(() => {\n    if (settings.autoDetectLanguage && (originalText.trim() || changedText.trim())) {\n      const combinedText = originalText + '\\n' + changedText;\n      const detection = languageDetector.current.autoDetect(combinedText);\n      setDetectedLanguage(detection);\n\n      // Auto-update language setting for ANY detection (including plaintext)\n      if (detection.language !== settings.language) {\n        setSettings(prev => ({\n          ...prev,\n          language: detection.language\n        }));\n\n        // Show notification for language changes\n        if (detection.language === 'plaintext') {\n          console.log('🔍 Auto-detected: Plain text');\n        } else {\n          console.log(`🔍 Auto-detected: ${detection.language} (${detection.confidence} confidence)`);\n        }\n      }\n    } else if (!settings.autoDetectLanguage) {\n      // Reset to default when auto-detect is disabled\n      setDetectedLanguage({\n        language: 'plaintext',\n        confidence: 'low',\n        method: 'default'\n      });\n    } else if (!originalText.trim() && !changedText.trim()) {\n      // Reset to plaintext when both text areas are empty\n      setDetectedLanguage({\n        language: 'plaintext',\n        confidence: 'high',\n        method: 'empty'\n      });\n      if (settings.language !== 'plaintext') {\n        setSettings(prev => ({\n          ...prev,\n          language: 'plaintext'\n        }));\n      }\n    }\n  }, [originalText, changedText, settings.autoDetectLanguage, settings.language]);\n\n  // Live preview with debouncing\n  useEffect(() => {\n    if (settings.livePreview && originalText.trim() && changedText.trim()) {\n      clearTimeout(debounceTimer.current);\n      debounceTimer.current = setTimeout(() => {\n        performComparison();\n      }, 500);\n    }\n    return () => clearTimeout(debounceTimer.current);\n  }, [originalText, changedText, settings.livePreview, settings.diffMode, settings.ignoreCase, settings.ignoreWhitespace, settings.ignorePunctuation, performComparison]);\n\n  // Keyboard shortcuts\n  useEffect(() => {\n    const handleKeyDown = e => {\n      const isInTextArea = e.target.tagName === 'TEXTAREA' || e.target.tagName === 'INPUT';\n      if (e.ctrlKey || e.metaKey) {\n        switch (e.key.toLowerCase()) {\n          case 'enter':\n            // Always allow Ctrl+Enter for comparison, even in text areas\n            e.preventDefault();\n            performComparison();\n            showNotification('⌨️ Ctrl+Enter: Comparison started');\n            break;\n          case 'k':\n            // Always allow Ctrl+K for clear all, even in text areas\n            e.preventDefault();\n            clearAll();\n            showNotification('⌨️ Ctrl+K: All content cleared');\n            break;\n          case 's':\n            // Always allow Ctrl+S for swap, even in text areas\n            e.preventDefault();\n            swapTexts();\n            showNotification('⌨️ Ctrl+S: Texts swapped');\n            break;\n          case 'c':\n            // Only prevent default for copy results if we have results and not in text area\n            // This allows normal Ctrl+C copy in text areas while still enabling results copy\n            if (showResults && !isInTextArea) {\n              e.preventDefault();\n              copyResults();\n              showNotification('⌨️ Ctrl+C: Results copied');\n            }\n            break;\n          case 'd':\n            // Always allow theme toggle, even in text areas\n            e.preventDefault();\n            toggleTheme();\n            showNotification('⌨️ Ctrl+D: Theme toggled');\n            break;\n          case 'h':\n            // Always allow contrast toggle, even in text areas\n            e.preventDefault();\n            toggleContrast();\n            showNotification('⌨️ Ctrl+H: Contrast toggled');\n            break;\n          case 'm':\n            // Always allow minimap toggle, even in text areas\n            e.preventDefault();\n            toggleMinimap();\n            showNotification('⌨️ Ctrl+M: Minimap toggled');\n            break;\n          default:\n            break;\n        }\n      }\n\n      // Handle Alt shortcuts for AI tools\n      if (e.altKey) {\n        switch (e.key) {\n          case '1':\n            // Alt+1 - Explain\n            e.preventDefault();\n            generateAIAnalysis('explain');\n            showNotification('⌨️ Alt+1: AI Explain started');\n            break;\n          case '2':\n            // Alt+2 - Rewrite\n            e.preventDefault();\n            generateAIAnalysis('rewrite');\n            showNotification('⌨️ Alt+2: AI Rewrite started');\n            break;\n          case '3':\n            // Alt+3 - Summary\n            e.preventDefault();\n            generateAIAnalysis('summary');\n            showNotification('⌨️ Alt+3: AI Summary started');\n            break;\n          case '4':\n            // Alt+4 - Tone\n            e.preventDefault();\n            generateAIAnalysis('tone');\n            showNotification('⌨️ Alt+4: AI Tone analysis started');\n            break;\n          case '5':\n            // Alt+5 - Cleanup\n            e.preventDefault();\n            generateAIAnalysis('cleanup');\n            showNotification('⌨️ Alt+5: AI Cleanup started');\n            break;\n          default:\n            break;\n        }\n      }\n\n      // Handle other shortcuts\n      switch (e.key) {\n        case 'Escape':\n          // Always allow Escape to clear AI results\n          if (showAiResults) {\n            clearAIResults();\n            showNotification('⌨️ Escape: AI results cleared');\n          }\n          break;\n        case 'ArrowUp':\n          // Only allow navigation shortcuts when not typing in text areas\n          if (e.ctrlKey && !isInTextArea) {\n            e.preventDefault();\n            navigateToPreviousChange();\n          }\n          break;\n        case 'ArrowDown':\n          // Only allow navigation shortcuts when not typing in text areas\n          if (e.ctrlKey && !isInTextArea) {\n            e.preventDefault();\n            navigateToNextChange();\n          }\n          break;\n        case 'F1':\n          // Always allow F1 for help, even in text areas\n          e.preventDefault();\n          if (userGuide.current) {\n            userGuide.current.showQuickGuide();\n            showNotification('⌨️ F1: Quick guide opened');\n          }\n          break;\n        default:\n          break;\n      }\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [showResults, showAiResults, performComparison, clearAll, swapTexts, copyResults, toggleTheme, toggleContrast, toggleMinimap, clearAIResults, navigateToPreviousChange, navigateToNextChange, generateAIAnalysis, showNotification]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quickdiff-app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        onThemeToggle: toggleTheme,\n        onContrastToggle: toggleContrast\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 939,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SettingsPanel, {\n        settings: settings,\n        onSettingsChange: setSettings,\n        detectedLanguage: detectedLanguage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 944,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSection, {\n        originalText: originalText,\n        changedText: changedText,\n        onOriginalTextChange: setOriginalText,\n        onChangedTextChange: setChangedText,\n        onFileLoad: handleFileLoad,\n        showNotification: showNotification\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 950,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {\n        onCompare: performComparison,\n        onClear: clearAll,\n        onSwap: swapTexts,\n        onCopy: copyResults,\n        onExportTxt: exportToTxt,\n        onExportHtml: exportToHtml,\n        onExportMd: exportToMarkdown,\n        onExportPdf: exportToPdf,\n        onAIAnalysis: generateAIAnalysis,\n        hasResults: showResults,\n        isGeneratingAI: isGeneratingAI,\n        groqConfigured: groqService.current.isConfigured()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 959,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 974,\n        columnNumber: 9\n      }, this), showResults && /*#__PURE__*/_jsxDEV(Results, {\n        diffResult: diffResult,\n        settings: settings,\n        changes: changes,\n        currentChangeIndex: currentChangeIndex,\n        minimapVisible: minimapVisible,\n        onNavigatePrevious: navigateToPreviousChange,\n        onNavigateNext: navigateToNextChange,\n        onToggleMinimap: toggleMinimap,\n        onNavigateToChange: index => {\n          setCurrentChangeIndex(index);\n          scrollToChange(index);\n        },\n        aiResults: aiResults,\n        showAiResults: showAiResults,\n        onClearAIResults: clearAIResults,\n        onRemoveAICard: removeAICard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 977,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 938,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 937,\n    columnNumber: 5\n  }, this);\n}\n_s(QuickDiffApp, \"K1zYTAiNx3U24Zr0rR/WU79EOVw=\", false, function () {\n  return [useNotification];\n});\n_c = QuickDiffApp;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(NotificationProvider, {\n    children: /*#__PURE__*/_jsxDEV(QuickDiffApp, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1004,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1003,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"QuickDiffApp\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","Header","SettingsPanel","InputSection","Controls","Legend","Results","ReactUserGuide","DiffEngine","ExportUtils","GroqService","LanguageDetector","PDFTextExtractor","NotificationProvider","useNotification","jsxDEV","_jsxDEV","QuickDiffApp","_s","originalText","setOriginalText","changedText","setChangedText","diffResult","setDiffResult","showResults","setShowResults","theme","setTheme","contrast","setContrast","lastComparedOriginal","setLastComparedOriginal","lastComparedChanged","setLastComparedChanged","settings","setSettings","diffMode","viewMode","language","autoDetectLanguage","ignoreCase","ignoreWhitespace","ignorePunctuation","livePreview","detectedLanguage","setDetectedLanguage","confidence","method","aiResults","setAiResults","showAiResults","setShowAiResults","isGeneratingAI","setIsGeneratingAI","changes","setChanges","currentChangeIndex","setCurrentChangeIndex","minimapVisible","setMinimapVisible","window","userGuideInitialized","userGuide","current","destroy","debounceTimer","diffEngine","exportUtils","groqService","languageDetector","pdfExtractor","showNotification","loadSettings","savedSettings","localStorage","getItem","prev","JSON","parse","error","console","saveSettings","setItem","stringify","loadTheme","savedTheme","savedContrast","document","documentElement","setAttribute","log","process","env","REACT_APP_GROQ_API_KEY","debugConfig","testGroq","result","testConnection","success","message","collectChanges","newChanges","changeCount","changeType","changeDescription","stats","wordsAdded","wordsRemoved","totalChanges","charsAdded","charactersAdded","charsRemoved","charactersRemoved","push","lineNumber","type","content","originalLineNumber","changedLineNumber","originalLines","forEach","line","index","changedLines","exists","some","change","sort","a","b","length","actualChangeCount","changeDetails","added","removed","unit","plural","performComparison","trim","setTimeout","resultsElement","getElementById","scrollIntoView","behavior","block","handleFileLoad","file","target","name","size","toFixed","isPDF","toLowerCase","endsWith","isText","startsWith","ext","extractTextFromPDF","text","Error","Promise","resolve","reject","reader","FileReader","onload","e","onerror","readAsText","readError","emptyMessage","contentSizeKB","detection","autoDetect","langError","finalMessage","errorMessage","toggleTheme","newTheme","toggleContrast","newContrast","clearAll","swapTexts","temp","copyResults","then","catch","exportToTxt","exportToHtml","exportToMarkdown","exportToPdf","generateAIAnalysis","existingAnalysisIndex","findIndex","isRefreshingExisting","isConfigured","analysis","generateAnalysis","map","aiCards","querySelectorAll","latestCard","inline","clearAIResults","removeAICard","filter","_","i","navigateToPreviousChange","newIndex","scrollToChange","navigateToNextChange","lineElement","querySelector","el","classList","remove","add","toggleMinimap","combinedText","clearTimeout","handleKeyDown","isInTextArea","tagName","ctrlKey","metaKey","key","preventDefault","altKey","showQuickGuide","addEventListener","removeEventListener","className","children","onThemeToggle","onContrastToggle","fileName","_jsxFileName","columnNumber","onSettingsChange","onOriginalTextChange","onChangedTextChange","onFileLoad","onCompare","onClear","onSwap","onCopy","onExportTxt","onExportHtml","onExportMd","onExportPdf","onAIAnalysis","hasResults","groqConfigured","onNavigatePrevious","onNavigateNext","onToggleMinimap","onNavigateToChange","onClearAIResults","onRemoveAICard","_c","App","_c2","$RefreshReg$"],"sources":["C:/Users/Joem/quickdiff-react/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport './App.css';\r\nimport './user-guide.css';\r\nimport Header from './components/Header';\r\nimport SettingsPanel from './components/SettingsPanel';\r\nimport InputSection from './components/InputSection';\r\nimport Controls from './components/Controls';\r\nimport Legend from './components/Legend';\r\nimport Results from './components/Results';\r\nimport ReactUserGuide from './user-guide.js';\r\nimport { DiffEngine } from './utils/DiffEngine';\r\nimport { ExportUtils } from './utils/ExportUtils';\r\nimport { GroqService } from './utils/GroqService';\r\nimport { LanguageDetector } from './utils/LanguageDetector';\r\nimport PDFTextExtractor from './utils/PDFTextExtractor';\r\nimport { NotificationProvider, useNotification } from './components/NotificationProvider';\r\n\r\nfunction QuickDiffApp() {\r\n  // State management\r\n  const [originalText, setOriginalText] = useState('');\r\n  const [changedText, setChangedText] = useState('');\r\n  const [diffResult, setDiffResult] = useState(null);\r\n  const [showResults, setShowResults] = useState(false);\r\n  const [theme, setTheme] = useState('light');\r\n  const [contrast, setContrast] = useState('normal');\r\n  \r\n  // Track last compared texts to prevent AI analysis on uncompared content\r\n  const [lastComparedOriginal, setLastComparedOriginal] = useState('');\r\n  const [lastComparedChanged, setLastComparedChanged] = useState('');\r\n  \r\n  // Settings state\r\n  const [settings, setSettings] = useState({\r\n    diffMode: 'line',\r\n    viewMode: 'side-by-side',\r\n    language: 'plaintext',\r\n    autoDetectLanguage: true,\r\n    ignoreCase: false,\r\n    ignoreWhitespace: false,\r\n    ignorePunctuation: false,\r\n    livePreview: false\r\n  });\r\n\r\n  // Language detection state\r\n  const [detectedLanguage, setDetectedLanguage] = useState({\r\n    language: 'plaintext',\r\n    confidence: 'low',\r\n    method: 'default'\r\n  });\r\n\r\n  // AI state\r\n  const [aiResults, setAiResults] = useState([]);\r\n  const [showAiResults, setShowAiResults] = useState(false);\r\n  const [isGeneratingAI, setIsGeneratingAI] = useState(false);\r\n\r\n  // Navigation state\r\n  const [changes, setChanges] = useState([]);\r\n  const [currentChangeIndex, setCurrentChangeIndex] = useState(-1);\r\n  const [minimapVisible, setMinimapVisible] = useState(false);\r\n  \r\n  // Initialize user guide\r\n  useEffect(() => {\r\n    if (!window.userGuideInitialized) {\r\n      userGuide.current = new ReactUserGuide();\r\n      window.userGuideInitialized = true;\r\n    }\r\n    \r\n    // Cleanup function\r\n    return () => {\r\n      if (userGuide.current) {\r\n        userGuide.current.destroy();\r\n        userGuide.current = null;\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Refs\r\n  const debounceTimer = useRef(null);\r\n  const diffEngine = useRef(new DiffEngine());\r\n  const exportUtils = useRef(new ExportUtils());\r\n  const groqService = useRef(new GroqService());\r\n  const languageDetector = useRef(new LanguageDetector());\r\n  const pdfExtractor = useRef(new PDFTextExtractor());\r\n  const userGuide = useRef(null);\r\n  \r\n  const { showNotification } = useNotification();\r\n\r\n  // Settings management functions (defined early to avoid hoisting issues)\r\n  const loadSettings = () => {\r\n    try {\r\n      const savedSettings = localStorage.getItem('quickdiff_react_settings');\r\n      if (savedSettings) {\r\n        setSettings(prev => ({ ...prev, ...JSON.parse(savedSettings) }));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading settings:', error);\r\n    }\r\n  };\r\n\r\n  const saveSettings = useCallback(() => {\r\n    try {\r\n      localStorage.setItem('quickdiff_react_settings', JSON.stringify(settings));\r\n    } catch (error) {\r\n      console.error('Error saving settings:', error);\r\n    }\r\n  }, [settings]);\r\n\r\n  const loadTheme = () => {\r\n    const savedTheme = localStorage.getItem('quickdiff_theme') || 'light';\r\n    const savedContrast = localStorage.getItem('quickdiff_contrast') || 'normal';\r\n    setTheme(savedTheme);\r\n    setContrast(savedContrast);\r\n    document.documentElement.setAttribute('data-theme', savedTheme);\r\n    document.documentElement.setAttribute('data-contrast', savedContrast);\r\n  };\r\n\r\n  // Load settings and theme on mount\r\n  useEffect(() => {\r\n    loadSettings();\r\n    loadTheme();\r\n    \r\n    // Debug AI API configurations\r\n    console.log('=== QuickDiff App Debug ===');\r\n    console.log('Environment variables check:');\r\n    console.log('REACT_APP_GROQ_API_KEY:', process.env.REACT_APP_GROQ_API_KEY ? 'Found' : 'Not found');\r\n    \r\n    if (groqService.current) {\r\n      groqService.current.debugConfig();\r\n      \r\n      // Make Groq service available globally for testing\r\n      window.testGroq = async () => {\r\n        console.log('🧪 Testing Groq API...');\r\n        try {\r\n          const result = await groqService.current.testConnection();\r\n          console.log('🧪 Test result:', result);\r\n          return result;\r\n        } catch (error) {\r\n          console.error('🧪 Test failed:', error);\r\n          return { success: false, error: error.message };\r\n        }\r\n      };\r\n      \r\n      console.log('💡 You can test Groq API by running: testGroq() in console');\r\n    }\r\n    console.log('========================');\r\n  }, []);\r\n\r\n  // Auto-save settings when they change\r\n  useEffect(() => {\r\n    saveSettings();\r\n  }, [settings, saveSettings]);\r\n\r\n  // Collect changes for navigation (defined early to avoid hoisting issues)\r\n  const collectChanges = useCallback((result) => {\r\n    if (!result) return;\r\n    \r\n    const newChanges = [];\r\n    \r\n    // Handle different diff modes\r\n    if (settings.diffMode === 'word' || settings.diffMode === 'char') {\r\n      // For word and character modes, use stats to determine actual change count\r\n      let changeCount = 0;\r\n      let changeType = 'modified';\r\n      let changeDescription = '';\r\n      \r\n      if (result.stats) {\r\n        if (settings.diffMode === 'word') {\r\n          const wordsAdded = result.stats.wordsAdded || 0;\r\n          const wordsRemoved = result.stats.wordsRemoved || 0;\r\n          \r\n          // Use totalChanges if available, otherwise calculate\r\n          changeCount = result.stats.totalChanges || (wordsAdded + wordsRemoved);\r\n          \r\n          if (wordsAdded > 0 && wordsRemoved > 0) {\r\n            changeDescription = `${wordsRemoved} words removed, ${wordsAdded} words added`;\r\n            changeType = 'changed';\r\n          } else if (wordsAdded > 0) {\r\n            changeDescription = `${wordsAdded} words added`;\r\n            changeType = 'added';\r\n          } else if (wordsRemoved > 0) {\r\n            changeDescription = `${wordsRemoved} words removed`;\r\n            changeType = 'removed';\r\n          }\r\n        } else if (settings.diffMode === 'char') {\r\n          const charsAdded = result.stats.charactersAdded || 0;\r\n          const charsRemoved = result.stats.charactersRemoved || 0;\r\n          \r\n          // Use totalChanges if available, otherwise calculate\r\n          changeCount = result.stats.totalChanges || (charsAdded + charsRemoved);\r\n          \r\n          if (charsAdded > 0 && charsRemoved > 0) {\r\n            changeDescription = `${charsRemoved} characters removed, ${charsAdded} characters added`;\r\n            changeType = 'changed';\r\n          } else if (charsAdded > 0) {\r\n            changeDescription = `${charsAdded} characters added`;\r\n            changeType = 'added';\r\n          } else if (charsRemoved > 0) {\r\n            changeDescription = `${charsRemoved} characters removed`;\r\n            changeType = 'removed';\r\n          }\r\n        }\r\n      }\r\n      \r\n      // Create one change entry when changes are detected\r\n      if (changeCount > 0) {\r\n        newChanges.push({\r\n          lineNumber: 1,\r\n          type: changeType,\r\n          content: changeDescription,\r\n          originalLineNumber: 1,\r\n          changedLineNumber: 1\r\n        });\r\n      }\r\n      \r\n    } else {\r\n      // Line mode - original logic\r\n      // Extract changes from originalLines (DiffEngine returns originalLines and changedLines)\r\n      if (result.originalLines) {\r\n        result.originalLines.forEach((line, index) => {\r\n          if (line.type && line.type !== 'unchanged' && line.type !== '') {\r\n            newChanges.push({\r\n              lineNumber: index + 1,\r\n              type: line.type,\r\n              content: line.content || '',\r\n              originalLineNumber: index + 1,\r\n              changedLineNumber: index + 1\r\n            });\r\n          }\r\n        });\r\n      }\r\n      \r\n      // Also check changedLines for additional changes (like added lines)\r\n      if (result.changedLines) {\r\n        result.changedLines.forEach((line, index) => {\r\n          if (line.type && line.type !== 'unchanged' && line.type !== '') {\r\n            // Avoid duplicates by checking if we already have this change\r\n            const exists = newChanges.some(change => \r\n              change.lineNumber === index + 1 && change.type === line.type\r\n            );\r\n            if (!exists) {\r\n              newChanges.push({\r\n                lineNumber: index + 1,\r\n                type: line.type,\r\n                content: line.content || '',\r\n                originalLineNumber: index + 1,\r\n                changedLineNumber: index + 1\r\n              });\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Sort changes by line number\r\n    newChanges.sort((a, b) => a.lineNumber - b.lineNumber);\r\n    \r\n    console.log('Collected Changes:', newChanges); // Debug log\r\n    console.log('Diff Mode:', settings.diffMode); // Debug log\r\n    console.log('Result Stats:', result.stats); // Debug log\r\n    \r\n    setChanges(newChanges);\r\n    setCurrentChangeIndex(newChanges.length > 0 ? 0 : -1);\r\n    \r\n    if (newChanges.length > 0) {\r\n      // For word and character modes, show the actual change count from stats\r\n      if (settings.diffMode === 'word' || settings.diffMode === 'char') {\r\n        let actualChangeCount = 0;\r\n        let changeDetails = '';\r\n        \r\n        if (result.stats) {\r\n          if (settings.diffMode === 'word') {\r\n            // Use totalChanges if available for more accurate count\r\n            actualChangeCount = result.stats.totalChanges || \r\n              ((result.stats.wordsAdded || 0) + (result.stats.wordsRemoved || 0));\r\n            \r\n            const added = result.stats.wordsAdded || 0;\r\n            const removed = result.stats.wordsRemoved || 0;\r\n            \r\n            if (added > 0 && removed > 0) {\r\n              changeDetails = `${added} added, ${removed} removed`;\r\n            } else if (added > 0) {\r\n              changeDetails = `${added} added`;\r\n            } else if (removed > 0) {\r\n              changeDetails = `${removed} removed`;\r\n            }\r\n          } else if (settings.diffMode === 'char') {\r\n            // Use totalChanges if available for more accurate count\r\n            actualChangeCount = result.stats.totalChanges || \r\n              ((result.stats.charactersAdded || 0) + (result.stats.charactersRemoved || 0));\r\n            \r\n            const added = result.stats.charactersAdded || 0;\r\n            const removed = result.stats.charactersRemoved || 0;\r\n            \r\n            if (added > 0 && removed > 0) {\r\n              changeDetails = `${added} added, ${removed} removed`;\r\n            } else if (added > 0) {\r\n              changeDetails = `${added} added`;\r\n            } else if (removed > 0) {\r\n              changeDetails = `${removed} removed`;\r\n            }\r\n          }\r\n        }\r\n        \r\n        if (actualChangeCount > 0) {\r\n          const unit = settings.diffMode === 'word' ? 'word' : 'character';\r\n          const plural = actualChangeCount !== 1 ? 's' : '';\r\n          showNotification(`Found ${actualChangeCount} ${unit}${plural} changed (${changeDetails})`);\r\n        } else {\r\n          showNotification('Changes detected');\r\n        }\r\n      } else {\r\n        // Line mode - show number of line changes\r\n        showNotification(`Found ${newChanges.length} line${newChanges.length !== 1 ? 's' : ''} changed`);\r\n      }\r\n    } else {\r\n      showNotification('No changes detected');\r\n    }\r\n  }, [showNotification, settings.diffMode]);\r\n\r\n  // Main comparison function (defined early to avoid hoisting issues)\r\n  const performComparison = useCallback(() => {\r\n    // Check if both text areas are empty\r\n    if (!originalText.trim() && !changedText.trim()) {\r\n      showNotification('❌ Please enter text in both areas to compare');\r\n      return;\r\n    }\r\n    \r\n    // Check if only one text area has content\r\n    if (!originalText.trim() || !changedText.trim()) {\r\n      showNotification('❌ Please provide text in both Original and Changed areas for comparison');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const result = diffEngine.current.performComparison(\r\n        originalText,\r\n        changedText,\r\n        settings\r\n      );\r\n\r\n      console.log('Diff Result:', result); // Debug log\r\n      setDiffResult(result);\r\n      setShowResults(true);\r\n      \r\n      // Store the texts that were just compared\r\n      setLastComparedOriginal(originalText.trim());\r\n      setLastComparedChanged(changedText.trim());\r\n      \r\n      collectChanges(result);\r\n      \r\n      // Auto-generate AI analysis is disabled to prevent duplicate results\r\n      // Users can manually trigger AI analysis using the AI buttons\r\n      \r\n      // Auto-scroll to results only if live preview is disabled\r\n      if (!settings.livePreview) {\r\n        setTimeout(() => {\r\n          const resultsElement = document.getElementById('results-section');\r\n          if (resultsElement) {\r\n            resultsElement.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n          }\r\n        }, 100);\r\n      }\r\n\r\n      showNotification('Comparison completed');\r\n    } catch (error) {\r\n      console.error('Comparison error:', error);\r\n      showNotification('Error performing comparison');\r\n    }\r\n  }, [originalText, changedText, settings, showNotification, collectChanges]);\r\n\r\n\r\n  // NEW: Simple file loader - size check already done in InputSection.js\r\nconst handleFileLoad = async (file, target) => {\r\n  console.log(`🔍 Loading file: ${file.name} (${(file.size / 1024 / 1024).toFixed(1)}MB)`);\r\n  \r\n  // Basic validation\r\n  if (!file) {\r\n    showNotification('❌ No file selected');\r\n    return;\r\n  }\r\n  \r\n  if (file.size === 0) {\r\n    showNotification(`❌ File is empty: ${file.name}`, 'error', 5000);\r\n    return;\r\n  }\r\n  \r\n  // File type check\r\n  const isPDF = file.name.toLowerCase().endsWith('.pdf');\r\n  const isText = file.type.startsWith('text/') || \r\n                 ['.txt', '.md', '.json', '.js', '.html', '.css', '.xml', '.csv'].some(ext => \r\n                   file.name.toLowerCase().endsWith(ext));\r\n  \r\n  if (!isPDF && !isText) {\r\n    showNotification(`❌ Unsupported file type: ${file.name}`, 'error', 5000);\r\n    return;\r\n  }\r\n  \r\n  // Show loading notification\r\n  showNotification(`📁 Loading ${file.name}...`);\r\n  \r\n  try {\r\n    let content = '';\r\n    \r\n    if (isPDF) {\r\n      console.log(`📄 Starting PDF extraction for ${file.name}...`);\r\n      showNotification(`📄 Extracting text from PDF: ${file.name}...`);\r\n      \r\n      const result = await pdfExtractor.current.extractTextFromPDF(file);\r\n      \r\n      if (result.success) {\r\n        content = result.text;\r\n        showNotification(`✅ PDF extracted successfully: ${file.name}`);\r\n        console.log(`✅ PDF extraction completed: ${result.message}`);\r\n      } else {\r\n        showNotification(`❌ PDF extraction failed: ${result.error}`, 'error', 6000);\r\n        console.error(`❌ PDF extraction error:`, result.error);\r\n        throw new Error(result.error);\r\n      }\r\n    } else {\r\n      // Handle text files\r\n      console.log(`📄 Reading text file: ${file.name}...`);\r\n      showNotification(`📄 Reading text file: ${file.name}...`);\r\n      \r\n      try {\r\n        content = await new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.onload = (e) => {\r\n            console.log(`✅ Text file read successfully`);\r\n            resolve(e.target.result);\r\n          };\r\n          reader.onerror = (e) => {\r\n            console.error(`❌ FileReader error:`, e);\r\n            reject(new Error('Failed to read file - file may be corrupted or in an unsupported format'));\r\n          };\r\n          reader.readAsText(file, 'UTF-8'); // Specify UTF-8 encoding\r\n        });\r\n        \r\n        showNotification(`✅ Text file loaded: ${file.name}`);\r\n      } catch (readError) {\r\n        console.error('Text file reading error:', readError);\r\n        showNotification(`❌ Failed to read file: ${readError.message}`, 'error', 6000);\r\n        throw readError;\r\n      }\r\n    }\r\n    \r\n    // Validate extracted content\r\n    if (!content || content.trim().length === 0) {\r\n      const emptyMessage = `File appears to be empty or contains no readable text: ${file.name}`;\r\n      showNotification(`⚠️ ${emptyMessage}`, 'warning', 6000);\r\n      console.log(`⚠️ Empty content warning: ${emptyMessage}`);\r\n      throw new Error('Empty file content');\r\n    }\r\n    \r\n    // Check content size after extraction\r\n    const contentSizeKB = (content.length / 1024).toFixed(1);\r\n    console.log(`📊 Extracted content size: ${contentSizeKB}KB`);\r\n    \r\n    // Set the content to the appropriate text area\r\n    if (target === 'original') {\r\n      setOriginalText(content);\r\n      console.log(`✅ Content set to original text area`);\r\n    } else {\r\n      setChangedText(content);\r\n      console.log(`✅ Content set to changed text area`);\r\n    }\r\n    \r\n    // Auto-detect language from filename if enabled\r\n    if (settings.autoDetectLanguage) {\r\n      try {\r\n        const detection = languageDetector.current.autoDetect(content, file.name);\r\n        setDetectedLanguage(detection);\r\n        \r\n        if (detection.language !== 'plaintext') {\r\n          setSettings(prev => ({\r\n            ...prev,\r\n            language: detection.language\r\n          }));\r\n          console.log(`🔍 Language detected: ${detection.language} (${detection.confidence})`);\r\n        }\r\n      } catch (langError) {\r\n        console.error('Language detection error:', langError);\r\n        // Don't show notification for language detection errors - not critical\r\n      }\r\n    }\r\n    \r\n    // Trigger live preview if enabled\r\n    if (settings.livePreview && originalText.trim() && changedText.trim()) {\r\n      performComparison();\r\n    }\r\n    \r\n    // Final success notification\r\n    const finalMessage = isPDF \r\n      ? `✅ PDF processed: ${file.name} (${contentSizeKB}KB text extracted)`\r\n      : `✅ File loaded: ${file.name} (${contentSizeKB}KB)`;\r\n    \r\n    showNotification(finalMessage);\r\n    console.log(`🎉 File processing completed successfully: ${file.name}`);\r\n    \r\n    return true;\r\n    \r\n  } catch (error) {\r\n    console.error('File processing error:', error);\r\n    const errorMessage = `Failed to process file: ${file.name}`;\r\n    showNotification(`❌ ${errorMessage} - ${error.message}`, 'error', 8000);\r\n    throw error;\r\n  }\r\n};\r\n\r\n  // Theme management\r\n  const toggleTheme = () => {\r\n    const newTheme = theme === 'light' ? 'dark' : 'light';\r\n    setTheme(newTheme);\r\n    localStorage.setItem('quickdiff_theme', newTheme);\r\n    document.documentElement.setAttribute('data-theme', newTheme);\r\n    showNotification(`Switched to ${newTheme} theme`);\r\n  };\r\n\r\n  const toggleContrast = () => {\r\n    const newContrast = contrast === 'normal' ? 'high' : 'normal';\r\n    setContrast(newContrast);\r\n    localStorage.setItem('quickdiff_contrast', newContrast);\r\n    document.documentElement.setAttribute('data-contrast', newContrast);\r\n    showNotification(`${newContrast === 'high' ? 'Enabled' : 'Disabled'} high contrast mode`);\r\n  };\r\n\r\n  // Text manipulation functions\r\n  const clearAll = () => {\r\n    setOriginalText('');\r\n    setChangedText('');\r\n    setShowResults(false);\r\n    setDiffResult(null);\r\n    setAiResults([]);\r\n    setShowAiResults(false);\r\n    \r\n    // Clear last compared texts\r\n    setLastComparedOriginal('');\r\n    setLastComparedChanged('');\r\n    \r\n    showNotification('All content cleared');\r\n  };\r\n\r\n  const swapTexts = () => {\r\n    const temp = originalText;\r\n    setOriginalText(changedText);\r\n    setChangedText(temp);\r\n    showNotification('Texts swapped');\r\n    \r\n    if (settings.livePreview && originalText.trim() && changedText.trim()) {\r\n      performComparison();\r\n    }\r\n  };\r\n\r\n  // Export functions\r\n  const copyResults = () => {\r\n    exportUtils.current.copyResults(originalText, changedText, aiResults)\r\n      .then(() => showNotification('Results copied to clipboard'))\r\n      .catch(() => showNotification('Failed to copy results'));\r\n  };\r\n\r\n  const exportToTxt = () => {\r\n    exportUtils.current.exportToTxt(originalText, changedText, diffResult, aiResults);\r\n    showNotification('Exported as TXT file');\r\n  };\r\n\r\n  const exportToHtml = () => {\r\n    exportUtils.current.exportToHtml(originalText, changedText, diffResult, aiResults);\r\n    showNotification('Exported as HTML file');\r\n  };\r\n\r\n  const exportToMarkdown = () => {\r\n    exportUtils.current.exportToMarkdown(originalText, changedText, diffResult, aiResults);\r\n    showNotification('Exported as Markdown file');\r\n  };\r\n\r\n  const exportToPdf = () => {\r\n    exportUtils.current.exportToPdf(originalText, changedText, diffResult, aiResults);\r\n    showNotification('Exported as PDF file');\r\n  };\r\n\r\n  // AI functions\r\n  const generateAIAnalysis = async (type) => {\r\n    // Check if both text areas are empty\r\n    if (!originalText.trim() && !changedText.trim()) {\r\n      showNotification('❌ Please enter text in both areas to analyze');\r\n      return;\r\n    }\r\n    \r\n    // Check if only one text area has content\r\n    if (!originalText.trim() || !changedText.trim()) {\r\n      showNotification('❌ Please provide text in both Original and Changed areas for AI analysis');\r\n      return;\r\n    }\r\n\r\n    // Check if texts have been compared first\r\n    // Ensure current texts match what was last compared\r\n    if (!showResults || !diffResult || \r\n        originalText.trim() !== lastComparedOriginal || \r\n        changedText.trim() !== lastComparedChanged) {\r\n      showNotification('❌ Please compare the current texts first before running AI analysis (Ctrl+Enter)');\r\n      return;\r\n    }\r\n\r\n    // Check if this analysis type already exists\r\n    const existingAnalysisIndex = aiResults.findIndex(result => result.type === type);\r\n    const isRefreshingExisting = existingAnalysisIndex !== -1;\r\n\r\n    setIsGeneratingAI(true);\r\n    try {\r\n      if (groqService.current.isConfigured()) {\r\n        // Use Groq API when configured\r\n        if (isRefreshingExisting) {\r\n          showNotification(`🔄 Refreshing ${type} analysis with Groq...`);\r\n        } else {\r\n          showNotification('Generating AI analysis with Groq...');\r\n        }\r\n        \r\n        const analysis = await groqService.current.generateAnalysis(type, originalText, changedText);\r\n        \r\n        if (isRefreshingExisting) {\r\n          // Replace existing analysis\r\n          setAiResults(prev => prev.map((result, index) => \r\n            index === existingAnalysisIndex ? analysis : result\r\n          ));\r\n          showNotification(`✅ ${type} analysis refreshed`);\r\n        } else {\r\n          // Add new analysis\r\n          setAiResults(prev => [...prev, analysis]);\r\n          showNotification('✅ Groq AI analysis completed');\r\n        }\r\n        \r\n        setShowAiResults(true);\r\n        \r\n        // Auto-scroll to the latest AI result card\r\n        setTimeout(() => {\r\n          const aiCards = document.querySelectorAll('.ai-analysis-card');\r\n          if (aiCards.length > 0) {\r\n            // Scroll to the last (newest) AI card\r\n            const latestCard = aiCards[aiCards.length - 1];\r\n            latestCard.scrollIntoView({ \r\n              behavior: 'smooth', \r\n              block: 'start',\r\n              inline: 'nearest'\r\n            });\r\n          }\r\n        }, 200);\r\n        \r\n      } else {\r\n        // No API configured\r\n        showNotification('❌ Groq API not configured. Please set up your API key.');\r\n        return;\r\n      }\r\n    } catch (error) {\r\n      console.error('AI Analysis Error:', error);\r\n      showNotification(`❌ Analysis failed: ${error.message}`);\r\n    } finally {\r\n      setIsGeneratingAI(false);\r\n    }\r\n  };\r\n\r\n  const clearAIResults = () => {\r\n    setAiResults([]);\r\n    setShowAiResults(false);\r\n    showNotification('AI results cleared');\r\n  };\r\n\r\n  const removeAICard = (index) => {\r\n    setAiResults(prev => prev.filter((_, i) => i !== index));\r\n    showNotification('AI analysis removed');\r\n    \r\n    // Hide AI results section if no cards left\r\n    if (aiResults.length <= 1) {\r\n      setShowAiResults(false);\r\n    }\r\n  };\r\n\r\n  // Navigation functions\r\n  const navigateToPreviousChange = () => {\r\n    console.log('Navigate Previous - Changes:', changes.length, 'Current Index:', currentChangeIndex); // Debug log\r\n    if (changes.length === 0) {\r\n      showNotification('No changes to navigate');\r\n      return;\r\n    }\r\n    \r\n    const newIndex = currentChangeIndex > 0 ? currentChangeIndex - 1 : changes.length - 1;\r\n    setCurrentChangeIndex(newIndex);\r\n    scrollToChange(newIndex);\r\n  };\r\n\r\n  const navigateToNextChange = () => {\r\n    console.log('Navigate Next - Changes:', changes.length, 'Current Index:', currentChangeIndex); // Debug log\r\n    if (changes.length === 0) {\r\n      showNotification('No changes to navigate');\r\n      return;\r\n    }\r\n    \r\n    const newIndex = currentChangeIndex < changes.length - 1 ? currentChangeIndex + 1 : 0;\r\n    setCurrentChangeIndex(newIndex);\r\n    scrollToChange(newIndex);\r\n  };\r\n\r\n  const scrollToChange = (index) => {\r\n    if (index < 0 || index >= changes.length) return;\r\n    \r\n    const change = changes[index];\r\n    \r\n    // Try multiple selectors to find the line\r\n    let lineElement = document.querySelector(`[data-line-number=\"${change.lineNumber}\"][data-line-type=\"${change.type}\"]`);\r\n    \r\n    if (!lineElement) {\r\n      lineElement = document.querySelector(`[data-original-line=\"${change.lineNumber}\"]`);\r\n    }\r\n    \r\n    if (!lineElement) {\r\n      lineElement = document.querySelector(`[data-line-number=\"${change.lineNumber}\"]`);\r\n    }\r\n    \r\n    if (lineElement) {\r\n      // Remove previous highlights\r\n      document.querySelectorAll('.current-change').forEach(el => {\r\n        el.classList.remove('current-change');\r\n      });\r\n      \r\n      lineElement.scrollIntoView({ \r\n        behavior: 'smooth', \r\n        block: 'center' \r\n      });\r\n      \r\n      // Highlight the current change temporarily\r\n      lineElement.classList.add('current-change');\r\n      setTimeout(() => {\r\n        lineElement.classList.remove('current-change');\r\n      }, 3000);\r\n      \r\n      showNotification(`Navigated to change ${index + 1} of ${changes.length}: ${change.type}`);\r\n    } else {\r\n      showNotification(`Could not find change ${index + 1} (line ${change.lineNumber})`);\r\n    }\r\n  };\r\n\r\n  const toggleMinimap = () => {\r\n    setMinimapVisible(!minimapVisible);\r\n    showNotification(minimapVisible ? 'Minimap hidden' : 'Minimap shown');\r\n  };\r\n\r\n  // Auto-detect language when text changes\r\n  useEffect(() => {\r\n    if (settings.autoDetectLanguage && (originalText.trim() || changedText.trim())) {\r\n      const combinedText = originalText + '\\n' + changedText;\r\n      const detection = languageDetector.current.autoDetect(combinedText);\r\n      \r\n      setDetectedLanguage(detection);\r\n      \r\n      // Auto-update language setting for ANY detection (including plaintext)\r\n      if (detection.language !== settings.language) {\r\n        setSettings(prev => ({\r\n          ...prev,\r\n          language: detection.language\r\n        }));\r\n        \r\n        // Show notification for language changes\r\n        if (detection.language === 'plaintext') {\r\n          console.log('🔍 Auto-detected: Plain text');\r\n        } else {\r\n          console.log(`🔍 Auto-detected: ${detection.language} (${detection.confidence} confidence)`);\r\n        }\r\n      }\r\n    } else if (!settings.autoDetectLanguage) {\r\n      // Reset to default when auto-detect is disabled\r\n      setDetectedLanguage({\r\n        language: 'plaintext',\r\n        confidence: 'low',\r\n        method: 'default'\r\n      });\r\n    } else if (!originalText.trim() && !changedText.trim()) {\r\n      // Reset to plaintext when both text areas are empty\r\n      setDetectedLanguage({\r\n        language: 'plaintext',\r\n        confidence: 'high',\r\n        method: 'empty'\r\n      });\r\n      if (settings.language !== 'plaintext') {\r\n        setSettings(prev => ({\r\n          ...prev,\r\n          language: 'plaintext'\r\n        }));\r\n      }\r\n    }\r\n  }, [originalText, changedText, settings.autoDetectLanguage, settings.language]);\r\n\r\n  // Live preview with debouncing\r\n  useEffect(() => {\r\n    if (settings.livePreview && originalText.trim() && changedText.trim()) {\r\n      clearTimeout(debounceTimer.current);\r\n      debounceTimer.current = setTimeout(() => {\r\n        performComparison();\r\n      }, 500);\r\n    }\r\n    \r\n    return () => clearTimeout(debounceTimer.current);\r\n  }, [originalText, changedText, settings.livePreview, settings.diffMode, settings.ignoreCase, settings.ignoreWhitespace, settings.ignorePunctuation, performComparison]);\r\n\r\n  // Keyboard shortcuts\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      const isInTextArea = e.target.tagName === 'TEXTAREA' || e.target.tagName === 'INPUT';\r\n      \r\n      if (e.ctrlKey || e.metaKey) {\r\n        switch (e.key.toLowerCase()) {\r\n          case 'enter':\r\n            // Always allow Ctrl+Enter for comparison, even in text areas\r\n            e.preventDefault();\r\n            performComparison();\r\n            showNotification('⌨️ Ctrl+Enter: Comparison started');\r\n            break;\r\n          case 'k':\r\n            // Always allow Ctrl+K for clear all, even in text areas\r\n            e.preventDefault();\r\n            clearAll();\r\n            showNotification('⌨️ Ctrl+K: All content cleared');\r\n            break;\r\n          case 's':\r\n            // Always allow Ctrl+S for swap, even in text areas\r\n            e.preventDefault();\r\n            swapTexts();\r\n            showNotification('⌨️ Ctrl+S: Texts swapped');\r\n            break;\r\n          case 'c':\r\n            // Only prevent default for copy results if we have results and not in text area\r\n            // This allows normal Ctrl+C copy in text areas while still enabling results copy\r\n            if (showResults && !isInTextArea) {\r\n              e.preventDefault();\r\n              copyResults();\r\n              showNotification('⌨️ Ctrl+C: Results copied');\r\n            }\r\n            break;\r\n          case 'd':\r\n            // Always allow theme toggle, even in text areas\r\n            e.preventDefault();\r\n            toggleTheme();\r\n            showNotification('⌨️ Ctrl+D: Theme toggled');\r\n            break;\r\n          case 'h':\r\n            // Always allow contrast toggle, even in text areas\r\n            e.preventDefault();\r\n            toggleContrast();\r\n            showNotification('⌨️ Ctrl+H: Contrast toggled');\r\n            break;\r\n          case 'm':\r\n            // Always allow minimap toggle, even in text areas\r\n            e.preventDefault();\r\n            toggleMinimap();\r\n            showNotification('⌨️ Ctrl+M: Minimap toggled');\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n      \r\n      // Handle Alt shortcuts for AI tools\r\n      if (e.altKey) {\r\n        switch (e.key) {\r\n          case '1':\r\n            // Alt+1 - Explain\r\n            e.preventDefault();\r\n            generateAIAnalysis('explain');\r\n            showNotification('⌨️ Alt+1: AI Explain started');\r\n            break;\r\n          case '2':\r\n            // Alt+2 - Rewrite\r\n            e.preventDefault();\r\n            generateAIAnalysis('rewrite');\r\n            showNotification('⌨️ Alt+2: AI Rewrite started');\r\n            break;\r\n          case '3':\r\n            // Alt+3 - Summary\r\n            e.preventDefault();\r\n            generateAIAnalysis('summary');\r\n            showNotification('⌨️ Alt+3: AI Summary started');\r\n            break;\r\n          case '4':\r\n            // Alt+4 - Tone\r\n            e.preventDefault();\r\n            generateAIAnalysis('tone');\r\n            showNotification('⌨️ Alt+4: AI Tone analysis started');\r\n            break;\r\n          case '5':\r\n            // Alt+5 - Cleanup\r\n            e.preventDefault();\r\n            generateAIAnalysis('cleanup');\r\n            showNotification('⌨️ Alt+5: AI Cleanup started');\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n      \r\n      // Handle other shortcuts\r\n      switch (e.key) {\r\n        case 'Escape':\r\n          // Always allow Escape to clear AI results\r\n          if (showAiResults) {\r\n            clearAIResults();\r\n            showNotification('⌨️ Escape: AI results cleared');\r\n          }\r\n          break;\r\n        case 'ArrowUp':\r\n          // Only allow navigation shortcuts when not typing in text areas\r\n          if (e.ctrlKey && !isInTextArea) {\r\n            e.preventDefault();\r\n            navigateToPreviousChange();\r\n          }\r\n          break;\r\n        case 'ArrowDown':\r\n          // Only allow navigation shortcuts when not typing in text areas\r\n          if (e.ctrlKey && !isInTextArea) {\r\n            e.preventDefault();\r\n            navigateToNextChange();\r\n          }\r\n          break;\r\n        case 'F1':\r\n          // Always allow F1 for help, even in text areas\r\n          e.preventDefault();\r\n          if (userGuide.current) {\r\n            userGuide.current.showQuickGuide();\r\n            showNotification('⌨️ F1: Quick guide opened');\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', handleKeyDown);\r\n    return () => document.removeEventListener('keydown', handleKeyDown);\r\n  }, [showResults, showAiResults, performComparison, clearAll, swapTexts, copyResults, toggleTheme, toggleContrast, toggleMinimap, clearAIResults, navigateToPreviousChange, navigateToNextChange, generateAIAnalysis, showNotification]);\r\n\r\n  return (\r\n    <div className=\"quickdiff-app\">\r\n      <div className=\"container\">\r\n        <Header \r\n          onThemeToggle={toggleTheme}\r\n          onContrastToggle={toggleContrast}\r\n        />\r\n        \r\n        <SettingsPanel \r\n          settings={settings}\r\n          onSettingsChange={setSettings}\r\n          detectedLanguage={detectedLanguage}\r\n        />\r\n        \r\n        <InputSection\r\n          originalText={originalText}\r\n          changedText={changedText}\r\n          onOriginalTextChange={setOriginalText}\r\n          onChangedTextChange={setChangedText}\r\n          onFileLoad={handleFileLoad}\r\n          showNotification={showNotification}\r\n        />\r\n        \r\n        <Controls\r\n          onCompare={performComparison}\r\n          onClear={clearAll}\r\n          onSwap={swapTexts}\r\n          onCopy={copyResults}\r\n          onExportTxt={exportToTxt}\r\n          onExportHtml={exportToHtml}\r\n          onExportMd={exportToMarkdown}\r\n          onExportPdf={exportToPdf}\r\n          onAIAnalysis={generateAIAnalysis}\r\n          hasResults={showResults}\r\n          isGeneratingAI={isGeneratingAI}\r\n          groqConfigured={groqService.current.isConfigured()}\r\n        />\r\n        \r\n        <Legend />\r\n        \r\n        {showResults && (\r\n          <Results\r\n            diffResult={diffResult}\r\n            settings={settings}\r\n            changes={changes}\r\n            currentChangeIndex={currentChangeIndex}\r\n            minimapVisible={minimapVisible}\r\n            onNavigatePrevious={navigateToPreviousChange}\r\n            onNavigateNext={navigateToNextChange}\r\n            onToggleMinimap={toggleMinimap}\r\n            onNavigateToChange={(index) => {\r\n              setCurrentChangeIndex(index);\r\n              scrollToChange(index);\r\n            }}\r\n            aiResults={aiResults}\r\n            showAiResults={showAiResults}\r\n            onClearAIResults={clearAIResults}\r\n            onRemoveAICard={removeAICard}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <NotificationProvider>\r\n      <QuickDiffApp />\r\n    </NotificationProvider>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,EAAEC,MAAM,QAAQ,OAAO;AACvE,OAAO,WAAW;AAClB,OAAO,kBAAkB;AACzB,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,cAAc,MAAM,iBAAiB;AAC5C,SAASC,UAAU,QAAQ,oBAAoB;AAC/C,SAASC,WAAW,QAAQ,qBAAqB;AACjD,SAASC,WAAW,QAAQ,qBAAqB;AACjD,SAASC,gBAAgB,QAAQ,0BAA0B;AAC3D,OAAOC,gBAAgB,MAAM,0BAA0B;AACvD,SAASC,oBAAoB,EAAEC,eAAe,QAAQ,mCAAmC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1F,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB;EACA,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACwB,WAAW,EAAEC,cAAc,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAAC0B,UAAU,EAAEC,aAAa,CAAC,GAAG3B,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAAC4B,WAAW,EAAEC,cAAc,CAAC,GAAG7B,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAAC8B,KAAK,EAAEC,QAAQ,CAAC,GAAG/B,QAAQ,CAAC,OAAO,CAAC;EAC3C,MAAM,CAACgC,QAAQ,EAAEC,WAAW,CAAC,GAAGjC,QAAQ,CAAC,QAAQ,CAAC;;EAElD;EACA,MAAM,CAACkC,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGnC,QAAQ,CAAC,EAAE,CAAC;EACpE,MAAM,CAACoC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGrC,QAAQ,CAAC,EAAE,CAAC;;EAElE;EACA,MAAM,CAACsC,QAAQ,EAAEC,WAAW,CAAC,GAAGvC,QAAQ,CAAC;IACvCwC,QAAQ,EAAE,MAAM;IAChBC,QAAQ,EAAE,cAAc;IACxBC,QAAQ,EAAE,WAAW;IACrBC,kBAAkB,EAAE,IAAI;IACxBC,UAAU,EAAE,KAAK;IACjBC,gBAAgB,EAAE,KAAK;IACvBC,iBAAiB,EAAE,KAAK;IACxBC,WAAW,EAAE;EACf,CAAC,CAAC;;EAEF;EACA,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGjD,QAAQ,CAAC;IACvD0C,QAAQ,EAAE,WAAW;IACrBQ,UAAU,EAAE,KAAK;IACjBC,MAAM,EAAE;EACV,CAAC,CAAC;;EAEF;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGrD,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACsD,aAAa,EAAEC,gBAAgB,CAAC,GAAGvD,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACwD,cAAc,EAAEC,iBAAiB,CAAC,GAAGzD,QAAQ,CAAC,KAAK,CAAC;;EAE3D;EACA,MAAM,CAAC0D,OAAO,EAAEC,UAAU,CAAC,GAAG3D,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAAC4D,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG7D,QAAQ,CAAC,CAAC,CAAC,CAAC;EAChE,MAAM,CAAC8D,cAAc,EAAEC,iBAAiB,CAAC,GAAG/D,QAAQ,CAAC,KAAK,CAAC;;EAE3D;EACAC,SAAS,CAAC,MAAM;IACd,IAAI,CAAC+D,MAAM,CAACC,oBAAoB,EAAE;MAChCC,SAAS,CAACC,OAAO,GAAG,IAAIzD,cAAc,CAAC,CAAC;MACxCsD,MAAM,CAACC,oBAAoB,GAAG,IAAI;IACpC;;IAEA;IACA,OAAO,MAAM;MACX,IAAIC,SAAS,CAACC,OAAO,EAAE;QACrBD,SAAS,CAACC,OAAO,CAACC,OAAO,CAAC,CAAC;QAC3BF,SAAS,CAACC,OAAO,GAAG,IAAI;MAC1B;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAME,aAAa,GAAGlE,MAAM,CAAC,IAAI,CAAC;EAClC,MAAMmE,UAAU,GAAGnE,MAAM,CAAC,IAAIQ,UAAU,CAAC,CAAC,CAAC;EAC3C,MAAM4D,WAAW,GAAGpE,MAAM,CAAC,IAAIS,WAAW,CAAC,CAAC,CAAC;EAC7C,MAAM4D,WAAW,GAAGrE,MAAM,CAAC,IAAIU,WAAW,CAAC,CAAC,CAAC;EAC7C,MAAM4D,gBAAgB,GAAGtE,MAAM,CAAC,IAAIW,gBAAgB,CAAC,CAAC,CAAC;EACvD,MAAM4D,YAAY,GAAGvE,MAAM,CAAC,IAAIY,gBAAgB,CAAC,CAAC,CAAC;EACnD,MAAMmD,SAAS,GAAG/D,MAAM,CAAC,IAAI,CAAC;EAE9B,MAAM;IAAEwE;EAAiB,CAAC,GAAG1D,eAAe,CAAC,CAAC;;EAE9C;EACA,MAAM2D,YAAY,GAAGA,CAAA,KAAM;IACzB,IAAI;MACF,MAAMC,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,0BAA0B,CAAC;MACtE,IAAIF,aAAa,EAAE;QACjBtC,WAAW,CAACyC,IAAI,KAAK;UAAE,GAAGA,IAAI;UAAE,GAAGC,IAAI,CAACC,KAAK,CAACL,aAAa;QAAE,CAAC,CAAC,CAAC;MAClE;IACF,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC;EAED,MAAME,YAAY,GAAGnF,WAAW,CAAC,MAAM;IACrC,IAAI;MACF4E,YAAY,CAACQ,OAAO,CAAC,0BAA0B,EAAEL,IAAI,CAACM,SAAS,CAACjD,QAAQ,CAAC,CAAC;IAC5E,CAAC,CAAC,OAAO6C,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC,EAAE,CAAC7C,QAAQ,CAAC,CAAC;EAEd,MAAMkD,SAAS,GAAGA,CAAA,KAAM;IACtB,MAAMC,UAAU,GAAGX,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,IAAI,OAAO;IACrE,MAAMW,aAAa,GAAGZ,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC,IAAI,QAAQ;IAC5EhD,QAAQ,CAAC0D,UAAU,CAAC;IACpBxD,WAAW,CAACyD,aAAa,CAAC;IAC1BC,QAAQ,CAACC,eAAe,CAACC,YAAY,CAAC,YAAY,EAAEJ,UAAU,CAAC;IAC/DE,QAAQ,CAACC,eAAe,CAACC,YAAY,CAAC,eAAe,EAAEH,aAAa,CAAC;EACvE,CAAC;;EAED;EACAzF,SAAS,CAAC,MAAM;IACd2E,YAAY,CAAC,CAAC;IACdY,SAAS,CAAC,CAAC;;IAEX;IACAJ,OAAO,CAACU,GAAG,CAAC,6BAA6B,CAAC;IAC1CV,OAAO,CAACU,GAAG,CAAC,8BAA8B,CAAC;IAC3CV,OAAO,CAACU,GAAG,CAAC,yBAAyB,EAAEC,OAAO,CAACC,GAAG,CAACC,sBAAsB,GAAG,OAAO,GAAG,WAAW,CAAC;IAElG,IAAIzB,WAAW,CAACL,OAAO,EAAE;MACvBK,WAAW,CAACL,OAAO,CAAC+B,WAAW,CAAC,CAAC;;MAEjC;MACAlC,MAAM,CAACmC,QAAQ,GAAG,YAAY;QAC5Bf,OAAO,CAACU,GAAG,CAAC,wBAAwB,CAAC;QACrC,IAAI;UACF,MAAMM,MAAM,GAAG,MAAM5B,WAAW,CAACL,OAAO,CAACkC,cAAc,CAAC,CAAC;UACzDjB,OAAO,CAACU,GAAG,CAAC,iBAAiB,EAAEM,MAAM,CAAC;UACtC,OAAOA,MAAM;QACf,CAAC,CAAC,OAAOjB,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;UACvC,OAAO;YAAEmB,OAAO,EAAE,KAAK;YAAEnB,KAAK,EAAEA,KAAK,CAACoB;UAAQ,CAAC;QACjD;MACF,CAAC;MAEDnB,OAAO,CAACU,GAAG,CAAC,4DAA4D,CAAC;IAC3E;IACAV,OAAO,CAACU,GAAG,CAAC,0BAA0B,CAAC;EACzC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA7F,SAAS,CAAC,MAAM;IACdoF,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,CAAC/C,QAAQ,EAAE+C,YAAY,CAAC,CAAC;;EAE5B;EACA,MAAMmB,cAAc,GAAGtG,WAAW,CAAEkG,MAAM,IAAK;IAC7C,IAAI,CAACA,MAAM,EAAE;IAEb,MAAMK,UAAU,GAAG,EAAE;;IAErB;IACA,IAAInE,QAAQ,CAACE,QAAQ,KAAK,MAAM,IAAIF,QAAQ,CAACE,QAAQ,KAAK,MAAM,EAAE;MAChE;MACA,IAAIkE,WAAW,GAAG,CAAC;MACnB,IAAIC,UAAU,GAAG,UAAU;MAC3B,IAAIC,iBAAiB,GAAG,EAAE;MAE1B,IAAIR,MAAM,CAACS,KAAK,EAAE;QAChB,IAAIvE,QAAQ,CAACE,QAAQ,KAAK,MAAM,EAAE;UAChC,MAAMsE,UAAU,GAAGV,MAAM,CAACS,KAAK,CAACC,UAAU,IAAI,CAAC;UAC/C,MAAMC,YAAY,GAAGX,MAAM,CAACS,KAAK,CAACE,YAAY,IAAI,CAAC;;UAEnD;UACAL,WAAW,GAAGN,MAAM,CAACS,KAAK,CAACG,YAAY,IAAKF,UAAU,GAAGC,YAAa;UAEtE,IAAID,UAAU,GAAG,CAAC,IAAIC,YAAY,GAAG,CAAC,EAAE;YACtCH,iBAAiB,GAAG,GAAGG,YAAY,mBAAmBD,UAAU,cAAc;YAC9EH,UAAU,GAAG,SAAS;UACxB,CAAC,MAAM,IAAIG,UAAU,GAAG,CAAC,EAAE;YACzBF,iBAAiB,GAAG,GAAGE,UAAU,cAAc;YAC/CH,UAAU,GAAG,OAAO;UACtB,CAAC,MAAM,IAAII,YAAY,GAAG,CAAC,EAAE;YAC3BH,iBAAiB,GAAG,GAAGG,YAAY,gBAAgB;YACnDJ,UAAU,GAAG,SAAS;UACxB;QACF,CAAC,MAAM,IAAIrE,QAAQ,CAACE,QAAQ,KAAK,MAAM,EAAE;UACvC,MAAMyE,UAAU,GAAGb,MAAM,CAACS,KAAK,CAACK,eAAe,IAAI,CAAC;UACpD,MAAMC,YAAY,GAAGf,MAAM,CAACS,KAAK,CAACO,iBAAiB,IAAI,CAAC;;UAExD;UACAV,WAAW,GAAGN,MAAM,CAACS,KAAK,CAACG,YAAY,IAAKC,UAAU,GAAGE,YAAa;UAEtE,IAAIF,UAAU,GAAG,CAAC,IAAIE,YAAY,GAAG,CAAC,EAAE;YACtCP,iBAAiB,GAAG,GAAGO,YAAY,wBAAwBF,UAAU,mBAAmB;YACxFN,UAAU,GAAG,SAAS;UACxB,CAAC,MAAM,IAAIM,UAAU,GAAG,CAAC,EAAE;YACzBL,iBAAiB,GAAG,GAAGK,UAAU,mBAAmB;YACpDN,UAAU,GAAG,OAAO;UACtB,CAAC,MAAM,IAAIQ,YAAY,GAAG,CAAC,EAAE;YAC3BP,iBAAiB,GAAG,GAAGO,YAAY,qBAAqB;YACxDR,UAAU,GAAG,SAAS;UACxB;QACF;MACF;;MAEA;MACA,IAAID,WAAW,GAAG,CAAC,EAAE;QACnBD,UAAU,CAACY,IAAI,CAAC;UACdC,UAAU,EAAE,CAAC;UACbC,IAAI,EAAEZ,UAAU;UAChBa,OAAO,EAAEZ,iBAAiB;UAC1Ba,kBAAkB,EAAE,CAAC;UACrBC,iBAAiB,EAAE;QACrB,CAAC,CAAC;MACJ;IAEF,CAAC,MAAM;MACL;MACA;MACA,IAAItB,MAAM,CAACuB,aAAa,EAAE;QACxBvB,MAAM,CAACuB,aAAa,CAACC,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;UAC5C,IAAID,IAAI,CAACN,IAAI,IAAIM,IAAI,CAACN,IAAI,KAAK,WAAW,IAAIM,IAAI,CAACN,IAAI,KAAK,EAAE,EAAE;YAC9Dd,UAAU,CAACY,IAAI,CAAC;cACdC,UAAU,EAAEQ,KAAK,GAAG,CAAC;cACrBP,IAAI,EAAEM,IAAI,CAACN,IAAI;cACfC,OAAO,EAAEK,IAAI,CAACL,OAAO,IAAI,EAAE;cAC3BC,kBAAkB,EAAEK,KAAK,GAAG,CAAC;cAC7BJ,iBAAiB,EAAEI,KAAK,GAAG;YAC7B,CAAC,CAAC;UACJ;QACF,CAAC,CAAC;MACJ;;MAEA;MACA,IAAI1B,MAAM,CAAC2B,YAAY,EAAE;QACvB3B,MAAM,CAAC2B,YAAY,CAACH,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;UAC3C,IAAID,IAAI,CAACN,IAAI,IAAIM,IAAI,CAACN,IAAI,KAAK,WAAW,IAAIM,IAAI,CAACN,IAAI,KAAK,EAAE,EAAE;YAC9D;YACA,MAAMS,MAAM,GAAGvB,UAAU,CAACwB,IAAI,CAACC,MAAM,IACnCA,MAAM,CAACZ,UAAU,KAAKQ,KAAK,GAAG,CAAC,IAAII,MAAM,CAACX,IAAI,KAAKM,IAAI,CAACN,IAC1D,CAAC;YACD,IAAI,CAACS,MAAM,EAAE;cACXvB,UAAU,CAACY,IAAI,CAAC;gBACdC,UAAU,EAAEQ,KAAK,GAAG,CAAC;gBACrBP,IAAI,EAAEM,IAAI,CAACN,IAAI;gBACfC,OAAO,EAAEK,IAAI,CAACL,OAAO,IAAI,EAAE;gBAC3BC,kBAAkB,EAAEK,KAAK,GAAG,CAAC;gBAC7BJ,iBAAiB,EAAEI,KAAK,GAAG;cAC7B,CAAC,CAAC;YACJ;UACF;QACF,CAAC,CAAC;MACJ;IACF;;IAEA;IACArB,UAAU,CAAC0B,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACd,UAAU,GAAGe,CAAC,CAACf,UAAU,CAAC;IAEtDlC,OAAO,CAACU,GAAG,CAAC,oBAAoB,EAAEW,UAAU,CAAC,CAAC,CAAC;IAC/CrB,OAAO,CAACU,GAAG,CAAC,YAAY,EAAExD,QAAQ,CAACE,QAAQ,CAAC,CAAC,CAAC;IAC9C4C,OAAO,CAACU,GAAG,CAAC,eAAe,EAAEM,MAAM,CAACS,KAAK,CAAC,CAAC,CAAC;;IAE5ClD,UAAU,CAAC8C,UAAU,CAAC;IACtB5C,qBAAqB,CAAC4C,UAAU,CAAC6B,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IAErD,IAAI7B,UAAU,CAAC6B,MAAM,GAAG,CAAC,EAAE;MACzB;MACA,IAAIhG,QAAQ,CAACE,QAAQ,KAAK,MAAM,IAAIF,QAAQ,CAACE,QAAQ,KAAK,MAAM,EAAE;QAChE,IAAI+F,iBAAiB,GAAG,CAAC;QACzB,IAAIC,aAAa,GAAG,EAAE;QAEtB,IAAIpC,MAAM,CAACS,KAAK,EAAE;UAChB,IAAIvE,QAAQ,CAACE,QAAQ,KAAK,MAAM,EAAE;YAChC;YACA+F,iBAAiB,GAAGnC,MAAM,CAACS,KAAK,CAACG,YAAY,IAC1C,CAACZ,MAAM,CAACS,KAAK,CAACC,UAAU,IAAI,CAAC,KAAKV,MAAM,CAACS,KAAK,CAACE,YAAY,IAAI,CAAC,CAAE;YAErE,MAAM0B,KAAK,GAAGrC,MAAM,CAACS,KAAK,CAACC,UAAU,IAAI,CAAC;YAC1C,MAAM4B,OAAO,GAAGtC,MAAM,CAACS,KAAK,CAACE,YAAY,IAAI,CAAC;YAE9C,IAAI0B,KAAK,GAAG,CAAC,IAAIC,OAAO,GAAG,CAAC,EAAE;cAC5BF,aAAa,GAAG,GAAGC,KAAK,WAAWC,OAAO,UAAU;YACtD,CAAC,MAAM,IAAID,KAAK,GAAG,CAAC,EAAE;cACpBD,aAAa,GAAG,GAAGC,KAAK,QAAQ;YAClC,CAAC,MAAM,IAAIC,OAAO,GAAG,CAAC,EAAE;cACtBF,aAAa,GAAG,GAAGE,OAAO,UAAU;YACtC;UACF,CAAC,MAAM,IAAIpG,QAAQ,CAACE,QAAQ,KAAK,MAAM,EAAE;YACvC;YACA+F,iBAAiB,GAAGnC,MAAM,CAACS,KAAK,CAACG,YAAY,IAC1C,CAACZ,MAAM,CAACS,KAAK,CAACK,eAAe,IAAI,CAAC,KAAKd,MAAM,CAACS,KAAK,CAACO,iBAAiB,IAAI,CAAC,CAAE;YAE/E,MAAMqB,KAAK,GAAGrC,MAAM,CAACS,KAAK,CAACK,eAAe,IAAI,CAAC;YAC/C,MAAMwB,OAAO,GAAGtC,MAAM,CAACS,KAAK,CAACO,iBAAiB,IAAI,CAAC;YAEnD,IAAIqB,KAAK,GAAG,CAAC,IAAIC,OAAO,GAAG,CAAC,EAAE;cAC5BF,aAAa,GAAG,GAAGC,KAAK,WAAWC,OAAO,UAAU;YACtD,CAAC,MAAM,IAAID,KAAK,GAAG,CAAC,EAAE;cACpBD,aAAa,GAAG,GAAGC,KAAK,QAAQ;YAClC,CAAC,MAAM,IAAIC,OAAO,GAAG,CAAC,EAAE;cACtBF,aAAa,GAAG,GAAGE,OAAO,UAAU;YACtC;UACF;QACF;QAEA,IAAIH,iBAAiB,GAAG,CAAC,EAAE;UACzB,MAAMI,IAAI,GAAGrG,QAAQ,CAACE,QAAQ,KAAK,MAAM,GAAG,MAAM,GAAG,WAAW;UAChE,MAAMoG,MAAM,GAAGL,iBAAiB,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE;UACjD5D,gBAAgB,CAAC,SAAS4D,iBAAiB,IAAII,IAAI,GAAGC,MAAM,aAAaJ,aAAa,GAAG,CAAC;QAC5F,CAAC,MAAM;UACL7D,gBAAgB,CAAC,kBAAkB,CAAC;QACtC;MACF,CAAC,MAAM;QACL;QACAA,gBAAgB,CAAC,SAAS8B,UAAU,CAAC6B,MAAM,QAAQ7B,UAAU,CAAC6B,MAAM,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,UAAU,CAAC;MAClG;IACF,CAAC,MAAM;MACL3D,gBAAgB,CAAC,qBAAqB,CAAC;IACzC;EACF,CAAC,EAAE,CAACA,gBAAgB,EAAErC,QAAQ,CAACE,QAAQ,CAAC,CAAC;;EAEzC;EACA,MAAMqG,iBAAiB,GAAG3I,WAAW,CAAC,MAAM;IAC1C;IACA,IAAI,CAACoB,YAAY,CAACwH,IAAI,CAAC,CAAC,IAAI,CAACtH,WAAW,CAACsH,IAAI,CAAC,CAAC,EAAE;MAC/CnE,gBAAgB,CAAC,8CAA8C,CAAC;MAChE;IACF;;IAEA;IACA,IAAI,CAACrD,YAAY,CAACwH,IAAI,CAAC,CAAC,IAAI,CAACtH,WAAW,CAACsH,IAAI,CAAC,CAAC,EAAE;MAC/CnE,gBAAgB,CAAC,yEAAyE,CAAC;MAC3F;IACF;IAEA,IAAI;MACF,MAAMyB,MAAM,GAAG9B,UAAU,CAACH,OAAO,CAAC0E,iBAAiB,CACjDvH,YAAY,EACZE,WAAW,EACXc,QACF,CAAC;MAED8C,OAAO,CAACU,GAAG,CAAC,cAAc,EAAEM,MAAM,CAAC,CAAC,CAAC;MACrCzE,aAAa,CAACyE,MAAM,CAAC;MACrBvE,cAAc,CAAC,IAAI,CAAC;;MAEpB;MACAM,uBAAuB,CAACb,YAAY,CAACwH,IAAI,CAAC,CAAC,CAAC;MAC5CzG,sBAAsB,CAACb,WAAW,CAACsH,IAAI,CAAC,CAAC,CAAC;MAE1CtC,cAAc,CAACJ,MAAM,CAAC;;MAEtB;MACA;;MAEA;MACA,IAAI,CAAC9D,QAAQ,CAACS,WAAW,EAAE;QACzBgG,UAAU,CAAC,MAAM;UACf,MAAMC,cAAc,GAAGrD,QAAQ,CAACsD,cAAc,CAAC,iBAAiB,CAAC;UACjE,IAAID,cAAc,EAAE;YAClBA,cAAc,CAACE,cAAc,CAAC;cAAEC,QAAQ,EAAE,QAAQ;cAAEC,KAAK,EAAE;YAAQ,CAAC,CAAC;UACvE;QACF,CAAC,EAAE,GAAG,CAAC;MACT;MAEAzE,gBAAgB,CAAC,sBAAsB,CAAC;IAC1C,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzCR,gBAAgB,CAAC,6BAA6B,CAAC;IACjD;EACF,CAAC,EAAE,CAACrD,YAAY,EAAEE,WAAW,EAAEc,QAAQ,EAAEqC,gBAAgB,EAAE6B,cAAc,CAAC,CAAC;;EAG3E;EACF,MAAM6C,cAAc,GAAG,MAAAA,CAAOC,IAAI,EAAEC,MAAM,KAAK;IAC7CnE,OAAO,CAACU,GAAG,CAAC,oBAAoBwD,IAAI,CAACE,IAAI,KAAK,CAACF,IAAI,CAACG,IAAI,GAAG,IAAI,GAAG,IAAI,EAAEC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC;;IAExF;IACA,IAAI,CAACJ,IAAI,EAAE;MACT3E,gBAAgB,CAAC,oBAAoB,CAAC;MACtC;IACF;IAEA,IAAI2E,IAAI,CAACG,IAAI,KAAK,CAAC,EAAE;MACnB9E,gBAAgB,CAAC,oBAAoB2E,IAAI,CAACE,IAAI,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC;MAChE;IACF;;IAEA;IACA,MAAMG,KAAK,GAAGL,IAAI,CAACE,IAAI,CAACI,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,MAAM,CAAC;IACtD,MAAMC,MAAM,GAAGR,IAAI,CAAC/B,IAAI,CAACwC,UAAU,CAAC,OAAO,CAAC,IAC7B,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC9B,IAAI,CAAC+B,GAAG,IACvEV,IAAI,CAACE,IAAI,CAACI,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACG,GAAG,CAAC,CAAC;IAEvD,IAAI,CAACL,KAAK,IAAI,CAACG,MAAM,EAAE;MACrBnF,gBAAgB,CAAC,4BAA4B2E,IAAI,CAACE,IAAI,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC;MACxE;IACF;;IAEA;IACA7E,gBAAgB,CAAC,cAAc2E,IAAI,CAACE,IAAI,KAAK,CAAC;IAE9C,IAAI;MACF,IAAIhC,OAAO,GAAG,EAAE;MAEhB,IAAImC,KAAK,EAAE;QACTvE,OAAO,CAACU,GAAG,CAAC,kCAAkCwD,IAAI,CAACE,IAAI,KAAK,CAAC;QAC7D7E,gBAAgB,CAAC,gCAAgC2E,IAAI,CAACE,IAAI,KAAK,CAAC;QAEhE,MAAMpD,MAAM,GAAG,MAAM1B,YAAY,CAACP,OAAO,CAAC8F,kBAAkB,CAACX,IAAI,CAAC;QAElE,IAAIlD,MAAM,CAACE,OAAO,EAAE;UAClBkB,OAAO,GAAGpB,MAAM,CAAC8D,IAAI;UACrBvF,gBAAgB,CAAC,iCAAiC2E,IAAI,CAACE,IAAI,EAAE,CAAC;UAC9DpE,OAAO,CAACU,GAAG,CAAC,+BAA+BM,MAAM,CAACG,OAAO,EAAE,CAAC;QAC9D,CAAC,MAAM;UACL5B,gBAAgB,CAAC,4BAA4ByB,MAAM,CAACjB,KAAK,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC;UAC3EC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEiB,MAAM,CAACjB,KAAK,CAAC;UACtD,MAAM,IAAIgF,KAAK,CAAC/D,MAAM,CAACjB,KAAK,CAAC;QAC/B;MACF,CAAC,MAAM;QACL;QACAC,OAAO,CAACU,GAAG,CAAC,yBAAyBwD,IAAI,CAACE,IAAI,KAAK,CAAC;QACpD7E,gBAAgB,CAAC,yBAAyB2E,IAAI,CAACE,IAAI,KAAK,CAAC;QAEzD,IAAI;UACFhC,OAAO,GAAG,MAAM,IAAI4C,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;YAC/C,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;YAC/BD,MAAM,CAACE,MAAM,GAAIC,CAAC,IAAK;cACrBtF,OAAO,CAACU,GAAG,CAAC,+BAA+B,CAAC;cAC5CuE,OAAO,CAACK,CAAC,CAACnB,MAAM,CAACnD,MAAM,CAAC;YAC1B,CAAC;YACDmE,MAAM,CAACI,OAAO,GAAID,CAAC,IAAK;cACtBtF,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEuF,CAAC,CAAC;cACvCJ,MAAM,CAAC,IAAIH,KAAK,CAAC,yEAAyE,CAAC,CAAC;YAC9F,CAAC;YACDI,MAAM,CAACK,UAAU,CAACtB,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;UACpC,CAAC,CAAC;UAEF3E,gBAAgB,CAAC,uBAAuB2E,IAAI,CAACE,IAAI,EAAE,CAAC;QACtD,CAAC,CAAC,OAAOqB,SAAS,EAAE;UAClBzF,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAE0F,SAAS,CAAC;UACpDlG,gBAAgB,CAAC,0BAA0BkG,SAAS,CAACtE,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC;UAC9E,MAAMsE,SAAS;QACjB;MACF;;MAEA;MACA,IAAI,CAACrD,OAAO,IAAIA,OAAO,CAACsB,IAAI,CAAC,CAAC,CAACR,MAAM,KAAK,CAAC,EAAE;QAC3C,MAAMwC,YAAY,GAAG,0DAA0DxB,IAAI,CAACE,IAAI,EAAE;QAC1F7E,gBAAgB,CAAC,MAAMmG,YAAY,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC;QACvD1F,OAAO,CAACU,GAAG,CAAC,6BAA6BgF,YAAY,EAAE,CAAC;QACxD,MAAM,IAAIX,KAAK,CAAC,oBAAoB,CAAC;MACvC;;MAEA;MACA,MAAMY,aAAa,GAAG,CAACvD,OAAO,CAACc,MAAM,GAAG,IAAI,EAAEoB,OAAO,CAAC,CAAC,CAAC;MACxDtE,OAAO,CAACU,GAAG,CAAC,8BAA8BiF,aAAa,IAAI,CAAC;;MAE5D;MACA,IAAIxB,MAAM,KAAK,UAAU,EAAE;QACzBhI,eAAe,CAACiG,OAAO,CAAC;QACxBpC,OAAO,CAACU,GAAG,CAAC,qCAAqC,CAAC;MACpD,CAAC,MAAM;QACLrE,cAAc,CAAC+F,OAAO,CAAC;QACvBpC,OAAO,CAACU,GAAG,CAAC,oCAAoC,CAAC;MACnD;;MAEA;MACA,IAAIxD,QAAQ,CAACK,kBAAkB,EAAE;QAC/B,IAAI;UACF,MAAMqI,SAAS,GAAGvG,gBAAgB,CAACN,OAAO,CAAC8G,UAAU,CAACzD,OAAO,EAAE8B,IAAI,CAACE,IAAI,CAAC;UACzEvG,mBAAmB,CAAC+H,SAAS,CAAC;UAE9B,IAAIA,SAAS,CAACtI,QAAQ,KAAK,WAAW,EAAE;YACtCH,WAAW,CAACyC,IAAI,KAAK;cACnB,GAAGA,IAAI;cACPtC,QAAQ,EAAEsI,SAAS,CAACtI;YACtB,CAAC,CAAC,CAAC;YACH0C,OAAO,CAACU,GAAG,CAAC,yBAAyBkF,SAAS,CAACtI,QAAQ,KAAKsI,SAAS,CAAC9H,UAAU,GAAG,CAAC;UACtF;QACF,CAAC,CAAC,OAAOgI,SAAS,EAAE;UAClB9F,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAE+F,SAAS,CAAC;UACrD;QACF;MACF;;MAEA;MACA,IAAI5I,QAAQ,CAACS,WAAW,IAAIzB,YAAY,CAACwH,IAAI,CAAC,CAAC,IAAItH,WAAW,CAACsH,IAAI,CAAC,CAAC,EAAE;QACrED,iBAAiB,CAAC,CAAC;MACrB;;MAEA;MACA,MAAMsC,YAAY,GAAGxB,KAAK,GACtB,oBAAoBL,IAAI,CAACE,IAAI,KAAKuB,aAAa,oBAAoB,GACnE,kBAAkBzB,IAAI,CAACE,IAAI,KAAKuB,aAAa,KAAK;MAEtDpG,gBAAgB,CAACwG,YAAY,CAAC;MAC9B/F,OAAO,CAACU,GAAG,CAAC,8CAA8CwD,IAAI,CAACE,IAAI,EAAE,CAAC;MAEtE,OAAO,IAAI;IAEb,CAAC,CAAC,OAAOrE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMiG,YAAY,GAAG,2BAA2B9B,IAAI,CAACE,IAAI,EAAE;MAC3D7E,gBAAgB,CAAC,KAAKyG,YAAY,MAAMjG,KAAK,CAACoB,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC;MACvE,MAAMpB,KAAK;IACb;EACF,CAAC;;EAEC;EACA,MAAMkG,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAMC,QAAQ,GAAGxJ,KAAK,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO;IACrDC,QAAQ,CAACuJ,QAAQ,CAAC;IAClBxG,YAAY,CAACQ,OAAO,CAAC,iBAAiB,EAAEgG,QAAQ,CAAC;IACjD3F,QAAQ,CAACC,eAAe,CAACC,YAAY,CAAC,YAAY,EAAEyF,QAAQ,CAAC;IAC7D3G,gBAAgB,CAAC,eAAe2G,QAAQ,QAAQ,CAAC;EACnD,CAAC;EAED,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMC,WAAW,GAAGxJ,QAAQ,KAAK,QAAQ,GAAG,MAAM,GAAG,QAAQ;IAC7DC,WAAW,CAACuJ,WAAW,CAAC;IACxB1G,YAAY,CAACQ,OAAO,CAAC,oBAAoB,EAAEkG,WAAW,CAAC;IACvD7F,QAAQ,CAACC,eAAe,CAACC,YAAY,CAAC,eAAe,EAAE2F,WAAW,CAAC;IACnE7G,gBAAgB,CAAC,GAAG6G,WAAW,KAAK,MAAM,GAAG,SAAS,GAAG,UAAU,qBAAqB,CAAC;EAC3F,CAAC;;EAED;EACA,MAAMC,QAAQ,GAAGA,CAAA,KAAM;IACrBlK,eAAe,CAAC,EAAE,CAAC;IACnBE,cAAc,CAAC,EAAE,CAAC;IAClBI,cAAc,CAAC,KAAK,CAAC;IACrBF,aAAa,CAAC,IAAI,CAAC;IACnB0B,YAAY,CAAC,EAAE,CAAC;IAChBE,gBAAgB,CAAC,KAAK,CAAC;;IAEvB;IACApB,uBAAuB,CAAC,EAAE,CAAC;IAC3BE,sBAAsB,CAAC,EAAE,CAAC;IAE1BsC,gBAAgB,CAAC,qBAAqB,CAAC;EACzC,CAAC;EAED,MAAM+G,SAAS,GAAGA,CAAA,KAAM;IACtB,MAAMC,IAAI,GAAGrK,YAAY;IACzBC,eAAe,CAACC,WAAW,CAAC;IAC5BC,cAAc,CAACkK,IAAI,CAAC;IACpBhH,gBAAgB,CAAC,eAAe,CAAC;IAEjC,IAAIrC,QAAQ,CAACS,WAAW,IAAIzB,YAAY,CAACwH,IAAI,CAAC,CAAC,IAAItH,WAAW,CAACsH,IAAI,CAAC,CAAC,EAAE;MACrED,iBAAiB,CAAC,CAAC;IACrB;EACF,CAAC;;EAED;EACA,MAAM+C,WAAW,GAAGA,CAAA,KAAM;IACxBrH,WAAW,CAACJ,OAAO,CAACyH,WAAW,CAACtK,YAAY,EAAEE,WAAW,EAAE4B,SAAS,CAAC,CAClEyI,IAAI,CAAC,MAAMlH,gBAAgB,CAAC,6BAA6B,CAAC,CAAC,CAC3DmH,KAAK,CAAC,MAAMnH,gBAAgB,CAAC,wBAAwB,CAAC,CAAC;EAC5D,CAAC;EAED,MAAMoH,WAAW,GAAGA,CAAA,KAAM;IACxBxH,WAAW,CAACJ,OAAO,CAAC4H,WAAW,CAACzK,YAAY,EAAEE,WAAW,EAAEE,UAAU,EAAE0B,SAAS,CAAC;IACjFuB,gBAAgB,CAAC,sBAAsB,CAAC;EAC1C,CAAC;EAED,MAAMqH,YAAY,GAAGA,CAAA,KAAM;IACzBzH,WAAW,CAACJ,OAAO,CAAC6H,YAAY,CAAC1K,YAAY,EAAEE,WAAW,EAAEE,UAAU,EAAE0B,SAAS,CAAC;IAClFuB,gBAAgB,CAAC,uBAAuB,CAAC;EAC3C,CAAC;EAED,MAAMsH,gBAAgB,GAAGA,CAAA,KAAM;IAC7B1H,WAAW,CAACJ,OAAO,CAAC8H,gBAAgB,CAAC3K,YAAY,EAAEE,WAAW,EAAEE,UAAU,EAAE0B,SAAS,CAAC;IACtFuB,gBAAgB,CAAC,2BAA2B,CAAC;EAC/C,CAAC;EAED,MAAMuH,WAAW,GAAGA,CAAA,KAAM;IACxB3H,WAAW,CAACJ,OAAO,CAAC+H,WAAW,CAAC5K,YAAY,EAAEE,WAAW,EAAEE,UAAU,EAAE0B,SAAS,CAAC;IACjFuB,gBAAgB,CAAC,sBAAsB,CAAC;EAC1C,CAAC;;EAED;EACA,MAAMwH,kBAAkB,GAAG,MAAO5E,IAAI,IAAK;IACzC;IACA,IAAI,CAACjG,YAAY,CAACwH,IAAI,CAAC,CAAC,IAAI,CAACtH,WAAW,CAACsH,IAAI,CAAC,CAAC,EAAE;MAC/CnE,gBAAgB,CAAC,8CAA8C,CAAC;MAChE;IACF;;IAEA;IACA,IAAI,CAACrD,YAAY,CAACwH,IAAI,CAAC,CAAC,IAAI,CAACtH,WAAW,CAACsH,IAAI,CAAC,CAAC,EAAE;MAC/CnE,gBAAgB,CAAC,0EAA0E,CAAC;MAC5F;IACF;;IAEA;IACA;IACA,IAAI,CAAC/C,WAAW,IAAI,CAACF,UAAU,IAC3BJ,YAAY,CAACwH,IAAI,CAAC,CAAC,KAAK5G,oBAAoB,IAC5CV,WAAW,CAACsH,IAAI,CAAC,CAAC,KAAK1G,mBAAmB,EAAE;MAC9CuC,gBAAgB,CAAC,kFAAkF,CAAC;MACpG;IACF;;IAEA;IACA,MAAMyH,qBAAqB,GAAGhJ,SAAS,CAACiJ,SAAS,CAACjG,MAAM,IAAIA,MAAM,CAACmB,IAAI,KAAKA,IAAI,CAAC;IACjF,MAAM+E,oBAAoB,GAAGF,qBAAqB,KAAK,CAAC,CAAC;IAEzD3I,iBAAiB,CAAC,IAAI,CAAC;IACvB,IAAI;MACF,IAAIe,WAAW,CAACL,OAAO,CAACoI,YAAY,CAAC,CAAC,EAAE;QACtC;QACA,IAAID,oBAAoB,EAAE;UACxB3H,gBAAgB,CAAC,iBAAiB4C,IAAI,wBAAwB,CAAC;QACjE,CAAC,MAAM;UACL5C,gBAAgB,CAAC,qCAAqC,CAAC;QACzD;QAEA,MAAM6H,QAAQ,GAAG,MAAMhI,WAAW,CAACL,OAAO,CAACsI,gBAAgB,CAAClF,IAAI,EAAEjG,YAAY,EAAEE,WAAW,CAAC;QAE5F,IAAI8K,oBAAoB,EAAE;UACxB;UACAjJ,YAAY,CAAC2B,IAAI,IAAIA,IAAI,CAAC0H,GAAG,CAAC,CAACtG,MAAM,EAAE0B,KAAK,KAC1CA,KAAK,KAAKsE,qBAAqB,GAAGI,QAAQ,GAAGpG,MAC/C,CAAC,CAAC;UACFzB,gBAAgB,CAAC,KAAK4C,IAAI,qBAAqB,CAAC;QAClD,CAAC,MAAM;UACL;UACAlE,YAAY,CAAC2B,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEwH,QAAQ,CAAC,CAAC;UACzC7H,gBAAgB,CAAC,8BAA8B,CAAC;QAClD;QAEApB,gBAAgB,CAAC,IAAI,CAAC;;QAEtB;QACAwF,UAAU,CAAC,MAAM;UACf,MAAM4D,OAAO,GAAGhH,QAAQ,CAACiH,gBAAgB,CAAC,mBAAmB,CAAC;UAC9D,IAAID,OAAO,CAACrE,MAAM,GAAG,CAAC,EAAE;YACtB;YACA,MAAMuE,UAAU,GAAGF,OAAO,CAACA,OAAO,CAACrE,MAAM,GAAG,CAAC,CAAC;YAC9CuE,UAAU,CAAC3D,cAAc,CAAC;cACxBC,QAAQ,EAAE,QAAQ;cAClBC,KAAK,EAAE,OAAO;cACd0D,MAAM,EAAE;YACV,CAAC,CAAC;UACJ;QACF,CAAC,EAAE,GAAG,CAAC;MAET,CAAC,MAAM;QACL;QACAnI,gBAAgB,CAAC,wDAAwD,CAAC;QAC1E;MACF;IACF,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1CR,gBAAgB,CAAC,sBAAsBQ,KAAK,CAACoB,OAAO,EAAE,CAAC;IACzD,CAAC,SAAS;MACR9C,iBAAiB,CAAC,KAAK,CAAC;IAC1B;EACF,CAAC;EAED,MAAMsJ,cAAc,GAAGA,CAAA,KAAM;IAC3B1J,YAAY,CAAC,EAAE,CAAC;IAChBE,gBAAgB,CAAC,KAAK,CAAC;IACvBoB,gBAAgB,CAAC,oBAAoB,CAAC;EACxC,CAAC;EAED,MAAMqI,YAAY,GAAIlF,KAAK,IAAK;IAC9BzE,YAAY,CAAC2B,IAAI,IAAIA,IAAI,CAACiI,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,KAAKrF,KAAK,CAAC,CAAC;IACxDnD,gBAAgB,CAAC,qBAAqB,CAAC;;IAEvC;IACA,IAAIvB,SAAS,CAACkF,MAAM,IAAI,CAAC,EAAE;MACzB/E,gBAAgB,CAAC,KAAK,CAAC;IACzB;EACF,CAAC;;EAED;EACA,MAAM6J,wBAAwB,GAAGA,CAAA,KAAM;IACrChI,OAAO,CAACU,GAAG,CAAC,8BAA8B,EAAEpC,OAAO,CAAC4E,MAAM,EAAE,gBAAgB,EAAE1E,kBAAkB,CAAC,CAAC,CAAC;IACnG,IAAIF,OAAO,CAAC4E,MAAM,KAAK,CAAC,EAAE;MACxB3D,gBAAgB,CAAC,wBAAwB,CAAC;MAC1C;IACF;IAEA,MAAM0I,QAAQ,GAAGzJ,kBAAkB,GAAG,CAAC,GAAGA,kBAAkB,GAAG,CAAC,GAAGF,OAAO,CAAC4E,MAAM,GAAG,CAAC;IACrFzE,qBAAqB,CAACwJ,QAAQ,CAAC;IAC/BC,cAAc,CAACD,QAAQ,CAAC;EAC1B,CAAC;EAED,MAAME,oBAAoB,GAAGA,CAAA,KAAM;IACjCnI,OAAO,CAACU,GAAG,CAAC,0BAA0B,EAAEpC,OAAO,CAAC4E,MAAM,EAAE,gBAAgB,EAAE1E,kBAAkB,CAAC,CAAC,CAAC;IAC/F,IAAIF,OAAO,CAAC4E,MAAM,KAAK,CAAC,EAAE;MACxB3D,gBAAgB,CAAC,wBAAwB,CAAC;MAC1C;IACF;IAEA,MAAM0I,QAAQ,GAAGzJ,kBAAkB,GAAGF,OAAO,CAAC4E,MAAM,GAAG,CAAC,GAAG1E,kBAAkB,GAAG,CAAC,GAAG,CAAC;IACrFC,qBAAqB,CAACwJ,QAAQ,CAAC;IAC/BC,cAAc,CAACD,QAAQ,CAAC;EAC1B,CAAC;EAED,MAAMC,cAAc,GAAIxF,KAAK,IAAK;IAChC,IAAIA,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAIpE,OAAO,CAAC4E,MAAM,EAAE;IAE1C,MAAMJ,MAAM,GAAGxE,OAAO,CAACoE,KAAK,CAAC;;IAE7B;IACA,IAAI0F,WAAW,GAAG7H,QAAQ,CAAC8H,aAAa,CAAC,sBAAsBvF,MAAM,CAACZ,UAAU,sBAAsBY,MAAM,CAACX,IAAI,IAAI,CAAC;IAEtH,IAAI,CAACiG,WAAW,EAAE;MAChBA,WAAW,GAAG7H,QAAQ,CAAC8H,aAAa,CAAC,wBAAwBvF,MAAM,CAACZ,UAAU,IAAI,CAAC;IACrF;IAEA,IAAI,CAACkG,WAAW,EAAE;MAChBA,WAAW,GAAG7H,QAAQ,CAAC8H,aAAa,CAAC,sBAAsBvF,MAAM,CAACZ,UAAU,IAAI,CAAC;IACnF;IAEA,IAAIkG,WAAW,EAAE;MACf;MACA7H,QAAQ,CAACiH,gBAAgB,CAAC,iBAAiB,CAAC,CAAChF,OAAO,CAAC8F,EAAE,IAAI;QACzDA,EAAE,CAACC,SAAS,CAACC,MAAM,CAAC,gBAAgB,CAAC;MACvC,CAAC,CAAC;MAEFJ,WAAW,CAACtE,cAAc,CAAC;QACzBC,QAAQ,EAAE,QAAQ;QAClBC,KAAK,EAAE;MACT,CAAC,CAAC;;MAEF;MACAoE,WAAW,CAACG,SAAS,CAACE,GAAG,CAAC,gBAAgB,CAAC;MAC3C9E,UAAU,CAAC,MAAM;QACfyE,WAAW,CAACG,SAAS,CAACC,MAAM,CAAC,gBAAgB,CAAC;MAChD,CAAC,EAAE,IAAI,CAAC;MAERjJ,gBAAgB,CAAC,uBAAuBmD,KAAK,GAAG,CAAC,OAAOpE,OAAO,CAAC4E,MAAM,KAAKJ,MAAM,CAACX,IAAI,EAAE,CAAC;IAC3F,CAAC,MAAM;MACL5C,gBAAgB,CAAC,yBAAyBmD,KAAK,GAAG,CAAC,UAAUI,MAAM,CAACZ,UAAU,GAAG,CAAC;IACpF;EACF,CAAC;EAED,MAAMwG,aAAa,GAAGA,CAAA,KAAM;IAC1B/J,iBAAiB,CAAC,CAACD,cAAc,CAAC;IAClCa,gBAAgB,CAACb,cAAc,GAAG,gBAAgB,GAAG,eAAe,CAAC;EACvE,CAAC;;EAED;EACA7D,SAAS,CAAC,MAAM;IACd,IAAIqC,QAAQ,CAACK,kBAAkB,KAAKrB,YAAY,CAACwH,IAAI,CAAC,CAAC,IAAItH,WAAW,CAACsH,IAAI,CAAC,CAAC,CAAC,EAAE;MAC9E,MAAMiF,YAAY,GAAGzM,YAAY,GAAG,IAAI,GAAGE,WAAW;MACtD,MAAMwJ,SAAS,GAAGvG,gBAAgB,CAACN,OAAO,CAAC8G,UAAU,CAAC8C,YAAY,CAAC;MAEnE9K,mBAAmB,CAAC+H,SAAS,CAAC;;MAE9B;MACA,IAAIA,SAAS,CAACtI,QAAQ,KAAKJ,QAAQ,CAACI,QAAQ,EAAE;QAC5CH,WAAW,CAACyC,IAAI,KAAK;UACnB,GAAGA,IAAI;UACPtC,QAAQ,EAAEsI,SAAS,CAACtI;QACtB,CAAC,CAAC,CAAC;;QAEH;QACA,IAAIsI,SAAS,CAACtI,QAAQ,KAAK,WAAW,EAAE;UACtC0C,OAAO,CAACU,GAAG,CAAC,8BAA8B,CAAC;QAC7C,CAAC,MAAM;UACLV,OAAO,CAACU,GAAG,CAAC,qBAAqBkF,SAAS,CAACtI,QAAQ,KAAKsI,SAAS,CAAC9H,UAAU,cAAc,CAAC;QAC7F;MACF;IACF,CAAC,MAAM,IAAI,CAACZ,QAAQ,CAACK,kBAAkB,EAAE;MACvC;MACAM,mBAAmB,CAAC;QAClBP,QAAQ,EAAE,WAAW;QACrBQ,UAAU,EAAE,KAAK;QACjBC,MAAM,EAAE;MACV,CAAC,CAAC;IACJ,CAAC,MAAM,IAAI,CAAC7B,YAAY,CAACwH,IAAI,CAAC,CAAC,IAAI,CAACtH,WAAW,CAACsH,IAAI,CAAC,CAAC,EAAE;MACtD;MACA7F,mBAAmB,CAAC;QAClBP,QAAQ,EAAE,WAAW;QACrBQ,UAAU,EAAE,MAAM;QAClBC,MAAM,EAAE;MACV,CAAC,CAAC;MACF,IAAIb,QAAQ,CAACI,QAAQ,KAAK,WAAW,EAAE;QACrCH,WAAW,CAACyC,IAAI,KAAK;UACnB,GAAGA,IAAI;UACPtC,QAAQ,EAAE;QACZ,CAAC,CAAC,CAAC;MACL;IACF;EACF,CAAC,EAAE,CAACpB,YAAY,EAAEE,WAAW,EAAEc,QAAQ,CAACK,kBAAkB,EAAEL,QAAQ,CAACI,QAAQ,CAAC,CAAC;;EAE/E;EACAzC,SAAS,CAAC,MAAM;IACd,IAAIqC,QAAQ,CAACS,WAAW,IAAIzB,YAAY,CAACwH,IAAI,CAAC,CAAC,IAAItH,WAAW,CAACsH,IAAI,CAAC,CAAC,EAAE;MACrEkF,YAAY,CAAC3J,aAAa,CAACF,OAAO,CAAC;MACnCE,aAAa,CAACF,OAAO,GAAG4E,UAAU,CAAC,MAAM;QACvCF,iBAAiB,CAAC,CAAC;MACrB,CAAC,EAAE,GAAG,CAAC;IACT;IAEA,OAAO,MAAMmF,YAAY,CAAC3J,aAAa,CAACF,OAAO,CAAC;EAClD,CAAC,EAAE,CAAC7C,YAAY,EAAEE,WAAW,EAAEc,QAAQ,CAACS,WAAW,EAAET,QAAQ,CAACE,QAAQ,EAAEF,QAAQ,CAACM,UAAU,EAAEN,QAAQ,CAACO,gBAAgB,EAAEP,QAAQ,CAACQ,iBAAiB,EAAE+F,iBAAiB,CAAC,CAAC;;EAEvK;EACA5I,SAAS,CAAC,MAAM;IACd,MAAMgO,aAAa,GAAIvD,CAAC,IAAK;MAC3B,MAAMwD,YAAY,GAAGxD,CAAC,CAACnB,MAAM,CAAC4E,OAAO,KAAK,UAAU,IAAIzD,CAAC,CAACnB,MAAM,CAAC4E,OAAO,KAAK,OAAO;MAEpF,IAAIzD,CAAC,CAAC0D,OAAO,IAAI1D,CAAC,CAAC2D,OAAO,EAAE;QAC1B,QAAQ3D,CAAC,CAAC4D,GAAG,CAAC1E,WAAW,CAAC,CAAC;UACzB,KAAK,OAAO;YACV;YACAc,CAAC,CAAC6D,cAAc,CAAC,CAAC;YAClB1F,iBAAiB,CAAC,CAAC;YACnBlE,gBAAgB,CAAC,mCAAmC,CAAC;YACrD;UACF,KAAK,GAAG;YACN;YACA+F,CAAC,CAAC6D,cAAc,CAAC,CAAC;YAClB9C,QAAQ,CAAC,CAAC;YACV9G,gBAAgB,CAAC,gCAAgC,CAAC;YAClD;UACF,KAAK,GAAG;YACN;YACA+F,CAAC,CAAC6D,cAAc,CAAC,CAAC;YAClB7C,SAAS,CAAC,CAAC;YACX/G,gBAAgB,CAAC,0BAA0B,CAAC;YAC5C;UACF,KAAK,GAAG;YACN;YACA;YACA,IAAI/C,WAAW,IAAI,CAACsM,YAAY,EAAE;cAChCxD,CAAC,CAAC6D,cAAc,CAAC,CAAC;cAClB3C,WAAW,CAAC,CAAC;cACbjH,gBAAgB,CAAC,2BAA2B,CAAC;YAC/C;YACA;UACF,KAAK,GAAG;YACN;YACA+F,CAAC,CAAC6D,cAAc,CAAC,CAAC;YAClBlD,WAAW,CAAC,CAAC;YACb1G,gBAAgB,CAAC,0BAA0B,CAAC;YAC5C;UACF,KAAK,GAAG;YACN;YACA+F,CAAC,CAAC6D,cAAc,CAAC,CAAC;YAClBhD,cAAc,CAAC,CAAC;YAChB5G,gBAAgB,CAAC,6BAA6B,CAAC;YAC/C;UACF,KAAK,GAAG;YACN;YACA+F,CAAC,CAAC6D,cAAc,CAAC,CAAC;YAClBT,aAAa,CAAC,CAAC;YACfnJ,gBAAgB,CAAC,4BAA4B,CAAC;YAC9C;UACF;YACE;QACJ;MACF;;MAEA;MACA,IAAI+F,CAAC,CAAC8D,MAAM,EAAE;QACZ,QAAQ9D,CAAC,CAAC4D,GAAG;UACX,KAAK,GAAG;YACN;YACA5D,CAAC,CAAC6D,cAAc,CAAC,CAAC;YAClBpC,kBAAkB,CAAC,SAAS,CAAC;YAC7BxH,gBAAgB,CAAC,8BAA8B,CAAC;YAChD;UACF,KAAK,GAAG;YACN;YACA+F,CAAC,CAAC6D,cAAc,CAAC,CAAC;YAClBpC,kBAAkB,CAAC,SAAS,CAAC;YAC7BxH,gBAAgB,CAAC,8BAA8B,CAAC;YAChD;UACF,KAAK,GAAG;YACN;YACA+F,CAAC,CAAC6D,cAAc,CAAC,CAAC;YAClBpC,kBAAkB,CAAC,SAAS,CAAC;YAC7BxH,gBAAgB,CAAC,8BAA8B,CAAC;YAChD;UACF,KAAK,GAAG;YACN;YACA+F,CAAC,CAAC6D,cAAc,CAAC,CAAC;YAClBpC,kBAAkB,CAAC,MAAM,CAAC;YAC1BxH,gBAAgB,CAAC,oCAAoC,CAAC;YACtD;UACF,KAAK,GAAG;YACN;YACA+F,CAAC,CAAC6D,cAAc,CAAC,CAAC;YAClBpC,kBAAkB,CAAC,SAAS,CAAC;YAC7BxH,gBAAgB,CAAC,8BAA8B,CAAC;YAChD;UACF;YACE;QACJ;MACF;;MAEA;MACA,QAAQ+F,CAAC,CAAC4D,GAAG;QACX,KAAK,QAAQ;UACX;UACA,IAAIhL,aAAa,EAAE;YACjByJ,cAAc,CAAC,CAAC;YAChBpI,gBAAgB,CAAC,+BAA+B,CAAC;UACnD;UACA;QACF,KAAK,SAAS;UACZ;UACA,IAAI+F,CAAC,CAAC0D,OAAO,IAAI,CAACF,YAAY,EAAE;YAC9BxD,CAAC,CAAC6D,cAAc,CAAC,CAAC;YAClBnB,wBAAwB,CAAC,CAAC;UAC5B;UACA;QACF,KAAK,WAAW;UACd;UACA,IAAI1C,CAAC,CAAC0D,OAAO,IAAI,CAACF,YAAY,EAAE;YAC9BxD,CAAC,CAAC6D,cAAc,CAAC,CAAC;YAClBhB,oBAAoB,CAAC,CAAC;UACxB;UACA;QACF,KAAK,IAAI;UACP;UACA7C,CAAC,CAAC6D,cAAc,CAAC,CAAC;UAClB,IAAIrK,SAAS,CAACC,OAAO,EAAE;YACrBD,SAAS,CAACC,OAAO,CAACsK,cAAc,CAAC,CAAC;YAClC9J,gBAAgB,CAAC,2BAA2B,CAAC;UAC/C;UACA;QACF;UACE;MACJ;IACF,CAAC;IAEDgB,QAAQ,CAAC+I,gBAAgB,CAAC,SAAS,EAAET,aAAa,CAAC;IACnD,OAAO,MAAMtI,QAAQ,CAACgJ,mBAAmB,CAAC,SAAS,EAAEV,aAAa,CAAC;EACrE,CAAC,EAAE,CAACrM,WAAW,EAAE0B,aAAa,EAAEuF,iBAAiB,EAAE4C,QAAQ,EAAEC,SAAS,EAAEE,WAAW,EAAEP,WAAW,EAAEE,cAAc,EAAEuC,aAAa,EAAEf,cAAc,EAAEK,wBAAwB,EAAEG,oBAAoB,EAAEpB,kBAAkB,EAAExH,gBAAgB,CAAC,CAAC;EAEvO,oBACExD,OAAA;IAAKyN,SAAS,EAAC,eAAe;IAAAC,QAAA,eAC5B1N,OAAA;MAAKyN,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACxB1N,OAAA,CAACf,MAAM;QACL0O,aAAa,EAAEzD,WAAY;QAC3B0D,gBAAgB,EAAExD;MAAe;QAAAyD,QAAA,EAAAC,YAAA;QAAA3H,UAAA;QAAA4H,YAAA;MAAA,OAClC,CAAC,eAEF/N,OAAA,CAACd,aAAa;QACZiC,QAAQ,EAAEA,QAAS;QACnB6M,gBAAgB,EAAE5M,WAAY;QAC9BS,gBAAgB,EAAEA;MAAiB;QAAAgM,QAAA,EAAAC,YAAA;QAAA3H,UAAA;QAAA4H,YAAA;MAAA,OACpC,CAAC,eAEF/N,OAAA,CAACb,YAAY;QACXgB,YAAY,EAAEA,YAAa;QAC3BE,WAAW,EAAEA,WAAY;QACzB4N,oBAAoB,EAAE7N,eAAgB;QACtC8N,mBAAmB,EAAE5N,cAAe;QACpC6N,UAAU,EAAEjG,cAAe;QAC3B1E,gBAAgB,EAAEA;MAAiB;QAAAqK,QAAA,EAAAC,YAAA;QAAA3H,UAAA;QAAA4H,YAAA;MAAA,OACpC,CAAC,eAEF/N,OAAA,CAACZ,QAAQ;QACPgP,SAAS,EAAE1G,iBAAkB;QAC7B2G,OAAO,EAAE/D,QAAS;QAClBgE,MAAM,EAAE/D,SAAU;QAClBgE,MAAM,EAAE9D,WAAY;QACpB+D,WAAW,EAAE5D,WAAY;QACzB6D,YAAY,EAAE5D,YAAa;QAC3B6D,UAAU,EAAE5D,gBAAiB;QAC7B6D,WAAW,EAAE5D,WAAY;QACzB6D,YAAY,EAAE5D,kBAAmB;QACjC6D,UAAU,EAAEpO,WAAY;QACxB4B,cAAc,EAAEA,cAAe;QAC/ByM,cAAc,EAAEzL,WAAW,CAACL,OAAO,CAACoI,YAAY,CAAC;MAAE;QAAAyC,QAAA,EAAAC,YAAA;QAAA3H,UAAA;QAAA4H,YAAA;MAAA,OACpD,CAAC,eAEF/N,OAAA,CAACX,MAAM;QAAAwO,QAAA,EAAAC,YAAA;QAAA3H,UAAA;QAAA4H,YAAA;MAAA,OAAE,CAAC,EAETtN,WAAW,iBACVT,OAAA,CAACV,OAAO;QACNiB,UAAU,EAAEA,UAAW;QACvBY,QAAQ,EAAEA,QAAS;QACnBoB,OAAO,EAAEA,OAAQ;QACjBE,kBAAkB,EAAEA,kBAAmB;QACvCE,cAAc,EAAEA,cAAe;QAC/BoM,kBAAkB,EAAE9C,wBAAyB;QAC7C+C,cAAc,EAAE5C,oBAAqB;QACrC6C,eAAe,EAAEtC,aAAc;QAC/BuC,kBAAkB,EAAGvI,KAAK,IAAK;UAC7BjE,qBAAqB,CAACiE,KAAK,CAAC;UAC5BwF,cAAc,CAACxF,KAAK,CAAC;QACvB,CAAE;QACF1E,SAAS,EAAEA,SAAU;QACrBE,aAAa,EAAEA,aAAc;QAC7BgN,gBAAgB,EAAEvD,cAAe;QACjCwD,cAAc,EAAEvD;MAAa;QAAAgC,QAAA,EAAAC,YAAA;QAAA3H,UAAA;QAAA4H,YAAA;MAAA,OAC9B,CACF;IAAA;MAAAF,QAAA,EAAAC,YAAA;MAAA3H,UAAA;MAAA4H,YAAA;IAAA,OACE;EAAC;IAAAF,QAAA,EAAAC,YAAA;IAAA3H,UAAA;IAAA4H,YAAA;EAAA,OACH,CAAC;AAEV;AAAC7N,EAAA,CAr9BQD,YAAY;EAAA,QAmEUH,eAAe;AAAA;AAAAuP,EAAA,GAnErCpP,YAAY;AAu9BrB,SAASqP,GAAGA,CAAA,EAAG;EACb,oBACEtP,OAAA,CAACH,oBAAoB;IAAA6N,QAAA,eACnB1N,OAAA,CAACC,YAAY;MAAA4N,QAAA,EAAAC,YAAA;MAAA3H,UAAA;MAAA4H,YAAA;IAAA,OAAE;EAAC;IAAAF,QAAA,EAAAC,YAAA;IAAA3H,UAAA;IAAA4H,YAAA;EAAA,OACI,CAAC;AAE3B;AAACwB,GAAA,GANQD,GAAG;AAQZ,eAAeA,GAAG;AAAC,IAAAD,EAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAH,EAAA;AAAAG,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}