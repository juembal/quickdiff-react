{"ast":null,"code":"/**\r\n * Enhanced Language Auto-Detection Utility\r\n * Detects programming language based on content patterns with improved accuracy\r\n */\n\nexport class LanguageDetector {\n  constructor() {\n    this.patterns = {\n      javascript: {\n        strong: [/\\b(const|let|var)\\s+\\w+\\s*=/, /\\b(function|async\\s+function)\\s*\\w*\\s*\\(/, /\\b(React|useState|useEffect|useContext|props)\\b/, /\\b(console\\.(log|error|warn))\\s*\\(/, /\\b(document\\.|window\\.)\\w+/, /\\b(require|import|export)\\s*\\(/, /\\bexport\\s+(default\\s+)?/, /=>\\s*[{(]/, /\\.(js|jsx|ts|tsx)$/i],\n        medium: [/\\b(if|else|for|while|switch|case|break|continue|return)\\b/, /\\b(setTimeout|setInterval|Promise|async|await)\\b/, /\\b(null|undefined|NaN|Infinity)\\b/, /\\/\\/.*$/m, /\\/\\*[\\s\\S]*?\\*\\//, /\\b(true|false)\\b/, /\\$\\{[^}]*\\}/],\n        weak: [/\\b(npm|node|express|axios|webpack)\\b/, /\\.(json|js)\"/]\n      },\n      python: {\n        strong: [/\\bdef\\s+\\w+\\s*\\(/, /\\bclass\\s+\\w+\\s*(\\([^)]*\\))?\\s*:/, /\\bfrom\\s+\\w+\\s+import\\b/, /\\bimport\\s+\\w+/, /\\b(if|elif|else)\\s+.*:/, /\\bfor\\s+\\w+\\s+in\\b/, /\\bwhile\\s+.*:/, /\\b(try|except|finally)\\s*:/, /\\bwith\\s+.*:/, /\\.(py|pyw)$/i],\n        medium: [/\\b(self|__init__|__name__|__main__)\\b/, /\\b(print|input|len|range|enumerate|zip)\\b/, /\\b(True|False|None)\\b/, /\\b(and|or|not|in|is)\\b/, /#.*$/m, /\"\"\"[\\s\\S]*?\"\"\"/, /'''[\\s\\S]*?'''/],\n        weak: [/\\bindent/, /\\bpip\\s+install\\b/]\n      },\n      java: {\n        strong: [/\\bpublic\\s+class\\s+\\w+/, /\\bpublic\\s+static\\s+void\\s+main\\s*\\(/, /\\b(public|private|protected)\\s+(static\\s+)?\\w+\\s+\\w+\\s*\\(/, /\\bSystem\\.out\\.(println|print)\\s*\\(/, /\\b(extends|implements)\\s+\\w+/, /\\.(java)$/i],\n        medium: [/\\b(String|int|double|float|boolean|char|void|Object)\\b/, /\\b(if|else|for|while|switch|case|break|continue|return|try|catch|finally)\\b/, /\\b(public|private|protected|static|final|abstract)\\b/, /\\/\\/.*$/m, /\\/\\*[\\s\\S]*?\\*\\//, /\\bnew\\s+\\w+\\s*\\(/],\n        weak: [/\\bimport\\s+java\\./, /\\bpackage\\s+\\w+/]\n      },\n      html: {\n        strong: [/<!DOCTYPE\\s+html>/i, /<html\\b[^>]*>/i, /<(head|body|div|span|p|a|img|script|style|link|meta)\\b[^>]*>/i, /\\.(html|htm)$/i],\n        medium: [/<\\/?[a-z][\\s\\S]*?>/i, /<!--[\\s\\S]*?-->/, /<\\w+(\\s+\\w+(\\s*=\\s*(\"[^\"]*\"|'[^']*'|[^\\s>]+))?)*\\s*\\/?>/],\n        weak: []\n      },\n      css: {\n        strong: [/[.#]?[\\w-]+\\s*\\{[^}]*\\}/, /@(media|import|keyframes|font-face)\\b/, /\\.(css|scss|sass|less)$/i],\n        medium: [/\\b(color|background|margin|padding|border|width|height|font|display|position|flex|grid)\\s*:/, /#[a-fA-F0-9]{3,8}\\b/, /\\b\\d+(px|em|rem|vh|vw|%|pt|pc|in|cm|mm|ex|ch)\\b/, /\\/\\*[\\s\\S]*?\\*\\//, /rgba?\\([^)]+\\)/],\n        weak: [/\\b(hover|focus|active|visited)\\b/]\n      },\n      json: {\n        strong: [/^\\s*\\{[\\s\\S]*\\}\\s*$/, /^\\s*\\[[\\s\\S]*\\]\\s*$/, /\"[^\"]*\"\\s*:\\s*(\"[^\"]*\"|\\d+|true|false|null|\\{|\\[)/, /\\.(json)$/i],\n        medium: [/^\\s*[{[]/, /\"[^\"]*\"\\s*:/, /:\\s*(true|false|null)\\b/],\n        weak: []\n      },\n      xml: {\n        strong: [/<\\?xml\\s+version/i, /\\.(xml|xsd|xsl|xslt)$/i, /<\\w+(\\s+\\w+\\s*=\\s*\"[^\"]*\")*\\s*\\/?>[\\s\\S]*<\\/\\w+>/],\n        medium: [/<!--[\\s\\S]*?-->/, /<\\/\\w+>/],\n        weak: []\n      },\n      markdown: {\n        strong: [/^#{1,6}\\s+.+$/m, /```[\\w]*\\n[\\s\\S]*?\\n```/, /\\.(md|markdown)$/i, /\\[([^\\]]+)\\]\\(([^)]+)\\)/],\n        medium: [/^\\s*[-*+]\\s+/m, /^\\s*\\d+\\.\\s+/m, /\\*\\*[^*\\n]+\\*\\*/, /\\*[^*\\n]+\\*/, /`[^`\\n]+`/, /^\\s*>\\s+/m],\n        weak: [/\\n\\s*\\n/, /^\\s*---+\\s*$/m]\n      },\n      sql: {\n        strong: [/\\b(SELECT\\s+.*\\s+FROM|INSERT\\s+INTO|UPDATE\\s+.*\\s+SET|DELETE\\s+FROM)\\b/i, /\\b(CREATE\\s+(TABLE|DATABASE|INDEX)|DROP\\s+(TABLE|DATABASE|INDEX)|ALTER\\s+TABLE)\\b/i, /\\.(sql)$/i],\n        medium: [/\\b(JOIN|INNER|LEFT|RIGHT|OUTER|ON|GROUP\\s+BY|ORDER\\s+BY|HAVING|WHERE)\\b/i, /--.*$/m, /\\/\\*[\\s\\S]*?\\*\\//],\n        weak: [/\\b(COUNT|SUM|AVG|MIN|MAX)\\s*\\(/i]\n      },\n      php: {\n        strong: [/<\\?php\\b/, /\\.(php|phtml)$/i, /\\$\\w+\\s*=/, /\\bfunction\\s+\\w+\\s*\\([^)]*\\)\\s*\\{/],\n        medium: [/\\b(echo|print|var_dump|isset|empty|array)\\b/, /\\$(this|_GET|_POST|_SESSION|_COOKIE)\\b/, /\\/\\/.*$|#.*$/m, /\\/\\*[\\s\\S]*?\\*\\//],\n        weak: [/\\b(public|private|protected|class|extends)\\b/]\n      },\n      c: {\n        strong: [/#include\\s*<[^>]+\\.h>/, /\\bint\\s+main\\s*\\([^)]*\\)\\s*\\{/, /\\.(c|h)$/i, /\\b(printf|scanf|malloc|free)\\s*\\(/],\n        medium: [/\\b(int|char|float|double|void|struct|typedef|enum)\\b/, /\\bsizeof\\s*\\(/, /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*$/m, /\\b(if|else|for|while|switch|case|break|continue|return)\\b/],\n        weak: [/\\b(stdio|stdlib|string)\\.h\\b/]\n      },\n      cpp: {\n        strong: [/\\.(cpp|cxx|cc|hpp|hxx)$/i, /#include\\s*<[^>]+>/, /\\b(std::|cout|cin|endl|vector|string|namespace\\s+std)\\b/, /\\bclass\\s+\\w+\\s*\\{/],\n        medium: [/\\b(public|private|protected):\\s*$/m, /\\b(int|char|float|double|void|bool|auto)\\b/, /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*$/m, /\\bnew\\s+\\w+/, /\\bdelete\\s+/],\n        weak: [/\\b(iostream|vector|string|algorithm)\\b/]\n      },\n      csharp: {\n        strong: [/\\.(cs)$/i, /\\bnamespace\\s+\\w+/, /\\busing\\s+System\\b/, /\\bConsole\\.(WriteLine|Write)\\s*\\(/],\n        medium: [/\\b(public|private|protected|internal|static)\\s+(class|void|string|int|bool)\\b/, /\\/\\/.*$/m, /\\/\\*[\\s\\S]*?\\*\\//],\n        weak: [/\\bvar\\s+\\w+\\s*=/]\n      },\n      ruby: {\n        strong: [/\\.(rb)$/i, /\\bdef\\s+\\w+.*\\bend\\b/s, /\\bclass\\s+\\w+.*\\bend\\b/s, /\\b(puts|print|p)\\s/],\n        medium: [/\\b(if|elsif|else|unless|case|when|for|while|until|do|begin|rescue|ensure|end)\\b/, /#.*$/m, /\\b(true|false|nil)\\b/, /\\b(require|include|extend)\\b/],\n        weak: [/\\|\\w+\\|/, /@\\w+/]\n      },\n      go: {\n        strong: [/\\.(go)$/i, /\\bpackage\\s+\\w+/, /\\bfunc\\s+\\w+\\s*\\(/, /\\bfmt\\.(Print|Println|Printf)\\s*\\(/],\n        medium: [/\\b(import|var|const|type|struct|interface|map|chan)\\b/, /\\/\\/.*$/m, /\\/\\*[\\s\\S]*?\\*\\//, /:=\\s*/],\n        weak: [/\\bgo\\s+\\w+\\(/]\n      },\n      rust: {\n        strong: [/\\.(rs)$/i, /\\bfn\\s+\\w+\\s*\\(/, /\\b(println!|print!|panic!|vec!)\\s*!/, /\\buse\\s+std::/],\n        medium: [/\\b(let|mut|const|struct|enum|impl|trait|mod|pub|crate)\\b/, /\\/\\/.*$/m, /\\/\\*[\\s\\S]*?\\*\\//, /&\\w+/, /->\\s*\\w+/],\n        weak: [/\\bCargo\\./]\n      },\n      yaml: {\n        strong: [/\\.(yml|yaml)$/i, /^[\\s]*[\\w-]+\\s*:\\s*[\\w\\s-]+$/m, /^[\\s]*-\\s+[\\w-]+:/m],\n        medium: [/^[\\s]*-\\s+/m, /#.*$/m, /^\\s*\\|\\s*$/m, /^\\s*>\\s*$/m],\n        weak: []\n      },\n      dockerfile: {\n        strong: [/^FROM\\s+\\w+/m, /\\b(RUN|COPY|ADD|WORKDIR|EXPOSE|CMD|ENTRYPOINT)\\s+/m, /\\.(dockerfile|Dockerfile)$/i],\n        medium: [/\\b(ENV|ARG|LABEL|USER|VOLUME)\\s+/m],\n        weak: []\n      },\n      shell: {\n        strong: [/^#!/, /\\.(sh|bash|zsh|fish)$/i, /\\b(echo|cd|ls|grep|awk|sed|cat|chmod|chown|mkdir|rm|mv|cp)\\s+/],\n        medium: [/#.*$/m, /\\$\\{?\\w+\\}?/, /\\|\\s*\\w+/, /&&|\\|\\|/],\n        weak: [/\\bexport\\s+\\w+=/]\n      }\n    };\n    this.fileExtensions = {\n      js: 'javascript',\n      jsx: 'javascript',\n      ts: 'javascript',\n      tsx: 'javascript',\n      mjs: 'javascript',\n      py: 'python',\n      pyw: 'python',\n      pyi: 'python',\n      java: 'java',\n      class: 'java',\n      html: 'html',\n      htm: 'html',\n      xhtml: 'html',\n      css: 'css',\n      scss: 'css',\n      sass: 'css',\n      less: 'css',\n      stylus: 'css',\n      json: 'json',\n      jsonc: 'json',\n      xml: 'xml',\n      xsd: 'xml',\n      xsl: 'xml',\n      xslt: 'xml',\n      svg: 'xml',\n      md: 'markdown',\n      markdown: 'markdown',\n      mdown: 'markdown',\n      mkd: 'markdown',\n      sql: 'sql',\n      mysql: 'sql',\n      pgsql: 'sql',\n      sqlite: 'sql',\n      php: 'php',\n      phtml: 'php',\n      php3: 'php',\n      php4: 'php',\n      php5: 'php',\n      c: 'c',\n      h: 'c',\n      cpp: 'cpp',\n      cxx: 'cpp',\n      cc: 'cpp',\n      hpp: 'cpp',\n      hxx: 'cpp',\n      hh: 'cpp',\n      cs: 'csharp',\n      csx: 'csharp',\n      rb: 'ruby',\n      rbw: 'ruby',\n      rake: 'ruby',\n      gemspec: 'ruby',\n      go: 'go',\n      mod: 'go',\n      rs: 'rust',\n      rlib: 'rust',\n      yml: 'yaml',\n      yaml: 'yaml',\n      sh: 'shell',\n      bash: 'shell',\n      zsh: 'shell',\n      fish: 'shell',\n      ksh: 'shell',\n      dockerfile: 'dockerfile'\n    };\n\n    // Scoring weights\n    this.weights = {\n      strong: 10,\n      medium: 3,\n      weak: 1,\n      filename: 15\n    };\n  }\n\n  /**\r\n   * Detect language from filename with improved extension handling\r\n   */\n  detectFromFilename(filename) {\n    var _filename$split$pop;\n    if (!filename) return null;\n\n    // Handle special cases\n    if (/^Dockerfile$/i.test(filename) || /\\.dockerfile$/i.test(filename)) {\n      return 'dockerfile';\n    }\n    if (/^Makefile$/i.test(filename) || /\\.mk$/i.test(filename)) {\n      return 'shell';\n    }\n    const extension = (_filename$split$pop = filename.split('.').pop()) === null || _filename$split$pop === void 0 ? void 0 : _filename$split$pop.toLowerCase();\n    return this.fileExtensions[extension] || null;\n  }\n\n  /**\r\n   * Enhanced content detection with weighted scoring\r\n   */\n  detectFromContent(content) {\n    if (!content || content.trim().length === 0) return 'plaintext';\n    const scores = {};\n    const contentLines = content.split('\\n');\n    const sampleSize = Math.min(50, contentLines.length); // Analyze first 50 lines for efficiency\n    const sampleContent = contentLines.slice(0, sampleSize).join('\\n');\n\n    // Initialize scores\n    Object.keys(this.patterns).forEach(lang => {\n      scores[lang] = 0;\n    });\n\n    // Score each language\n    Object.entries(this.patterns).forEach(([language, categories]) => {\n      Object.entries(categories).forEach(([category, patterns]) => {\n        const weight = this.weights[category];\n        patterns.forEach(pattern => {\n          const matches = sampleContent.match(new RegExp(pattern.source, pattern.flags + 'g'));\n          if (matches) {\n            let matchScore = Math.min(matches.length, 5) * weight; // Cap matches per pattern\n\n            // Bonus for early matches (first 10 lines are more significant)\n            const earlyContent = contentLines.slice(0, 10).join('\\n');\n            const earlyMatches = earlyContent.match(new RegExp(pattern.source, pattern.flags + 'g'));\n            if (earlyMatches) {\n              matchScore += earlyMatches.length * weight * 0.5;\n            }\n            scores[language] += matchScore;\n          }\n        });\n      });\n    });\n\n    // Apply penalties for conflicting patterns\n    this.applyConflictPenalties(scores, sampleContent);\n\n    // Find best match\n    const sortedLanguages = Object.entries(scores).sort(([, a], [, b]) => b - a).filter(([, score]) => score > 0);\n    if (sortedLanguages.length === 0) {\n      return 'plaintext';\n    }\n    const [topLanguage, topScore] = sortedLanguages[0];\n    const [, secondScore] = sortedLanguages[1] || [null, 0];\n\n    // Require minimum confidence\n    const minScore = 8; // Adjusted minimum score\n    const confidenceRatio = secondScore > 0 ? topScore / secondScore : Infinity;\n    if (topScore < minScore || confidenceRatio < 1.5 && topScore < 20) {\n      return 'plaintext';\n    }\n    return topLanguage;\n  }\n\n  /**\r\n   * Apply penalties for conflicting language indicators\r\n   */\n  applyConflictPenalties(scores, content) {\n    // HTML vs XML conflict resolution\n    if (scores.html > 0 && scores.xml > 0) {\n      if (content.includes('<!DOCTYPE html') || content.includes('<html')) {\n        scores.xml *= 0.3;\n      } else if (content.includes('<?xml')) {\n        scores.html *= 0.3;\n      }\n    }\n\n    // JavaScript vs JSON conflict\n    if (scores.javascript > 0 && scores.json > 0) {\n      if (content.includes('function') || content.includes('var ') || content.includes('let ') || content.includes('const ')) {\n        scores.json *= 0.1;\n      }\n    }\n\n    // C vs C++ conflict\n    if (scores.c > 0 && scores.cpp > 0) {\n      if (content.includes('std::') || content.includes('#include <iostream>') || content.includes('class ')) {\n        scores.c *= 0.3;\n      } else if (!content.includes('std::') && !content.includes('class ') && !content.includes('namespace')) {\n        scores.cpp *= 0.5;\n      }\n    }\n\n    // Shell vs other languages\n    if (scores.shell > 0) {\n      const hasShebang = content.startsWith('#!');\n      if (!hasShebang && (scores.python > 0 || scores.ruby > 0)) {\n        scores.shell *= 0.4;\n      }\n    }\n  }\n\n  /**\r\n   * Calculate confidence level based on score and patterns\r\n   */\n  calculateConfidence(language, score, content) {\n    var _patterns$strong;\n    if (language === 'plaintext') return 'low';\n    const patterns = this.patterns[language];\n    if (!patterns) return 'low';\n    const strongMatches = ((_patterns$strong = patterns.strong) === null || _patterns$strong === void 0 ? void 0 : _patterns$strong.filter(pattern => content.match(pattern)).length) || 0;\n    if (strongMatches >= 2 && score >= 25) return 'high';\n    if (strongMatches >= 1 && score >= 15) return 'medium';\n    if (score >= 8) return 'low';\n    return 'very-low';\n  }\n\n  /**\r\n   * Enhanced auto-detection with improved logic\r\n   */\n  autoDetect(content, filename = null) {\n    // Filename detection with high confidence\n    const filenameLanguage = this.detectFromFilename(filename);\n    if (filenameLanguage) {\n      // Verify filename detection with content if available\n      if (content && content.trim().length > 0) {\n        const contentLanguage = this.detectFromContent(content);\n\n        // If content strongly suggests a different language, use content detection\n        if (contentLanguage !== 'plaintext' && contentLanguage !== filenameLanguage) {\n          const contentScore = this.getLanguageScore(content, contentLanguage);\n          const filenameScore = this.getLanguageScore(content, filenameLanguage);\n          if (contentScore > filenameScore * 1.5) {\n            return {\n              language: contentLanguage,\n              confidence: this.calculateConfidence(contentLanguage, contentScore, content),\n              method: 'content-override',\n              alternateDetection: filenameLanguage\n            };\n          }\n        }\n      }\n      return {\n        language: filenameLanguage,\n        confidence: 'high',\n        method: 'filename'\n      };\n    }\n\n    // Content-only detection\n    const contentLanguage = this.detectFromContent(content);\n    const score = this.getLanguageScore(content, contentLanguage);\n    return {\n      language: contentLanguage,\n      confidence: this.calculateConfidence(contentLanguage, score, content),\n      method: 'content'\n    };\n  }\n\n  /**\r\n   * Get score for a specific language\r\n   */\n  getLanguageScore(content, language) {\n    if (!this.patterns[language]) return 0;\n    let score = 0;\n    Object.entries(this.patterns[language]).forEach(([category, patterns]) => {\n      const weight = this.weights[category];\n      patterns.forEach(pattern => {\n        const matches = content.match(new RegExp(pattern.source, pattern.flags + 'g'));\n        if (matches) {\n          score += Math.min(matches.length, 5) * weight;\n        }\n      });\n    });\n    return score;\n  }\n\n  /**\r\n   * Get detailed detection results for debugging\r\n   */\n  getDetectionDetails(content, filename = null) {\n    const results = this.autoDetect(content, filename);\n    const scores = {};\n\n    // Calculate scores for all languages\n    Object.keys(this.patterns).forEach(lang => {\n      scores[lang] = this.getLanguageScore(content, lang);\n    });\n    const sortedScores = Object.entries(scores).sort(([, a], [, b]) => b - a).slice(0, 5);\n    return {\n      ...results,\n      topScores: sortedScores,\n      totalPatterns: Object.keys(this.patterns).length,\n      contentLength: (content === null || content === void 0 ? void 0 : content.length) || 0\n    };\n  }\n\n  /**\r\n   * Get all supported languages\r\n   */\n  getSupportedLanguages() {\n    return ['plaintext', ...Object.keys(this.patterns).sort()];\n  }\n\n  /**\r\n   * Check if a language is supported\r\n   */\n  isLanguageSupported(language) {\n    return language === 'plaintext' || this.patterns.hasOwnProperty(language);\n  }\n}\nexport default LanguageDetector;","map":{"version":3,"names":["LanguageDetector","constructor","patterns","javascript","strong","medium","weak","python","java","html","css","json","xml","markdown","sql","php","c","cpp","csharp","ruby","go","rust","yaml","dockerfile","shell","fileExtensions","js","jsx","ts","tsx","mjs","py","pyw","pyi","class","htm","xhtml","scss","sass","less","stylus","jsonc","xsd","xsl","xslt","svg","md","mdown","mkd","mysql","pgsql","sqlite","phtml","php3","php4","php5","h","cxx","cc","hpp","hxx","hh","cs","csx","rb","rbw","rake","gemspec","mod","rs","rlib","yml","sh","bash","zsh","fish","ksh","weights","filename","detectFromFilename","_filename$split$pop","test","extension","split","pop","toLowerCase","detectFromContent","content","trim","length","scores","contentLines","sampleSize","Math","min","sampleContent","slice","join","Object","keys","forEach","lang","entries","language","categories","category","weight","pattern","matches","match","RegExp","source","flags","matchScore","earlyContent","earlyMatches","applyConflictPenalties","sortedLanguages","sort","a","b","filter","score","topLanguage","topScore","secondScore","minScore","confidenceRatio","Infinity","includes","hasShebang","startsWith","calculateConfidence","_patterns$strong","strongMatches","autoDetect","filenameLanguage","contentLanguage","contentScore","getLanguageScore","filenameScore","confidence","method","alternateDetection","getDetectionDetails","results","sortedScores","topScores","totalPatterns","contentLength","getSupportedLanguages","isLanguageSupported","hasOwnProperty"],"sources":["C:/Users/Joem/quickdiff-react/src/utils/LanguageDetector.js"],"sourcesContent":["/**\r\n * Enhanced Language Auto-Detection Utility\r\n * Detects programming language based on content patterns with improved accuracy\r\n */\r\n\r\nexport class LanguageDetector {\r\n  constructor() {\r\n    this.patterns = {\r\n      javascript: {\r\n        strong: [\r\n          /\\b(const|let|var)\\s+\\w+\\s*=/,\r\n          /\\b(function|async\\s+function)\\s*\\w*\\s*\\(/,\r\n          /\\b(React|useState|useEffect|useContext|props)\\b/,\r\n          /\\b(console\\.(log|error|warn))\\s*\\(/,\r\n          /\\b(document\\.|window\\.)\\w+/,\r\n          /\\b(require|import|export)\\s*\\(/,\r\n          /\\bexport\\s+(default\\s+)?/,\r\n          /=>\\s*[{(]/,\r\n          /\\.(js|jsx|ts|tsx)$/i\r\n        ],\r\n        medium: [\r\n          /\\b(if|else|for|while|switch|case|break|continue|return)\\b/,\r\n          /\\b(setTimeout|setInterval|Promise|async|await)\\b/,\r\n          /\\b(null|undefined|NaN|Infinity)\\b/,\r\n          /\\/\\/.*$/m,\r\n          /\\/\\*[\\s\\S]*?\\*\\//,\r\n          /\\b(true|false)\\b/,\r\n          /\\$\\{[^}]*\\}/\r\n        ],\r\n        weak: [\r\n          /\\b(npm|node|express|axios|webpack)\\b/,\r\n          /\\.(json|js)\"/\r\n        ]\r\n      },\r\n      python: {\r\n        strong: [\r\n          /\\bdef\\s+\\w+\\s*\\(/,\r\n          /\\bclass\\s+\\w+\\s*(\\([^)]*\\))?\\s*:/,\r\n          /\\bfrom\\s+\\w+\\s+import\\b/,\r\n          /\\bimport\\s+\\w+/,\r\n          /\\b(if|elif|else)\\s+.*:/,\r\n          /\\bfor\\s+\\w+\\s+in\\b/,\r\n          /\\bwhile\\s+.*:/,\r\n          /\\b(try|except|finally)\\s*:/,\r\n          /\\bwith\\s+.*:/,\r\n          /\\.(py|pyw)$/i\r\n        ],\r\n        medium: [\r\n          /\\b(self|__init__|__name__|__main__)\\b/,\r\n          /\\b(print|input|len|range|enumerate|zip)\\b/,\r\n          /\\b(True|False|None)\\b/,\r\n          /\\b(and|or|not|in|is)\\b/,\r\n          /#.*$/m,\r\n          /\"\"\"[\\s\\S]*?\"\"\"/,\r\n          /'''[\\s\\S]*?'''/\r\n        ],\r\n        weak: [\r\n          /\\bindent/,\r\n          /\\bpip\\s+install\\b/\r\n        ]\r\n      },\r\n      java: {\r\n        strong: [\r\n          /\\bpublic\\s+class\\s+\\w+/,\r\n          /\\bpublic\\s+static\\s+void\\s+main\\s*\\(/,\r\n          /\\b(public|private|protected)\\s+(static\\s+)?\\w+\\s+\\w+\\s*\\(/,\r\n          /\\bSystem\\.out\\.(println|print)\\s*\\(/,\r\n          /\\b(extends|implements)\\s+\\w+/,\r\n          /\\.(java)$/i\r\n        ],\r\n        medium: [\r\n          /\\b(String|int|double|float|boolean|char|void|Object)\\b/,\r\n          /\\b(if|else|for|while|switch|case|break|continue|return|try|catch|finally)\\b/,\r\n          /\\b(public|private|protected|static|final|abstract)\\b/,\r\n          /\\/\\/.*$/m,\r\n          /\\/\\*[\\s\\S]*?\\*\\//,\r\n          /\\bnew\\s+\\w+\\s*\\(/\r\n        ],\r\n        weak: [\r\n          /\\bimport\\s+java\\./,\r\n          /\\bpackage\\s+\\w+/\r\n        ]\r\n      },\r\n      html: {\r\n        strong: [\r\n          /<!DOCTYPE\\s+html>/i,\r\n          /<html\\b[^>]*>/i,\r\n          /<(head|body|div|span|p|a|img|script|style|link|meta)\\b[^>]*>/i,\r\n          /\\.(html|htm)$/i\r\n        ],\r\n        medium: [\r\n          /<\\/?[a-z][\\s\\S]*?>/i,\r\n          /<!--[\\s\\S]*?-->/,\r\n          /<\\w+(\\s+\\w+(\\s*=\\s*(\"[^\"]*\"|'[^']*'|[^\\s>]+))?)*\\s*\\/?>/\r\n        ],\r\n        weak: []\r\n      },\r\n      css: {\r\n        strong: [\r\n          /[.#]?[\\w-]+\\s*\\{[^}]*\\}/,\r\n          /@(media|import|keyframes|font-face)\\b/,\r\n          /\\.(css|scss|sass|less)$/i\r\n        ],\r\n        medium: [\r\n          /\\b(color|background|margin|padding|border|width|height|font|display|position|flex|grid)\\s*:/,\r\n          /#[a-fA-F0-9]{3,8}\\b/,\r\n          /\\b\\d+(px|em|rem|vh|vw|%|pt|pc|in|cm|mm|ex|ch)\\b/,\r\n          /\\/\\*[\\s\\S]*?\\*\\//,\r\n          /rgba?\\([^)]+\\)/\r\n        ],\r\n        weak: [\r\n          /\\b(hover|focus|active|visited)\\b/\r\n        ]\r\n      },\r\n      json: {\r\n        strong: [\r\n          /^\\s*\\{[\\s\\S]*\\}\\s*$/,\r\n          /^\\s*\\[[\\s\\S]*\\]\\s*$/,\r\n          /\"[^\"]*\"\\s*:\\s*(\"[^\"]*\"|\\d+|true|false|null|\\{|\\[)/,\r\n          /\\.(json)$/i\r\n        ],\r\n        medium: [\r\n          /^\\s*[{[]/,\r\n          /\"[^\"]*\"\\s*:/,\r\n          /:\\s*(true|false|null)\\b/\r\n        ],\r\n        weak: []\r\n      },\r\n      xml: {\r\n        strong: [\r\n          /<\\?xml\\s+version/i,\r\n          /\\.(xml|xsd|xsl|xslt)$/i,\r\n          /<\\w+(\\s+\\w+\\s*=\\s*\"[^\"]*\")*\\s*\\/?>[\\s\\S]*<\\/\\w+>/\r\n        ],\r\n        medium: [\r\n          /<!--[\\s\\S]*?-->/,\r\n          /<\\/\\w+>/\r\n        ],\r\n        weak: []\r\n      },\r\n      markdown: {\r\n        strong: [\r\n          /^#{1,6}\\s+.+$/m,\r\n          /```[\\w]*\\n[\\s\\S]*?\\n```/,\r\n          /\\.(md|markdown)$/i,\r\n          /\\[([^\\]]+)\\]\\(([^)]+)\\)/\r\n        ],\r\n        medium: [\r\n          /^\\s*[-*+]\\s+/m,\r\n          /^\\s*\\d+\\.\\s+/m,\r\n          /\\*\\*[^*\\n]+\\*\\*/,\r\n          /\\*[^*\\n]+\\*/,\r\n          /`[^`\\n]+`/,\r\n          /^\\s*>\\s+/m\r\n        ],\r\n        weak: [\r\n          /\\n\\s*\\n/,\r\n          /^\\s*---+\\s*$/m\r\n        ]\r\n      },\r\n      sql: {\r\n        strong: [\r\n          /\\b(SELECT\\s+.*\\s+FROM|INSERT\\s+INTO|UPDATE\\s+.*\\s+SET|DELETE\\s+FROM)\\b/i,\r\n          /\\b(CREATE\\s+(TABLE|DATABASE|INDEX)|DROP\\s+(TABLE|DATABASE|INDEX)|ALTER\\s+TABLE)\\b/i,\r\n          /\\.(sql)$/i\r\n        ],\r\n        medium: [\r\n          /\\b(JOIN|INNER|LEFT|RIGHT|OUTER|ON|GROUP\\s+BY|ORDER\\s+BY|HAVING|WHERE)\\b/i,\r\n          /--.*$/m,\r\n          /\\/\\*[\\s\\S]*?\\*\\//\r\n        ],\r\n        weak: [\r\n          /\\b(COUNT|SUM|AVG|MIN|MAX)\\s*\\(/i\r\n        ]\r\n      },\r\n      php: {\r\n        strong: [\r\n          /<\\?php\\b/,\r\n          /\\.(php|phtml)$/i,\r\n          /\\$\\w+\\s*=/,\r\n          /\\bfunction\\s+\\w+\\s*\\([^)]*\\)\\s*\\{/\r\n        ],\r\n        medium: [\r\n          /\\b(echo|print|var_dump|isset|empty|array)\\b/,\r\n          /\\$(this|_GET|_POST|_SESSION|_COOKIE)\\b/,\r\n          /\\/\\/.*$|#.*$/m,\r\n          /\\/\\*[\\s\\S]*?\\*\\//\r\n        ],\r\n        weak: [\r\n          /\\b(public|private|protected|class|extends)\\b/\r\n        ]\r\n      },\r\n      c: {\r\n        strong: [\r\n          /#include\\s*<[^>]+\\.h>/,\r\n          /\\bint\\s+main\\s*\\([^)]*\\)\\s*\\{/,\r\n          /\\.(c|h)$/i,\r\n          /\\b(printf|scanf|malloc|free)\\s*\\(/\r\n        ],\r\n        medium: [\r\n          /\\b(int|char|float|double|void|struct|typedef|enum)\\b/,\r\n          /\\bsizeof\\s*\\(/,\r\n          /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*$/m,\r\n          /\\b(if|else|for|while|switch|case|break|continue|return)\\b/\r\n        ],\r\n        weak: [\r\n          /\\b(stdio|stdlib|string)\\.h\\b/\r\n        ]\r\n      },\r\n      cpp: {\r\n        strong: [\r\n          /\\.(cpp|cxx|cc|hpp|hxx)$/i,\r\n          /#include\\s*<[^>]+>/,\r\n          /\\b(std::|cout|cin|endl|vector|string|namespace\\s+std)\\b/,\r\n          /\\bclass\\s+\\w+\\s*\\{/\r\n        ],\r\n        medium: [\r\n          /\\b(public|private|protected):\\s*$/m,\r\n          /\\b(int|char|float|double|void|bool|auto)\\b/,\r\n          /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*$/m,\r\n          /\\bnew\\s+\\w+/,\r\n          /\\bdelete\\s+/\r\n        ],\r\n        weak: [\r\n          /\\b(iostream|vector|string|algorithm)\\b/\r\n        ]\r\n      },\r\n      csharp: {\r\n        strong: [\r\n          /\\.(cs)$/i,\r\n          /\\bnamespace\\s+\\w+/,\r\n          /\\busing\\s+System\\b/,\r\n          /\\bConsole\\.(WriteLine|Write)\\s*\\(/\r\n        ],\r\n        medium: [\r\n          /\\b(public|private|protected|internal|static)\\s+(class|void|string|int|bool)\\b/,\r\n          /\\/\\/.*$/m,\r\n          /\\/\\*[\\s\\S]*?\\*\\//\r\n        ],\r\n        weak: [\r\n          /\\bvar\\s+\\w+\\s*=/\r\n        ]\r\n      },\r\n      ruby: {\r\n        strong: [\r\n          /\\.(rb)$/i,\r\n          /\\bdef\\s+\\w+.*\\bend\\b/s,\r\n          /\\bclass\\s+\\w+.*\\bend\\b/s,\r\n          /\\b(puts|print|p)\\s/\r\n        ],\r\n        medium: [\r\n          /\\b(if|elsif|else|unless|case|when|for|while|until|do|begin|rescue|ensure|end)\\b/,\r\n          /#.*$/m,\r\n          /\\b(true|false|nil)\\b/,\r\n          /\\b(require|include|extend)\\b/\r\n        ],\r\n        weak: [\r\n          /\\|\\w+\\|/,\r\n          /@\\w+/\r\n        ]\r\n      },\r\n      go: {\r\n        strong: [\r\n          /\\.(go)$/i,\r\n          /\\bpackage\\s+\\w+/,\r\n          /\\bfunc\\s+\\w+\\s*\\(/,\r\n          /\\bfmt\\.(Print|Println|Printf)\\s*\\(/\r\n        ],\r\n        medium: [\r\n          /\\b(import|var|const|type|struct|interface|map|chan)\\b/,\r\n          /\\/\\/.*$/m,\r\n          /\\/\\*[\\s\\S]*?\\*\\//,\r\n          /:=\\s*/\r\n        ],\r\n        weak: [\r\n          /\\bgo\\s+\\w+\\(/\r\n        ]\r\n      },\r\n      rust: {\r\n        strong: [\r\n          /\\.(rs)$/i,\r\n          /\\bfn\\s+\\w+\\s*\\(/,\r\n          /\\b(println!|print!|panic!|vec!)\\s*!/,\r\n          /\\buse\\s+std::/\r\n        ],\r\n        medium: [\r\n          /\\b(let|mut|const|struct|enum|impl|trait|mod|pub|crate)\\b/,\r\n          /\\/\\/.*$/m,\r\n          /\\/\\*[\\s\\S]*?\\*\\//,\r\n          /&\\w+/,\r\n          /->\\s*\\w+/\r\n        ],\r\n        weak: [\r\n          /\\bCargo\\./\r\n        ]\r\n      },\r\n      yaml: {\r\n        strong: [\r\n          /\\.(yml|yaml)$/i,\r\n          /^[\\s]*[\\w-]+\\s*:\\s*[\\w\\s-]+$/m,\r\n          /^[\\s]*-\\s+[\\w-]+:/m\r\n        ],\r\n        medium: [\r\n          /^[\\s]*-\\s+/m,\r\n          /#.*$/m,\r\n          /^\\s*\\|\\s*$/m,\r\n          /^\\s*>\\s*$/m\r\n        ],\r\n        weak: []\r\n      },\r\n      dockerfile: {\r\n        strong: [\r\n          /^FROM\\s+\\w+/m,\r\n          /\\b(RUN|COPY|ADD|WORKDIR|EXPOSE|CMD|ENTRYPOINT)\\s+/m,\r\n          /\\.(dockerfile|Dockerfile)$/i\r\n        ],\r\n        medium: [\r\n          /\\b(ENV|ARG|LABEL|USER|VOLUME)\\s+/m\r\n        ],\r\n        weak: []\r\n      },\r\n      shell: {\r\n        strong: [\r\n          /^#!/,\r\n          /\\.(sh|bash|zsh|fish)$/i,\r\n          /\\b(echo|cd|ls|grep|awk|sed|cat|chmod|chown|mkdir|rm|mv|cp)\\s+/\r\n        ],\r\n        medium: [\r\n          /#.*$/m,\r\n          /\\$\\{?\\w+\\}?/,\r\n          /\\|\\s*\\w+/,\r\n          /&&|\\|\\|/\r\n        ],\r\n        weak: [\r\n          /\\bexport\\s+\\w+=/\r\n        ]\r\n      }\r\n    };\r\n\r\n    this.fileExtensions = {\r\n      js: 'javascript', jsx: 'javascript', ts: 'javascript', tsx: 'javascript', mjs: 'javascript',\r\n      py: 'python', pyw: 'python', pyi: 'python',\r\n      java: 'java', class: 'java',\r\n      html: 'html', htm: 'html', xhtml: 'html',\r\n      css: 'css', scss: 'css', sass: 'css', less: 'css', stylus: 'css',\r\n      json: 'json', jsonc: 'json',\r\n      xml: 'xml', xsd: 'xml', xsl: 'xml', xslt: 'xml', svg: 'xml',\r\n      md: 'markdown', markdown: 'markdown', mdown: 'markdown', mkd: 'markdown',\r\n      sql: 'sql', mysql: 'sql', pgsql: 'sql', sqlite: 'sql',\r\n      php: 'php', phtml: 'php', php3: 'php', php4: 'php', php5: 'php',\r\n      c: 'c', h: 'c',\r\n      cpp: 'cpp', cxx: 'cpp', cc: 'cpp', hpp: 'cpp', hxx: 'cpp', hh: 'cpp',\r\n      cs: 'csharp', csx: 'csharp',\r\n      rb: 'ruby', rbw: 'ruby', rake: 'ruby', gemspec: 'ruby',\r\n      go: 'go', mod: 'go',\r\n      rs: 'rust', rlib: 'rust',\r\n      yml: 'yaml', yaml: 'yaml',\r\n      sh: 'shell', bash: 'shell', zsh: 'shell', fish: 'shell', ksh: 'shell',\r\n      dockerfile: 'dockerfile'\r\n    };\r\n\r\n    // Scoring weights\r\n    this.weights = {\r\n      strong: 10,\r\n      medium: 3,\r\n      weak: 1,\r\n      filename: 15\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Detect language from filename with improved extension handling\r\n   */\r\n  detectFromFilename(filename) {\r\n    if (!filename) return null;\r\n    \r\n    // Handle special cases\r\n    if (/^Dockerfile$/i.test(filename) || /\\.dockerfile$/i.test(filename)) {\r\n      return 'dockerfile';\r\n    }\r\n    \r\n    if (/^Makefile$/i.test(filename) || /\\.mk$/i.test(filename)) {\r\n      return 'shell';\r\n    }\r\n\r\n    const extension = filename.split('.').pop()?.toLowerCase();\r\n    return this.fileExtensions[extension] || null;\r\n  }\r\n\r\n  /**\r\n   * Enhanced content detection with weighted scoring\r\n   */\r\n  detectFromContent(content) {\r\n    if (!content || content.trim().length === 0) return 'plaintext';\r\n\r\n    const scores = {};\r\n    const contentLines = content.split('\\n');\r\n    const sampleSize = Math.min(50, contentLines.length); // Analyze first 50 lines for efficiency\r\n    const sampleContent = contentLines.slice(0, sampleSize).join('\\n');\r\n    \r\n    // Initialize scores\r\n    Object.keys(this.patterns).forEach(lang => {\r\n      scores[lang] = 0;\r\n    });\r\n\r\n    // Score each language\r\n    Object.entries(this.patterns).forEach(([language, categories]) => {\r\n      Object.entries(categories).forEach(([category, patterns]) => {\r\n        const weight = this.weights[category];\r\n        \r\n        patterns.forEach(pattern => {\r\n          const matches = sampleContent.match(new RegExp(pattern.source, pattern.flags + 'g'));\r\n          if (matches) {\r\n            let matchScore = Math.min(matches.length, 5) * weight; // Cap matches per pattern\r\n            \r\n            // Bonus for early matches (first 10 lines are more significant)\r\n            const earlyContent = contentLines.slice(0, 10).join('\\n');\r\n            const earlyMatches = earlyContent.match(new RegExp(pattern.source, pattern.flags + 'g'));\r\n            if (earlyMatches) {\r\n              matchScore += earlyMatches.length * weight * 0.5;\r\n            }\r\n            \r\n            scores[language] += matchScore;\r\n          }\r\n        });\r\n      });\r\n    });\r\n\r\n    // Apply penalties for conflicting patterns\r\n    this.applyConflictPenalties(scores, sampleContent);\r\n\r\n    // Find best match\r\n    const sortedLanguages = Object.entries(scores)\r\n      .sort(([,a], [,b]) => b - a)\r\n      .filter(([,score]) => score > 0);\r\n\r\n    if (sortedLanguages.length === 0) {\r\n      return 'plaintext';\r\n    }\r\n\r\n    const [topLanguage, topScore] = sortedLanguages[0];\r\n    const [, secondScore] = sortedLanguages[1] || [null, 0];\r\n    \r\n    // Require minimum confidence\r\n    const minScore = 8; // Adjusted minimum score\r\n    const confidenceRatio = secondScore > 0 ? topScore / secondScore : Infinity;\r\n    \r\n    if (topScore < minScore || (confidenceRatio < 1.5 && topScore < 20)) {\r\n      return 'plaintext';\r\n    }\r\n\r\n    return topLanguage;\r\n  }\r\n\r\n  /**\r\n   * Apply penalties for conflicting language indicators\r\n   */\r\n  applyConflictPenalties(scores, content) {\r\n    // HTML vs XML conflict resolution\r\n    if (scores.html > 0 && scores.xml > 0) {\r\n      if (content.includes('<!DOCTYPE html') || content.includes('<html')) {\r\n        scores.xml *= 0.3;\r\n      } else if (content.includes('<?xml')) {\r\n        scores.html *= 0.3;\r\n      }\r\n    }\r\n\r\n    // JavaScript vs JSON conflict\r\n    if (scores.javascript > 0 && scores.json > 0) {\r\n      if (content.includes('function') || content.includes('var ') || content.includes('let ') || content.includes('const ')) {\r\n        scores.json *= 0.1;\r\n      }\r\n    }\r\n\r\n    // C vs C++ conflict\r\n    if (scores.c > 0 && scores.cpp > 0) {\r\n      if (content.includes('std::') || content.includes('#include <iostream>') || content.includes('class ')) {\r\n        scores.c *= 0.3;\r\n      } else if (!content.includes('std::') && !content.includes('class ') && !content.includes('namespace')) {\r\n        scores.cpp *= 0.5;\r\n      }\r\n    }\r\n\r\n    // Shell vs other languages\r\n    if (scores.shell > 0) {\r\n      const hasShebang = content.startsWith('#!');\r\n      if (!hasShebang && (scores.python > 0 || scores.ruby > 0)) {\r\n        scores.shell *= 0.4;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate confidence level based on score and patterns\r\n   */\r\n  calculateConfidence(language, score, content) {\r\n    if (language === 'plaintext') return 'low';\r\n    \r\n    const patterns = this.patterns[language];\r\n    if (!patterns) return 'low';\r\n    \r\n    const strongMatches = patterns.strong?.filter(pattern => \r\n      content.match(pattern)\r\n    ).length || 0;\r\n    \r\n    if (strongMatches >= 2 && score >= 25) return 'high';\r\n    if (strongMatches >= 1 && score >= 15) return 'medium';\r\n    if (score >= 8) return 'low';\r\n    \r\n    return 'very-low';\r\n  }\r\n\r\n  /**\r\n   * Enhanced auto-detection with improved logic\r\n   */\r\n  autoDetect(content, filename = null) {\r\n    // Filename detection with high confidence\r\n    const filenameLanguage = this.detectFromFilename(filename);\r\n    if (filenameLanguage) {\r\n      // Verify filename detection with content if available\r\n      if (content && content.trim().length > 0) {\r\n        const contentLanguage = this.detectFromContent(content);\r\n        \r\n        // If content strongly suggests a different language, use content detection\r\n        if (contentLanguage !== 'plaintext' && contentLanguage !== filenameLanguage) {\r\n          const contentScore = this.getLanguageScore(content, contentLanguage);\r\n          const filenameScore = this.getLanguageScore(content, filenameLanguage);\r\n          \r\n          if (contentScore > filenameScore * 1.5) {\r\n            return {\r\n              language: contentLanguage,\r\n              confidence: this.calculateConfidence(contentLanguage, contentScore, content),\r\n              method: 'content-override',\r\n              alternateDetection: filenameLanguage\r\n            };\r\n          }\r\n        }\r\n      }\r\n      \r\n      return {\r\n        language: filenameLanguage,\r\n        confidence: 'high',\r\n        method: 'filename'\r\n      };\r\n    }\r\n\r\n    // Content-only detection\r\n    const contentLanguage = this.detectFromContent(content);\r\n    const score = this.getLanguageScore(content, contentLanguage);\r\n    \r\n    return {\r\n      language: contentLanguage,\r\n      confidence: this.calculateConfidence(contentLanguage, score, content),\r\n      method: 'content'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get score for a specific language\r\n   */\r\n  getLanguageScore(content, language) {\r\n    if (!this.patterns[language]) return 0;\r\n    \r\n    let score = 0;\r\n    Object.entries(this.patterns[language]).forEach(([category, patterns]) => {\r\n      const weight = this.weights[category];\r\n      patterns.forEach(pattern => {\r\n        const matches = content.match(new RegExp(pattern.source, pattern.flags + 'g'));\r\n        if (matches) {\r\n          score += Math.min(matches.length, 5) * weight;\r\n        }\r\n      });\r\n    });\r\n    \r\n    return score;\r\n  }\r\n\r\n  /**\r\n   * Get detailed detection results for debugging\r\n   */\r\n  getDetectionDetails(content, filename = null) {\r\n    const results = this.autoDetect(content, filename);\r\n    const scores = {};\r\n    \r\n    // Calculate scores for all languages\r\n    Object.keys(this.patterns).forEach(lang => {\r\n      scores[lang] = this.getLanguageScore(content, lang);\r\n    });\r\n    \r\n    const sortedScores = Object.entries(scores)\r\n      .sort(([,a], [,b]) => b - a)\r\n      .slice(0, 5);\r\n    \r\n    return {\r\n      ...results,\r\n      topScores: sortedScores,\r\n      totalPatterns: Object.keys(this.patterns).length,\r\n      contentLength: content?.length || 0\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get all supported languages\r\n   */\r\n  getSupportedLanguages() {\r\n    return [\r\n      'plaintext',\r\n      ...Object.keys(this.patterns).sort()\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Check if a language is supported\r\n   */\r\n  isLanguageSupported(language) {\r\n    return language === 'plaintext' || this.patterns.hasOwnProperty(language);\r\n  }\r\n}\r\n\r\nexport default LanguageDetector;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}