{"ast":null,"code":"import _objectSpread from\"C:/Users/Joem/quickdiff-react/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\r\n * Hugging Face API Service for QuickDiff React App\r\n * Supports Hugging Face Inference API for text analysis\r\n */export class HuggingFaceService{constructor(){this.config={apiKey:process.env.REACT_APP_HUGGINGFACE_API_KEY||'',// Hugging Face API token from environment\nbaseUrl:'https://api-inference.huggingface.co/models',models:{textGeneration:'microsoft/DialoGPT-medium',// More reliable text generation model\ntextGenerationFallback:'gpt2',// Fallback option\nsummarization:'facebook/bart-large-cnn',// Best summarization model\nsentiment:'cardiffnlp/twitter-roberta-base-sentiment-latest',// Best sentiment analysis\ntextClassification:'unitary/toxic-bert'// For cleanup analysis\n},maxLength:1000,temperature:0.7,waitForModel:true// Wait for model to load if needed\n};// Load config from localStorage if available\nthis.loadConfig();}loadConfig(){try{const savedConfig=localStorage.getItem('quickdiff_hf_config');if(savedConfig){const parsedConfig=JSON.parse(savedConfig);// Don't override API key from environment with localStorage\ndelete parsedConfig.apiKey;this.config=_objectSpread(_objectSpread({},this.config),parsedConfig);}// Ensure environment variable always takes precedence\nconst envApiKey=process.env.REACT_APP_HUGGINGFACE_API_KEY;if(envApiKey){this.config.apiKey=envApiKey;}}catch(error){console.error('Error loading Hugging Face config:',error);}}saveConfig(){try{// Don't save API key to localStorage for security\nconst configToSave=_objectSpread({},this.config);delete configToSave.apiKey;localStorage.setItem('quickdiff_hf_config',JSON.stringify(configToSave));}catch(error){console.error('Error saving Hugging Face config:',error);}}updateConfig(newConfig){this.config=_objectSpread(_objectSpread({},this.config),newConfig);this.saveConfig();}getConfig(){return _objectSpread({},this.config);}// Check if Hugging Face is properly configured\nisConfigured(){const hasKey=this.config.apiKey&&this.config.apiKey.trim().length>0;const isValidKey=this.config.apiKey&&this.config.apiKey.startsWith('hf_');const configured=hasKey&&isValidKey;console.log('üîç HuggingFace isConfigured check:',{envVar:process.env.REACT_APP_HUGGINGFACE_API_KEY?'Found':'Not found',hasApiKey:!!this.config.apiKey,apiKeyLength:this.config.apiKey?this.config.apiKey.length:0,apiKeyPreview:this.config.apiKey?\"\".concat(this.config.apiKey.substring(0,10),\"...\"):'none',startsWithHf:isValidKey,configured:configured});return configured;}// Generate analysis using Hugging Face models\nasync generateAnalysis(type,originalText,changedText){console.log('üöÄ generateAnalysis called with type:',type);console.log('üîß isConfigured():',this.isConfigured());if(!this.isConfigured()){console.log('‚ùå API not configured, throwing error');throw new Error('Hugging Face API not configured. Please set up your API token.');}console.log('‚úÖ API configured, proceeding with analysis...');try{let analysis;switch(type){case'explain':console.log('üìù Generating explanation...');analysis=await this.generateExplanation(originalText,changedText);break;case'rewrite':console.log('‚ú® Generating rewrite suggestions...');analysis=await this.generateRewriteSuggestions(originalText,changedText);break;case'summary':console.log('üìÑ Generating summary...');analysis=await this.generateSummary(originalText,changedText);break;case'tone':console.log('üé≠ Generating tone analysis...');analysis=await this.generateToneAnalysis(originalText,changedText);break;case'cleanup':console.log('üßπ Generating cleanup analysis...');analysis=await this.generateCleanupAnalysis(originalText,changedText);break;default:console.log('üìù Generating default explanation...');analysis=await this.generateExplanation(originalText,changedText);}console.log('‚úÖ Analysis generated successfully');return this.formatResponse(type,analysis);}catch(error){console.error('‚ùå Hugging Face API Error:',error);throw new Error(\"Failed to generate \".concat(type,\" analysis: \").concat(error.message));}}// Generate local analysis without API (fallback methods)\nasync generateLocalAnalysis(type,originalText,changedText){try{let analysis;switch(type){case'explain':analysis=this.getFallbackExplanation(originalText,changedText);break;case'rewrite':analysis=this.getFallbackRewrite();break;case'summary':analysis=this.getFallbackSummary(originalText,changedText);break;case'tone':analysis=this.getFallbackToneAnalysis();break;case'cleanup':analysis=this.generateCleanupAnalysis(originalText,changedText);break;default:analysis=this.getFallbackExplanation(originalText,changedText);}return this.formatResponse(type,analysis);}catch(error){console.error('Local Analysis Error:',error);throw new Error(\"Failed to generate local \".concat(type,\" analysis: \").concat(error.message));}}// Call Hugging Face Inference API\nasync callHuggingFaceAPI(modelName,payload){const url=\"\".concat(this.config.baseUrl,\"/\").concat(modelName);console.log('üåê Making Hugging Face API call to:',url);console.log('üîë Using API key:',this.config.apiKey?\"\".concat(this.config.apiKey.substring(0,10),\"...\"):'NONE');console.log('üì¶ Payload:',JSON.stringify(payload,null,2));const requestBody=_objectSpread(_objectSpread({},payload),{},{options:{wait_for_model:this.config.waitForModel,use_cache:true}});console.log('üì§ Full request body:',JSON.stringify(requestBody,null,2));const response=await fetch(url,{method:'POST',headers:{'Authorization':\"Bearer \".concat(this.config.apiKey),'Content-Type':'application/json'},body:JSON.stringify(requestBody)});console.log('üì• Response status:',response.status);console.log('üì• Response headers:',Object.fromEntries(response.headers.entries()));if(!response.ok){const error=await response.text();console.error('‚ùå API Error Response:',error);throw new Error(\"Hugging Face API error: \".concat(response.status,\" - \").concat(error));}const result=await response.json();console.log('‚úÖ API Success Response:',result);return result;}// Generate text using text generation model\nasync generateText(prompt){let maxLength=arguments.length>1&&arguments[1]!==undefined?arguments[1]:500;console.log('üéØ generateText called with:',{model:this.config.models.textGeneration,promptLength:prompt.length,maxLength:maxLength});try{var _result$;// Try primary model first\nconst result=await this.callHuggingFaceAPI(this.config.models.textGeneration,{inputs:prompt,parameters:{max_length:maxLength,temperature:this.config.temperature,do_sample:true,top_p:0.9,pad_token_id:50256}});const generatedText=((_result$=result[0])===null||_result$===void 0?void 0:_result$.generated_text)||'';console.log('üìù Generated text length:',generatedText.length);return generatedText;}catch(error){console.log('‚ö†Ô∏è Primary model failed, trying fallback model...');try{var _result$2;// Try fallback model\nconst result=await this.callHuggingFaceAPI(this.config.models.textGenerationFallback,{inputs:prompt,parameters:{max_length:maxLength,temperature:this.config.temperature,do_sample:true,top_p:0.9}});const generatedText=((_result$2=result[0])===null||_result$2===void 0?void 0:_result$2.generated_text)||'';console.log('üìù Fallback generated text length:',generatedText.length);return generatedText;}catch(fallbackError){console.error('‚ùå Both models failed:',fallbackError);throw new Error(\"Text generation failed: \".concat(fallbackError.message));}}}// Generate explanation analysis\nasync generateExplanation(originalText,changedText){console.log('üöÄ Starting Hugging Face API explanation generation...');const stats=this.calculateTextStats(originalText,changedText);// Create a shorter, more focused prompt for better results\nconst prompt=\"Compare these texts and explain the key differences:\\n\\nText 1: \\\"\".concat(originalText.substring(0,150)).concat(originalText.length>150?'...':'',\"\\\"\\nText 2: \\\"\").concat(changedText.substring(0,150)).concat(changedText.length>150?'...':'',\"\\\"\\n\\nAnalysis:\");try{console.log('üìù Calling Hugging Face API with prompt:',prompt.substring(0,100)+'...');const aiInsight=await this.generateText(prompt,200);console.log('‚úÖ Hugging Face API response received:',aiInsight.substring(0,100)+'...');// Clean up the AI response by removing the original prompt\nlet cleanedInsight=aiInsight;if(aiInsight.includes(prompt)){cleanedInsight=aiInsight.replace(prompt,'').trim();}// If the response is too short or empty, provide a basic analysis\nif(!cleanedInsight||cleanedInsight.length<10){cleanedInsight=\"The AI analysis shows differences in content structure and word usage between the two text versions.\";}return\"\\n        <div class=\\\"ai-explanation\\\">\\n          <h4>\\uD83D\\uDCCA Hugging Face AI Text Analysis</h4>\\n          <div class=\\\"analysis-stats\\\">\\n            <div class=\\\"stat-item\\\">\\n              <strong>Original Text:</strong> \".concat(stats.originalLines,\" lines, \").concat(stats.originalWords,\" words, \").concat(stats.originalChars,\" characters\\n            </div>\\n            <div class=\\\"stat-item\\\">\\n              <strong>Changed Text:</strong> \").concat(stats.changedLines,\" lines, \").concat(stats.changedWords,\" words, \").concat(stats.changedChars,\" characters\\n            </div>\\n            <div class=\\\"stat-item\\\">\\n              <strong>Difference:</strong> \").concat(Math.abs(stats.changedLines-stats.originalLines),\" lines, \").concat(Math.abs(stats.changedWords-stats.originalWords),\" words, \").concat(Math.abs(stats.changedChars-stats.originalChars),\" characters\\n            </div>\\n          </div>\\n          \\n          <h4>\\uD83E\\uDD16 AI Insights from Hugging Face</h4>\\n          <div class=\\\"ai-insight\\\">\\n            \").concat(cleanedInsight,\"\\n          </div>\\n          \\n          <h4>\\uD83D\\uDD0D Key Changes Detected</h4>\\n          <ul>\\n            \").concat(stats.originalLines!==stats.changedLines?\"<li>Line count changed from \".concat(stats.originalLines,\" to \").concat(stats.changedLines,\"</li>\"):'',\"\\n            \").concat(stats.originalWords!==stats.changedWords?\"<li>Word count changed from \".concat(stats.originalWords,\" to \").concat(stats.changedWords,\"</li>\"):'',\"\\n            \").concat(originalText===changedText?'<li>No changes detected - texts are identical</li>':'',\"\\n            \").concat(Math.abs(stats.changedChars-stats.originalChars)>stats.originalChars*0.5?'<li>‚ö†Ô∏è Significant length change detected</li>':'',\"\\n          </ul>\\n        </div>\\n      \");}catch(error){console.error('‚ùå Hugging Face API failed for explanation:',error);console.error('Full error details:',error.message,error.stack);throw error;// Re-throw to trigger fallback in App.js\n}}// Generate rewrite suggestions\nasync generateRewriteSuggestions(originalText,changedText){const combinedText=originalText+' '+changedText;const prompt=\"Improve this text for better clarity and readability:\\n\\n\\\"\".concat(combinedText.substring(0,200)).concat(combinedText.length>200?'...':'',\"\\\"\\n\\nSuggestions:\");try{console.log('‚ú® Generating rewrite suggestions...');const suggestions=await this.generateText(prompt,250);console.log('‚úÖ Rewrite suggestions received');// Clean up the AI response\nlet cleanedSuggestions=suggestions;if(suggestions.includes(prompt)){cleanedSuggestions=suggestions.replace(prompt,'').trim();}// If the response is too short or empty, provide basic suggestions\nif(!cleanedSuggestions||cleanedSuggestions.length<10){cleanedSuggestions=\"Consider improving sentence structure, using more precise vocabulary, and ensuring clear transitions between ideas.\";}return\"\\n        <div class=\\\"ai-rewrite\\\">\\n          <h4>\\u2728 Hugging Face AI Rewrite Suggestions</h4>\\n          <div class=\\\"ai-suggestions\\\">\\n            \".concat(cleanedSuggestions,\"\\n          </div>\\n          \\n          <h4>\\uD83D\\uDCDD General Improvements</h4>\\n          <ul>\\n            <li>Consider breaking long sentences into shorter, more readable ones</li>\\n            <li>Use active voice where possible for clearer communication</li>\\n            <li>Ensure consistent terminology throughout the text</li>\\n            <li>Remove redundant words and phrases</li>\\n            <li>Add transitional phrases for better flow</li>\\n          </ul>\\n        </div>\\n      \");}catch(error){console.error('‚ùå Error generating rewrite suggestions:',error);throw error;// Let the main function handle fallback\n}}// Generate summary using summarization model\nasync generateSummary(originalText,changedText){const combinedText=originalText+'\\n\\n'+changedText;try{var _result$3;const result=await this.callHuggingFaceAPI(this.config.models.summarization,{inputs:combinedText,parameters:{max_length:150,min_length:30,do_sample:false}});const summary=((_result$3=result[0])===null||_result$3===void 0?void 0:_result$3.summary_text)||'Unable to generate summary';return\"\\n        <div class=\\\"ai-summary\\\">\\n          <h4>\\uD83D\\uDCDD AI-Generated Summary</h4>\\n          <div class=\\\"summary-content\\\">\\n            <p>\".concat(summary,\"</p>\\n          </div>\\n          \\n          <h4>\\uD83D\\uDCCA Text Overview</h4>\\n          <p>Combined text length: \").concat(combinedText.length,\" characters</p>\\n          <p>Analysis includes both original and changed versions for comprehensive understanding.</p>\\n        </div>\\n      \");}catch(error){console.error('Error generating summary:',error);return this.getFallbackSummary(originalText,changedText);}}// Generate tone analysis using sentiment model\nasync generateToneAnalysis(originalText,changedText){try{const[originalSentiment,changedSentiment]=await Promise.all([this.analyzeSentiment(originalText),this.analyzeSentiment(changedText)]);return\"\\n        <div class=\\\"ai-tone\\\">\\n          <h4>\\uD83C\\uDFAD AI Tone Analysis</h4>\\n          \\n          <div class=\\\"tone-section\\\">\\n            <h5>\\uD83D\\uDCCA Original Text Sentiment</h5>\\n            <div class=\\\"sentiment-result\\\">\\n              <strong>Primary Sentiment:</strong> \".concat(originalSentiment.label,\" (\").concat((originalSentiment.score*100).toFixed(1),\"% confidence)\\n            </div>\\n          </div>\\n          \\n          \").concat(changedText?\"\\n          <div class=\\\"tone-section\\\">\\n            <h5>\\uD83D\\uDCCA Changed Text Sentiment</h5>\\n            <div class=\\\"sentiment-result\\\">\\n              <strong>Primary Sentiment:</strong> \".concat(changedSentiment.label,\" (\").concat((changedSentiment.score*100).toFixed(1),\"% confidence)\\n            </div>\\n          </div>\\n          \"):'',\"\\n          \\n          <div class=\\\"tone-section\\\">\\n            <h5>\\uD83D\\uDCA1 Tone Insights</h5>\\n            <ul>\\n              <li>Sentiment analysis powered by Hugging Face AI models</li>\\n              <li>Consider your target audience when choosing tone</li>\\n              <li>Maintain consistency throughout your document</li>\\n              \").concat(originalSentiment.label!==changedSentiment.label?'<li>‚ö†Ô∏è Tone shift detected between versions</li>':'',\"\\n            </ul>\\n          </div>\\n        </div>\\n      \");}catch(error){console.error('Error generating tone analysis:',error);return this.getFallbackToneAnalysis();}}// Analyze sentiment using Hugging Face sentiment model\nasync analyzeSentiment(text){if(!text.trim()){return{label:'NEUTRAL',score:0.5};}try{const result=await this.callHuggingFaceAPI(this.config.models.sentiment,{inputs:text.substring(0,500)// Limit text length for API\n});const topResult=result[0]||{label:'NEUTRAL',score:0.5};return topResult;}catch(error){console.error('Error analyzing sentiment:',error);return{label:'NEUTRAL',score:0.5};}}// Generate cleanup analysis\nasync generateCleanupAnalysis(originalText,changedText){const issues=this.detectFormattingIssues(originalText+'\\n'+changedText);return\"\\n      <div class=\\\"ai-cleanup\\\">\\n        <h4>\\uD83E\\uDDF9 Text Cleanup Analysis</h4>\\n        \\n        <div class=\\\"cleanup-section\\\">\\n          <h5>\\uD83D\\uDD0D Issues Detected</h5>\\n          \".concat(issues.length>0?\"\\n            <ul>\\n              \".concat(issues.map(issue=>\"<li>\".concat(issue,\"</li>\")).join(''),\"\\n            </ul>\\n          \"):'<p>‚úÖ No major formatting issues detected!</p>',\"\\n        </div>\\n        \\n        <div class=\\\"cleanup-section\\\">\\n          <h5>\\u2728 Cleanup Recommendations</h5>\\n          <ul>\\n            <li>Remove trailing whitespace at line ends</li>\\n            <li>Standardize line break usage</li>\\n            <li>Fix inconsistent punctuation</li>\\n            <li>Normalize quotation marks</li>\\n            <li>Remove unnecessary special characters</li>\\n          </ul>\\n        </div>\\n      </div>\\n    \");}// Helper methods\ncalculateTextStats(originalText,changedText){return{originalLines:originalText.split('\\n').length,changedLines:changedText.split('\\n').length,originalWords:originalText.split(/\\s+/).filter(w=>w.length>0).length,changedWords:changedText.split(/\\s+/).filter(w=>w.length>0).length,originalChars:originalText.length,changedChars:changedText.length};}detectFormattingIssues(text){const issues=[];if(text.includes('  '))issues.push('Multiple consecutive spaces found');if(text.includes('\\n\\n\\n'))issues.push('Excessive line breaks detected');if(text.match(/[.]{2,}/))issues.push('Multiple periods found');if(text.match(/[!]{2,}/))issues.push('Multiple exclamation marks found');if(text.match(/[?]{2,}/))issues.push('Multiple question marks found');return issues;}// Fallback methods for when API calls fail\ngetFallbackExplanation(originalText,changedText){const stats=this.calculateTextStats(originalText,changedText);const wordDiff=stats.changedWords-stats.originalWords;const lineDiff=stats.changedLines-stats.originalLines;const charDiff=stats.changedChars-stats.originalChars;return\"\\n      <div class=\\\"ai-explanation\\\">\\n        <h4>\\uD83D\\uDCCA Text Analysis (Local Processing)</h4>\\n        <div class=\\\"analysis-stats\\\">\\n          <div class=\\\"stat-item\\\">\\n            <strong>Original Text:</strong> \".concat(stats.originalLines,\" lines, \").concat(stats.originalWords,\" words, \").concat(stats.originalChars,\" characters\\n          </div>\\n          <div class=\\\"stat-item\\\">\\n            <strong>Changed Text:</strong> \").concat(stats.changedLines,\" lines, \").concat(stats.changedWords,\" words, \").concat(stats.changedChars,\" characters\\n          </div>\\n          <div class=\\\"stat-item\\\">\\n            <strong>Net Changes:</strong> \").concat(lineDiff>0?'+':'').concat(lineDiff,\" lines, \").concat(wordDiff>0?'+':'').concat(wordDiff,\" words, \").concat(charDiff>0?'+':'').concat(charDiff,\" characters\\n          </div>\\n        </div>\\n        \\n        <h4>\\uD83D\\uDD0D Analysis Results</h4>\\n        <ul>\\n          \").concat(originalText===changedText?'<li>‚úÖ No changes detected - texts are identical</li>':'',\"\\n          \").concat(Math.abs(wordDiff)>0?\"<li>\\uD83D\\uDCDD Word count \".concat(wordDiff>0?'increased':'decreased',\" by \").concat(Math.abs(wordDiff),\" words</li>\"):'',\"\\n          \").concat(Math.abs(lineDiff)>0?\"<li>\\uD83D\\uDCC4 Line count \".concat(lineDiff>0?'increased':'decreased',\" by \").concat(Math.abs(lineDiff),\" lines</li>\"):'',\"\\n          \").concat(Math.abs(charDiff)>stats.originalChars*0.5?'<li>‚ö†Ô∏è Significant content change detected (>50% length change)</li>':'',\"\\n          \").concat(Math.abs(charDiff)<stats.originalChars*0.1?'<li>‚ú® Minor changes detected (<10% length change)</li>':'',\"\\n        </ul>\\n        \\n        <div class=\\\"ai-note\\\">\\n          <p><em>Note: This is a local analysis. For AI-powered insights, please check your Hugging Face API configuration.</em></p>\\n        </div>\\n      </div>\\n    \");}getFallbackRewrite(){return\"\\n      <div class=\\\"ai-rewrite\\\">\\n        <h4>\\u2728 Writing Improvement Suggestions (Local Analysis)</h4>\\n        <div class=\\\"rewrite-suggestions\\\">\\n          <h5>\\uD83D\\uDCDD General Writing Tips</h5>\\n          <ul>\\n            <li><strong>Clarity:</strong> Use clear, concise language and avoid jargon</li>\\n            <li><strong>Structure:</strong> Break up long sentences into shorter, more readable ones</li>\\n            <li><strong>Voice:</strong> Use active voice when possible for stronger impact</li>\\n            <li><strong>Consistency:</strong> Maintain consistent terminology and tone throughout</li>\\n            <li><strong>Grammar:</strong> Check for spelling, grammar, and punctuation errors</li>\\n          </ul>\\n          \\n          <h5>\\uD83C\\uDFAF Content Enhancement</h5>\\n          <ul>\\n            <li>Remove redundant words and phrases</li>\\n            <li>Add transitional phrases for better flow</li>\\n            <li>Use specific examples to support your points</li>\\n            <li>Ensure each paragraph has a clear main idea</li>\\n          </ul>\\n        </div>\\n        \\n        <div class=\\\"ai-note\\\">\\n          <p><em>Note: For AI-powered rewrite suggestions, please configure your Hugging Face API key.</em></p>\\n        </div>\\n      </div>\\n    \";}getFallbackSummary(originalText,changedText){const stats=this.calculateTextStats(originalText,changedText);const combinedLength=originalText.length+changedText.length;const hasChanges=originalText!==changedText;return\"\\n      <div class=\\\"ai-summary\\\">\\n        <h4>\\uD83D\\uDCDD Text Summary (Local Analysis)</h4>\\n        <div class=\\\"summary-content\\\">\\n          <p><strong>Document Overview:</strong> This comparison includes \".concat(stats.originalWords+stats.changedWords,\" total words across both text versions.</p>\\n          \\n          \").concat(hasChanges?\"\\n            <p><strong>Changes Detected:</strong> The text has been modified with \".concat(Math.abs(stats.changedWords-stats.originalWords),\" word difference and \").concat(Math.abs(stats.changedLines-stats.originalLines),\" line difference.</p>\\n          \"):\"\\n            <p><strong>No Changes:</strong> Both text versions are identical.</p>\\n          \",\"\\n          \\n          <div class=\\\"summary-stats\\\">\\n            <p><strong>Text Statistics:</strong></p>\\n            <ul>\\n              <li>Total characters: \").concat(combinedLength,\"</li>\\n              <li>Original version: \").concat(stats.originalWords,\" words, \").concat(stats.originalLines,\" lines</li>\\n              <li>Changed version: \").concat(stats.changedWords,\" words, \").concat(stats.changedLines,\" lines</li>\\n            </ul>\\n          </div>\\n        </div>\\n        \\n        <div class=\\\"ai-note\\\">\\n          <p><em>Note: For AI-generated summaries, please configure your Hugging Face API key.</em></p>\\n        </div>\\n      </div>\\n    \");}getFallbackToneAnalysis(){return\"\\n      <div class=\\\"ai-tone\\\">\\n        <h4>\\uD83C\\uDFAD Tone Analysis Guidelines (Local Analysis)</h4>\\n        \\n        <div class=\\\"tone-section\\\">\\n          <h5>\\uD83D\\uDCCB Manual Tone Assessment</h5>\\n          <p>Consider these aspects when evaluating your text's tone:</p>\\n          <ul>\\n            <li><strong>Formality Level:</strong> Is the language formal, informal, or conversational?</li>\\n            <li><strong>Emotional Tone:</strong> Does the text convey positive, negative, or neutral emotions?</li>\\n            <li><strong>Authority:</strong> Is the tone confident, uncertain, or questioning?</li>\\n            <li><strong>Audience Appropriateness:</strong> Does the tone match your intended audience?</li>\\n          </ul>\\n        </div>\\n        \\n        <div class=\\\"tone-section\\\">\\n          <h5>\\uD83D\\uDCA1 Tone Consistency Tips</h5>\\n          <ul>\\n            <li>Maintain consistent voice throughout your document</li>\\n            <li>Match tone to your purpose (informative, persuasive, entertaining)</li>\\n            <li>Consider cultural context and audience expectations</li>\\n            <li>Use appropriate vocabulary for your target readers</li>\\n            <li>Balance professionalism with accessibility</li>\\n          </ul>\\n        </div>\\n        \\n        <div class=\\\"ai-note\\\">\\n          <p><em>Note: For AI-powered sentiment analysis, please configure your Hugging Face API key.</em></p>\\n        </div>\\n      </div>\\n    \";}// Format the response into the expected structure\nformatResponse(type,content){const typeIcons={explain:'üß†',rewrite:'‚ú®',summary:'üìù',tone:'üé≠',cleanup:'üßπ'};const typeTitles={explain:'Hugging Face AI Explanation',rewrite:'Hugging Face AI Rewrite Suggestions',summary:'Hugging Face AI Summary',tone:'Hugging Face AI Tone Analysis',cleanup:'Hugging Face AI Text Cleanup'};return{title:\"\".concat(typeIcons[type]||'ü§ñ',\" \").concat(typeTitles[type]||'Hugging Face AI Analysis'),content:content,type:type};}// Test the Hugging Face connection\nasync testConnection(){console.log('Testing Hugging Face connection...');console.log('API Key configured:',this.isConfigured());console.log('API Key preview:',this.config.apiKey?\"\".concat(this.config.apiKey.substring(0,10),\"...\"):'none');if(!this.isConfigured()){return{success:false,error:'API key not configured'};}try{// Use a simpler model for testing\nconst result=await this.callHuggingFaceAPI('gpt2',{inputs:\"Hello world\",parameters:{max_length:20}});console.log('API test result:',result);return{success:true,response:'Connection successful!',data:result};}catch(error){console.error('API test failed:',error);return{success:false,error:error.message};}}// Debug method to check configuration\ndebugConfig(){console.log('=== Hugging Face Debug Info ===');console.log('Environment API Key:',process.env.REACT_APP_HUGGINGFACE_API_KEY?'Found':'Not found');console.log('Config API Key:',this.config.apiKey?'Found':'Not found');console.log('API Key length:',this.config.apiKey?this.config.apiKey.length:0);console.log('Is Configured:',this.isConfigured());console.log('Base URL:',this.config.baseUrl);console.log('Models:',this.config.models);console.log('==============================');}// Get available models\ngetAvailableModels(){return{textGeneration:['meta-llama/Llama-2-7b-chat-hf','microsoft/DialoGPT-large','EleutherAI/gpt-neo-2.7B','mistralai/Mistral-7B-Instruct-v0.1','EleutherAI/gpt-neo-1.3B'],summarization:['facebook/bart-large-cnn','google/pegasus-xsum','t5-base','t5-small'],sentiment:['cardiffnlp/twitter-roberta-base-sentiment-latest','nlptown/bert-base-multilingual-uncased-sentiment','distilbert-base-uncased-finetuned-sst-2-english']};}}","map":{"version":3,"names":["HuggingFaceService","constructor","config","apiKey","process","env","REACT_APP_HUGGINGFACE_API_KEY","baseUrl","models","textGeneration","textGenerationFallback","summarization","sentiment","textClassification","maxLength","temperature","waitForModel","loadConfig","savedConfig","localStorage","getItem","parsedConfig","JSON","parse","_objectSpread","envApiKey","error","console","saveConfig","configToSave","setItem","stringify","updateConfig","newConfig","getConfig","isConfigured","hasKey","trim","length","isValidKey","startsWith","configured","log","envVar","hasApiKey","apiKeyLength","apiKeyPreview","concat","substring","startsWithHf","generateAnalysis","type","originalText","changedText","Error","analysis","generateExplanation","generateRewriteSuggestions","generateSummary","generateToneAnalysis","generateCleanupAnalysis","formatResponse","message","generateLocalAnalysis","getFallbackExplanation","getFallbackRewrite","getFallbackSummary","getFallbackToneAnalysis","callHuggingFaceAPI","modelName","payload","url","requestBody","options","wait_for_model","use_cache","response","fetch","method","headers","body","status","Object","fromEntries","entries","ok","text","result","json","generateText","prompt","arguments","undefined","model","promptLength","_result$","inputs","parameters","max_length","do_sample","top_p","pad_token_id","generatedText","generated_text","_result$2","fallbackError","stats","calculateTextStats","aiInsight","cleanedInsight","includes","replace","originalLines","originalWords","originalChars","changedLines","changedWords","changedChars","Math","abs","stack","combinedText","suggestions","cleanedSuggestions","_result$3","min_length","summary","summary_text","originalSentiment","changedSentiment","Promise","all","analyzeSentiment","label","score","toFixed","topResult","issues","detectFormattingIssues","map","issue","join","split","filter","w","push","match","wordDiff","lineDiff","charDiff","combinedLength","hasChanges","content","typeIcons","explain","rewrite","tone","cleanup","typeTitles","title","testConnection","success","data","debugConfig","getAvailableModels"],"sources":["C:/Users/Joem/quickdiff-react/src/utils/HuggingFaceService.js"],"sourcesContent":["/**\r\n * Hugging Face API Service for QuickDiff React App\r\n * Supports Hugging Face Inference API for text analysis\r\n */\r\n\r\nexport class HuggingFaceService {\r\n  constructor() {\r\n    this.config = {\r\n      apiKey: process.env.REACT_APP_HUGGINGFACE_API_KEY || '', // Hugging Face API token from environment\r\n      baseUrl: 'https://api-inference.huggingface.co/models',\r\n      models: {\r\n        textGeneration: 'microsoft/DialoGPT-medium', // More reliable text generation model\r\n        textGenerationFallback: 'gpt2', // Fallback option\r\n        summarization: 'facebook/bart-large-cnn', // Best summarization model\r\n        sentiment: 'cardiffnlp/twitter-roberta-base-sentiment-latest', // Best sentiment analysis\r\n        textClassification: 'unitary/toxic-bert' // For cleanup analysis\r\n      },\r\n      maxLength: 1000,\r\n      temperature: 0.7,\r\n      waitForModel: true // Wait for model to load if needed\r\n    };\r\n    \r\n    // Load config from localStorage if available\r\n    this.loadConfig();\r\n  }\r\n\r\n  loadConfig() {\r\n    try {\r\n      const savedConfig = localStorage.getItem('quickdiff_hf_config');\r\n      if (savedConfig) {\r\n        const parsedConfig = JSON.parse(savedConfig);\r\n        // Don't override API key from environment with localStorage\r\n        delete parsedConfig.apiKey;\r\n        this.config = { ...this.config, ...parsedConfig };\r\n      }\r\n      \r\n      // Ensure environment variable always takes precedence\r\n      const envApiKey = process.env.REACT_APP_HUGGINGFACE_API_KEY;\r\n      if (envApiKey) {\r\n        this.config.apiKey = envApiKey;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading Hugging Face config:', error);\r\n    }\r\n  }\r\n\r\n  saveConfig() {\r\n    try {\r\n      // Don't save API key to localStorage for security\r\n      const configToSave = { ...this.config };\r\n      delete configToSave.apiKey;\r\n      localStorage.setItem('quickdiff_hf_config', JSON.stringify(configToSave));\r\n    } catch (error) {\r\n      console.error('Error saving Hugging Face config:', error);\r\n    }\r\n  }\r\n\r\n  updateConfig(newConfig) {\r\n    this.config = { ...this.config, ...newConfig };\r\n    this.saveConfig();\r\n  }\r\n\r\n  getConfig() {\r\n    return { ...this.config };\r\n  }\r\n\r\n  // Check if Hugging Face is properly configured\r\n  isConfigured() {\r\n    const hasKey = this.config.apiKey && this.config.apiKey.trim().length > 0;\r\n    const isValidKey = this.config.apiKey && this.config.apiKey.startsWith('hf_');\r\n    const configured = hasKey && isValidKey;\r\n    \r\n    console.log('üîç HuggingFace isConfigured check:', {\r\n      envVar: process.env.REACT_APP_HUGGINGFACE_API_KEY ? 'Found' : 'Not found',\r\n      hasApiKey: !!this.config.apiKey,\r\n      apiKeyLength: this.config.apiKey ? this.config.apiKey.length : 0,\r\n      apiKeyPreview: this.config.apiKey ? `${this.config.apiKey.substring(0, 10)}...` : 'none',\r\n      startsWithHf: isValidKey,\r\n      configured: configured\r\n    });\r\n    return configured;\r\n  }\r\n\r\n  // Generate analysis using Hugging Face models\r\n  async generateAnalysis(type, originalText, changedText) {\r\n    console.log('üöÄ generateAnalysis called with type:', type);\r\n    console.log('üîß isConfigured():', this.isConfigured());\r\n    \r\n    if (!this.isConfigured()) {\r\n      console.log('‚ùå API not configured, throwing error');\r\n      throw new Error('Hugging Face API not configured. Please set up your API token.');\r\n    }\r\n\r\n    console.log('‚úÖ API configured, proceeding with analysis...');\r\n    try {\r\n      let analysis;\r\n      switch (type) {\r\n        case 'explain':\r\n          console.log('üìù Generating explanation...');\r\n          analysis = await this.generateExplanation(originalText, changedText);\r\n          break;\r\n        case 'rewrite':\r\n          console.log('‚ú® Generating rewrite suggestions...');\r\n          analysis = await this.generateRewriteSuggestions(originalText, changedText);\r\n          break;\r\n        case 'summary':\r\n          console.log('üìÑ Generating summary...');\r\n          analysis = await this.generateSummary(originalText, changedText);\r\n          break;\r\n        case 'tone':\r\n          console.log('üé≠ Generating tone analysis...');\r\n          analysis = await this.generateToneAnalysis(originalText, changedText);\r\n          break;\r\n        case 'cleanup':\r\n          console.log('üßπ Generating cleanup analysis...');\r\n          analysis = await this.generateCleanupAnalysis(originalText, changedText);\r\n          break;\r\n        default:\r\n          console.log('üìù Generating default explanation...');\r\n          analysis = await this.generateExplanation(originalText, changedText);\r\n      }\r\n      \r\n      console.log('‚úÖ Analysis generated successfully');\r\n      return this.formatResponse(type, analysis);\r\n    } catch (error) {\r\n      console.error('‚ùå Hugging Face API Error:', error);\r\n      throw new Error(`Failed to generate ${type} analysis: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // Generate local analysis without API (fallback methods)\r\n  async generateLocalAnalysis(type, originalText, changedText) {\r\n    try {\r\n      let analysis;\r\n      switch (type) {\r\n        case 'explain':\r\n          analysis = this.getFallbackExplanation(originalText, changedText);\r\n          break;\r\n        case 'rewrite':\r\n          analysis = this.getFallbackRewrite();\r\n          break;\r\n        case 'summary':\r\n          analysis = this.getFallbackSummary(originalText, changedText);\r\n          break;\r\n        case 'tone':\r\n          analysis = this.getFallbackToneAnalysis();\r\n          break;\r\n        case 'cleanup':\r\n          analysis = this.generateCleanupAnalysis(originalText, changedText);\r\n          break;\r\n        default:\r\n          analysis = this.getFallbackExplanation(originalText, changedText);\r\n      }\r\n      \r\n      return this.formatResponse(type, analysis);\r\n    } catch (error) {\r\n      console.error('Local Analysis Error:', error);\r\n      throw new Error(`Failed to generate local ${type} analysis: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // Call Hugging Face Inference API\r\n  async callHuggingFaceAPI(modelName, payload) {\r\n    const url = `${this.config.baseUrl}/${modelName}`;\r\n    console.log('üåê Making Hugging Face API call to:', url);\r\n    console.log('üîë Using API key:', this.config.apiKey ? `${this.config.apiKey.substring(0, 10)}...` : 'NONE');\r\n    console.log('üì¶ Payload:', JSON.stringify(payload, null, 2));\r\n    \r\n    const requestBody = {\r\n      ...payload,\r\n      options: {\r\n        wait_for_model: this.config.waitForModel,\r\n        use_cache: true\r\n      }\r\n    };\r\n    \r\n    console.log('üì§ Full request body:', JSON.stringify(requestBody, null, 2));\r\n    \r\n    const response = await fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${this.config.apiKey}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(requestBody)\r\n    });\r\n\r\n    console.log('üì• Response status:', response.status);\r\n    console.log('üì• Response headers:', Object.fromEntries(response.headers.entries()));\r\n\r\n    if (!response.ok) {\r\n      const error = await response.text();\r\n      console.error('‚ùå API Error Response:', error);\r\n      throw new Error(`Hugging Face API error: ${response.status} - ${error}`);\r\n    }\r\n\r\n    const result = await response.json();\r\n    console.log('‚úÖ API Success Response:', result);\r\n    return result;\r\n  }\r\n\r\n  // Generate text using text generation model\r\n  async generateText(prompt, maxLength = 500) {\r\n    console.log('üéØ generateText called with:', {\r\n      model: this.config.models.textGeneration,\r\n      promptLength: prompt.length,\r\n      maxLength: maxLength\r\n    });\r\n    \r\n    try {\r\n      // Try primary model first\r\n      const result = await this.callHuggingFaceAPI(this.config.models.textGeneration, {\r\n        inputs: prompt,\r\n        parameters: {\r\n          max_length: maxLength,\r\n          temperature: this.config.temperature,\r\n          do_sample: true,\r\n          top_p: 0.9,\r\n          pad_token_id: 50256\r\n        }\r\n      });\r\n\r\n      const generatedText = result[0]?.generated_text || '';\r\n      console.log('üìù Generated text length:', generatedText.length);\r\n      return generatedText;\r\n    } catch (error) {\r\n      console.log('‚ö†Ô∏è Primary model failed, trying fallback model...');\r\n      try {\r\n        // Try fallback model\r\n        const result = await this.callHuggingFaceAPI(this.config.models.textGenerationFallback, {\r\n          inputs: prompt,\r\n          parameters: {\r\n            max_length: maxLength,\r\n            temperature: this.config.temperature,\r\n            do_sample: true,\r\n            top_p: 0.9\r\n          }\r\n        });\r\n\r\n        const generatedText = result[0]?.generated_text || '';\r\n        console.log('üìù Fallback generated text length:', generatedText.length);\r\n        return generatedText;\r\n      } catch (fallbackError) {\r\n        console.error('‚ùå Both models failed:', fallbackError);\r\n        throw new Error(`Text generation failed: ${fallbackError.message}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Generate explanation analysis\r\n  async generateExplanation(originalText, changedText) {\r\n    console.log('üöÄ Starting Hugging Face API explanation generation...');\r\n    const stats = this.calculateTextStats(originalText, changedText);\r\n    \r\n    // Create a shorter, more focused prompt for better results\r\n    const prompt = `Compare these texts and explain the key differences:\r\n\r\nText 1: \"${originalText.substring(0, 150)}${originalText.length > 150 ? '...' : ''}\"\r\nText 2: \"${changedText.substring(0, 150)}${changedText.length > 150 ? '...' : ''}\"\r\n\r\nAnalysis:`;\r\n\r\n    try {\r\n      console.log('üìù Calling Hugging Face API with prompt:', prompt.substring(0, 100) + '...');\r\n      const aiInsight = await this.generateText(prompt, 200);\r\n      console.log('‚úÖ Hugging Face API response received:', aiInsight.substring(0, 100) + '...');\r\n      \r\n      // Clean up the AI response by removing the original prompt\r\n      let cleanedInsight = aiInsight;\r\n      if (aiInsight.includes(prompt)) {\r\n        cleanedInsight = aiInsight.replace(prompt, '').trim();\r\n      }\r\n      \r\n      // If the response is too short or empty, provide a basic analysis\r\n      if (!cleanedInsight || cleanedInsight.length < 10) {\r\n        cleanedInsight = \"The AI analysis shows differences in content structure and word usage between the two text versions.\";\r\n      }\r\n      \r\n      return `\r\n        <div class=\"ai-explanation\">\r\n          <h4>üìä Hugging Face AI Text Analysis</h4>\r\n          <div class=\"analysis-stats\">\r\n            <div class=\"stat-item\">\r\n              <strong>Original Text:</strong> ${stats.originalLines} lines, ${stats.originalWords} words, ${stats.originalChars} characters\r\n            </div>\r\n            <div class=\"stat-item\">\r\n              <strong>Changed Text:</strong> ${stats.changedLines} lines, ${stats.changedWords} words, ${stats.changedChars} characters\r\n            </div>\r\n            <div class=\"stat-item\">\r\n              <strong>Difference:</strong> ${Math.abs(stats.changedLines - stats.originalLines)} lines, ${Math.abs(stats.changedWords - stats.originalWords)} words, ${Math.abs(stats.changedChars - stats.originalChars)} characters\r\n            </div>\r\n          </div>\r\n          \r\n          <h4>ü§ñ AI Insights from Hugging Face</h4>\r\n          <div class=\"ai-insight\">\r\n            ${cleanedInsight}\r\n          </div>\r\n          \r\n          <h4>üîç Key Changes Detected</h4>\r\n          <ul>\r\n            ${stats.originalLines !== stats.changedLines ? `<li>Line count changed from ${stats.originalLines} to ${stats.changedLines}</li>` : ''}\r\n            ${stats.originalWords !== stats.changedWords ? `<li>Word count changed from ${stats.originalWords} to ${stats.changedWords}</li>` : ''}\r\n            ${originalText === changedText ? '<li>No changes detected - texts are identical</li>' : ''}\r\n            ${Math.abs(stats.changedChars - stats.originalChars) > stats.originalChars * 0.5 ? '<li>‚ö†Ô∏è Significant length change detected</li>' : ''}\r\n          </ul>\r\n        </div>\r\n      `;\r\n    } catch (error) {\r\n      console.error('‚ùå Hugging Face API failed for explanation:', error);\r\n      console.error('Full error details:', error.message, error.stack);\r\n      throw error; // Re-throw to trigger fallback in App.js\r\n    }\r\n  }\r\n\r\n  // Generate rewrite suggestions\r\n  async generateRewriteSuggestions(originalText, changedText) {\r\n    const combinedText = originalText + ' ' + changedText;\r\n    const prompt = `Improve this text for better clarity and readability:\r\n\r\n\"${combinedText.substring(0, 200)}${combinedText.length > 200 ? '...' : ''}\"\r\n\r\nSuggestions:`;\r\n\r\n    try {\r\n      console.log('‚ú® Generating rewrite suggestions...');\r\n      const suggestions = await this.generateText(prompt, 250);\r\n      console.log('‚úÖ Rewrite suggestions received');\r\n      \r\n      // Clean up the AI response\r\n      let cleanedSuggestions = suggestions;\r\n      if (suggestions.includes(prompt)) {\r\n        cleanedSuggestions = suggestions.replace(prompt, '').trim();\r\n      }\r\n      \r\n      // If the response is too short or empty, provide basic suggestions\r\n      if (!cleanedSuggestions || cleanedSuggestions.length < 10) {\r\n        cleanedSuggestions = \"Consider improving sentence structure, using more precise vocabulary, and ensuring clear transitions between ideas.\";\r\n      }\r\n      \r\n      return `\r\n        <div class=\"ai-rewrite\">\r\n          <h4>‚ú® Hugging Face AI Rewrite Suggestions</h4>\r\n          <div class=\"ai-suggestions\">\r\n            ${cleanedSuggestions}\r\n          </div>\r\n          \r\n          <h4>üìù General Improvements</h4>\r\n          <ul>\r\n            <li>Consider breaking long sentences into shorter, more readable ones</li>\r\n            <li>Use active voice where possible for clearer communication</li>\r\n            <li>Ensure consistent terminology throughout the text</li>\r\n            <li>Remove redundant words and phrases</li>\r\n            <li>Add transitional phrases for better flow</li>\r\n          </ul>\r\n        </div>\r\n      `;\r\n    } catch (error) {\r\n      console.error('‚ùå Error generating rewrite suggestions:', error);\r\n      throw error; // Let the main function handle fallback\r\n    }\r\n  }\r\n\r\n  // Generate summary using summarization model\r\n  async generateSummary(originalText, changedText) {\r\n    const combinedText = originalText + '\\n\\n' + changedText;\r\n    \r\n    try {\r\n      const result = await this.callHuggingFaceAPI(this.config.models.summarization, {\r\n        inputs: combinedText,\r\n        parameters: {\r\n          max_length: 150,\r\n          min_length: 30,\r\n          do_sample: false\r\n        }\r\n      });\r\n\r\n      const summary = result[0]?.summary_text || 'Unable to generate summary';\r\n      \r\n      return `\r\n        <div class=\"ai-summary\">\r\n          <h4>üìù AI-Generated Summary</h4>\r\n          <div class=\"summary-content\">\r\n            <p>${summary}</p>\r\n          </div>\r\n          \r\n          <h4>üìä Text Overview</h4>\r\n          <p>Combined text length: ${combinedText.length} characters</p>\r\n          <p>Analysis includes both original and changed versions for comprehensive understanding.</p>\r\n        </div>\r\n      `;\r\n    } catch (error) {\r\n      console.error('Error generating summary:', error);\r\n      return this.getFallbackSummary(originalText, changedText);\r\n    }\r\n  }\r\n\r\n  // Generate tone analysis using sentiment model\r\n  async generateToneAnalysis(originalText, changedText) {\r\n    try {\r\n      const [originalSentiment, changedSentiment] = await Promise.all([\r\n        this.analyzeSentiment(originalText),\r\n        this.analyzeSentiment(changedText)\r\n      ]);\r\n\r\n      return `\r\n        <div class=\"ai-tone\">\r\n          <h4>üé≠ AI Tone Analysis</h4>\r\n          \r\n          <div class=\"tone-section\">\r\n            <h5>üìä Original Text Sentiment</h5>\r\n            <div class=\"sentiment-result\">\r\n              <strong>Primary Sentiment:</strong> ${originalSentiment.label} (${(originalSentiment.score * 100).toFixed(1)}% confidence)\r\n            </div>\r\n          </div>\r\n          \r\n          ${changedText ? `\r\n          <div class=\"tone-section\">\r\n            <h5>üìä Changed Text Sentiment</h5>\r\n            <div class=\"sentiment-result\">\r\n              <strong>Primary Sentiment:</strong> ${changedSentiment.label} (${(changedSentiment.score * 100).toFixed(1)}% confidence)\r\n            </div>\r\n          </div>\r\n          ` : ''}\r\n          \r\n          <div class=\"tone-section\">\r\n            <h5>üí° Tone Insights</h5>\r\n            <ul>\r\n              <li>Sentiment analysis powered by Hugging Face AI models</li>\r\n              <li>Consider your target audience when choosing tone</li>\r\n              <li>Maintain consistency throughout your document</li>\r\n              ${originalSentiment.label !== changedSentiment.label ? '<li>‚ö†Ô∏è Tone shift detected between versions</li>' : ''}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      `;\r\n    } catch (error) {\r\n      console.error('Error generating tone analysis:', error);\r\n      return this.getFallbackToneAnalysis();\r\n    }\r\n  }\r\n\r\n  // Analyze sentiment using Hugging Face sentiment model\r\n  async analyzeSentiment(text) {\r\n    if (!text.trim()) {\r\n      return { label: 'NEUTRAL', score: 0.5 };\r\n    }\r\n\r\n    try {\r\n      const result = await this.callHuggingFaceAPI(this.config.models.sentiment, {\r\n        inputs: text.substring(0, 500) // Limit text length for API\r\n      });\r\n\r\n      const topResult = result[0] || { label: 'NEUTRAL', score: 0.5 };\r\n      return topResult;\r\n    } catch (error) {\r\n      console.error('Error analyzing sentiment:', error);\r\n      return { label: 'NEUTRAL', score: 0.5 };\r\n    }\r\n  }\r\n\r\n  // Generate cleanup analysis\r\n  async generateCleanupAnalysis(originalText, changedText) {\r\n    const issues = this.detectFormattingIssues(originalText + '\\n' + changedText);\r\n    \r\n    return `\r\n      <div class=\"ai-cleanup\">\r\n        <h4>üßπ Text Cleanup Analysis</h4>\r\n        \r\n        <div class=\"cleanup-section\">\r\n          <h5>üîç Issues Detected</h5>\r\n          ${issues.length > 0 ? `\r\n            <ul>\r\n              ${issues.map(issue => `<li>${issue}</li>`).join('')}\r\n            </ul>\r\n          ` : '<p>‚úÖ No major formatting issues detected!</p>'}\r\n        </div>\r\n        \r\n        <div class=\"cleanup-section\">\r\n          <h5>‚ú® Cleanup Recommendations</h5>\r\n          <ul>\r\n            <li>Remove trailing whitespace at line ends</li>\r\n            <li>Standardize line break usage</li>\r\n            <li>Fix inconsistent punctuation</li>\r\n            <li>Normalize quotation marks</li>\r\n            <li>Remove unnecessary special characters</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  // Helper methods\r\n  calculateTextStats(originalText, changedText) {\r\n    return {\r\n      originalLines: originalText.split('\\n').length,\r\n      changedLines: changedText.split('\\n').length,\r\n      originalWords: originalText.split(/\\s+/).filter(w => w.length > 0).length,\r\n      changedWords: changedText.split(/\\s+/).filter(w => w.length > 0).length,\r\n      originalChars: originalText.length,\r\n      changedChars: changedText.length\r\n    };\r\n  }\r\n\r\n  detectFormattingIssues(text) {\r\n    const issues = [];\r\n    if (text.includes('  ')) issues.push('Multiple consecutive spaces found');\r\n    if (text.includes('\\n\\n\\n')) issues.push('Excessive line breaks detected');\r\n    if (text.match(/[.]{2,}/)) issues.push('Multiple periods found');\r\n    if (text.match(/[!]{2,}/)) issues.push('Multiple exclamation marks found');\r\n    if (text.match(/[?]{2,}/)) issues.push('Multiple question marks found');\r\n    return issues;\r\n  }\r\n\r\n  // Fallback methods for when API calls fail\r\n  getFallbackExplanation(originalText, changedText) {\r\n    const stats = this.calculateTextStats(originalText, changedText);\r\n    const wordDiff = stats.changedWords - stats.originalWords;\r\n    const lineDiff = stats.changedLines - stats.originalLines;\r\n    const charDiff = stats.changedChars - stats.originalChars;\r\n    \r\n    return `\r\n      <div class=\"ai-explanation\">\r\n        <h4>üìä Text Analysis (Local Processing)</h4>\r\n        <div class=\"analysis-stats\">\r\n          <div class=\"stat-item\">\r\n            <strong>Original Text:</strong> ${stats.originalLines} lines, ${stats.originalWords} words, ${stats.originalChars} characters\r\n          </div>\r\n          <div class=\"stat-item\">\r\n            <strong>Changed Text:</strong> ${stats.changedLines} lines, ${stats.changedWords} words, ${stats.changedChars} characters\r\n          </div>\r\n          <div class=\"stat-item\">\r\n            <strong>Net Changes:</strong> ${lineDiff > 0 ? '+' : ''}${lineDiff} lines, ${wordDiff > 0 ? '+' : ''}${wordDiff} words, ${charDiff > 0 ? '+' : ''}${charDiff} characters\r\n          </div>\r\n        </div>\r\n        \r\n        <h4>üîç Analysis Results</h4>\r\n        <ul>\r\n          ${originalText === changedText ? '<li>‚úÖ No changes detected - texts are identical</li>' : ''}\r\n          ${Math.abs(wordDiff) > 0 ? `<li>üìù Word count ${wordDiff > 0 ? 'increased' : 'decreased'} by ${Math.abs(wordDiff)} words</li>` : ''}\r\n          ${Math.abs(lineDiff) > 0 ? `<li>üìÑ Line count ${lineDiff > 0 ? 'increased' : 'decreased'} by ${Math.abs(lineDiff)} lines</li>` : ''}\r\n          ${Math.abs(charDiff) > stats.originalChars * 0.5 ? '<li>‚ö†Ô∏è Significant content change detected (>50% length change)</li>' : ''}\r\n          ${Math.abs(charDiff) < stats.originalChars * 0.1 ? '<li>‚ú® Minor changes detected (<10% length change)</li>' : ''}\r\n        </ul>\r\n        \r\n        <div class=\"ai-note\">\r\n          <p><em>Note: This is a local analysis. For AI-powered insights, please check your Hugging Face API configuration.</em></p>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  getFallbackRewrite() {\r\n    return `\r\n      <div class=\"ai-rewrite\">\r\n        <h4>‚ú® Writing Improvement Suggestions (Local Analysis)</h4>\r\n        <div class=\"rewrite-suggestions\">\r\n          <h5>üìù General Writing Tips</h5>\r\n          <ul>\r\n            <li><strong>Clarity:</strong> Use clear, concise language and avoid jargon</li>\r\n            <li><strong>Structure:</strong> Break up long sentences into shorter, more readable ones</li>\r\n            <li><strong>Voice:</strong> Use active voice when possible for stronger impact</li>\r\n            <li><strong>Consistency:</strong> Maintain consistent terminology and tone throughout</li>\r\n            <li><strong>Grammar:</strong> Check for spelling, grammar, and punctuation errors</li>\r\n          </ul>\r\n          \r\n          <h5>üéØ Content Enhancement</h5>\r\n          <ul>\r\n            <li>Remove redundant words and phrases</li>\r\n            <li>Add transitional phrases for better flow</li>\r\n            <li>Use specific examples to support your points</li>\r\n            <li>Ensure each paragraph has a clear main idea</li>\r\n          </ul>\r\n        </div>\r\n        \r\n        <div class=\"ai-note\">\r\n          <p><em>Note: For AI-powered rewrite suggestions, please configure your Hugging Face API key.</em></p>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  getFallbackSummary(originalText, changedText) {\r\n    const stats = this.calculateTextStats(originalText, changedText);\r\n    const combinedLength = originalText.length + changedText.length;\r\n    const hasChanges = originalText !== changedText;\r\n    \r\n    return `\r\n      <div class=\"ai-summary\">\r\n        <h4>üìù Text Summary (Local Analysis)</h4>\r\n        <div class=\"summary-content\">\r\n          <p><strong>Document Overview:</strong> This comparison includes ${stats.originalWords + stats.changedWords} total words across both text versions.</p>\r\n          \r\n          ${hasChanges ? `\r\n            <p><strong>Changes Detected:</strong> The text has been modified with ${Math.abs(stats.changedWords - stats.originalWords)} word difference and ${Math.abs(stats.changedLines - stats.originalLines)} line difference.</p>\r\n          ` : `\r\n            <p><strong>No Changes:</strong> Both text versions are identical.</p>\r\n          `}\r\n          \r\n          <div class=\"summary-stats\">\r\n            <p><strong>Text Statistics:</strong></p>\r\n            <ul>\r\n              <li>Total characters: ${combinedLength}</li>\r\n              <li>Original version: ${stats.originalWords} words, ${stats.originalLines} lines</li>\r\n              <li>Changed version: ${stats.changedWords} words, ${stats.changedLines} lines</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"ai-note\">\r\n          <p><em>Note: For AI-generated summaries, please configure your Hugging Face API key.</em></p>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  getFallbackToneAnalysis() {\r\n    return `\r\n      <div class=\"ai-tone\">\r\n        <h4>üé≠ Tone Analysis Guidelines (Local Analysis)</h4>\r\n        \r\n        <div class=\"tone-section\">\r\n          <h5>üìã Manual Tone Assessment</h5>\r\n          <p>Consider these aspects when evaluating your text's tone:</p>\r\n          <ul>\r\n            <li><strong>Formality Level:</strong> Is the language formal, informal, or conversational?</li>\r\n            <li><strong>Emotional Tone:</strong> Does the text convey positive, negative, or neutral emotions?</li>\r\n            <li><strong>Authority:</strong> Is the tone confident, uncertain, or questioning?</li>\r\n            <li><strong>Audience Appropriateness:</strong> Does the tone match your intended audience?</li>\r\n          </ul>\r\n        </div>\r\n        \r\n        <div class=\"tone-section\">\r\n          <h5>üí° Tone Consistency Tips</h5>\r\n          <ul>\r\n            <li>Maintain consistent voice throughout your document</li>\r\n            <li>Match tone to your purpose (informative, persuasive, entertaining)</li>\r\n            <li>Consider cultural context and audience expectations</li>\r\n            <li>Use appropriate vocabulary for your target readers</li>\r\n            <li>Balance professionalism with accessibility</li>\r\n          </ul>\r\n        </div>\r\n        \r\n        <div class=\"ai-note\">\r\n          <p><em>Note: For AI-powered sentiment analysis, please configure your Hugging Face API key.</em></p>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  // Format the response into the expected structure\r\n  formatResponse(type, content) {\r\n    const typeIcons = {\r\n      explain: 'üß†',\r\n      rewrite: '‚ú®',\r\n      summary: 'üìù',\r\n      tone: 'üé≠',\r\n      cleanup: 'üßπ'\r\n    };\r\n\r\n    const typeTitles = {\r\n      explain: 'Hugging Face AI Explanation',\r\n      rewrite: 'Hugging Face AI Rewrite Suggestions',\r\n      summary: 'Hugging Face AI Summary',\r\n      tone: 'Hugging Face AI Tone Analysis',\r\n      cleanup: 'Hugging Face AI Text Cleanup'\r\n    };\r\n\r\n    return {\r\n      title: `${typeIcons[type] || 'ü§ñ'} ${typeTitles[type] || 'Hugging Face AI Analysis'}`,\r\n      content: content,\r\n      type: type\r\n    };\r\n  }\r\n\r\n  // Test the Hugging Face connection\r\n  async testConnection() {\r\n    console.log('Testing Hugging Face connection...');\r\n    console.log('API Key configured:', this.isConfigured());\r\n    console.log('API Key preview:', this.config.apiKey ? `${this.config.apiKey.substring(0, 10)}...` : 'none');\r\n    \r\n    if (!this.isConfigured()) {\r\n      return { success: false, error: 'API key not configured' };\r\n    }\r\n    \r\n    try {\r\n      // Use a simpler model for testing\r\n      const result = await this.callHuggingFaceAPI('gpt2', {\r\n        inputs: \"Hello world\",\r\n        parameters: { max_length: 20 }\r\n      });\r\n      console.log('API test result:', result);\r\n      return { success: true, response: 'Connection successful!', data: result };\r\n    } catch (error) {\r\n      console.error('API test failed:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n\r\n  // Debug method to check configuration\r\n  debugConfig() {\r\n    console.log('=== Hugging Face Debug Info ===');\r\n    console.log('Environment API Key:', process.env.REACT_APP_HUGGINGFACE_API_KEY ? 'Found' : 'Not found');\r\n    console.log('Config API Key:', this.config.apiKey ? 'Found' : 'Not found');\r\n    console.log('API Key length:', this.config.apiKey ? this.config.apiKey.length : 0);\r\n    console.log('Is Configured:', this.isConfigured());\r\n    console.log('Base URL:', this.config.baseUrl);\r\n    console.log('Models:', this.config.models);\r\n    console.log('==============================');\r\n  }\r\n\r\n  // Get available models\r\n  getAvailableModels() {\r\n    return {\r\n      textGeneration: [\r\n        'meta-llama/Llama-2-7b-chat-hf',\r\n        'microsoft/DialoGPT-large',\r\n        'EleutherAI/gpt-neo-2.7B',\r\n        'mistralai/Mistral-7B-Instruct-v0.1',\r\n        'EleutherAI/gpt-neo-1.3B'\r\n      ],\r\n      summarization: [\r\n        'facebook/bart-large-cnn',\r\n        'google/pegasus-xsum',\r\n        't5-base',\r\n        't5-small'\r\n      ],\r\n      sentiment: [\r\n        'cardiffnlp/twitter-roberta-base-sentiment-latest',\r\n        'nlptown/bert-base-multilingual-uncased-sentiment',\r\n        'distilbert-base-uncased-finetuned-sst-2-english'\r\n      ]\r\n    };\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}