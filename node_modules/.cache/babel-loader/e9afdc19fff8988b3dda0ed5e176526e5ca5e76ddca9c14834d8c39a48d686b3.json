{"ast":null,"code":"/**\r\n * Hugging Face API Service for QuickDiff React App\r\n * Supports Hugging Face Inference API for text analysis\r\n */\n\nexport class HuggingFaceService {\n  constructor() {\n    this.config = {\n      apiKey: process.env.REACT_APP_HUGGINGFACE_API_KEY || '',\n      // Hugging Face API token from environment\n      baseUrl: 'https://api-inference.huggingface.co/models',\n      models: {\n        textGeneration: 'microsoft/DialoGPT-medium',\n        // More reliable text generation model\n        textGenerationFallback: 'gpt2',\n        // Fallback option\n        summarization: 'facebook/bart-large-cnn',\n        // Best summarization model\n        sentiment: 'cardiffnlp/twitter-roberta-base-sentiment-latest',\n        // Best sentiment analysis\n        textClassification: 'unitary/toxic-bert' // For cleanup analysis\n      },\n      maxLength: 1000,\n      temperature: 0.7,\n      waitForModel: true // Wait for model to load if needed\n    };\n\n    // Load config from localStorage if available\n    this.loadConfig();\n  }\n  loadConfig() {\n    try {\n      const savedConfig = localStorage.getItem('quickdiff_hf_config');\n      if (savedConfig) {\n        const parsedConfig = JSON.parse(savedConfig);\n        // Don't override API key from environment with localStorage\n        delete parsedConfig.apiKey;\n        this.config = {\n          ...this.config,\n          ...parsedConfig\n        };\n      }\n\n      // Ensure environment variable always takes precedence\n      const envApiKey = process.env.REACT_APP_HUGGINGFACE_API_KEY;\n      if (envApiKey) {\n        this.config.apiKey = envApiKey;\n      }\n    } catch (error) {\n      console.error('Error loading Hugging Face config:', error);\n    }\n  }\n  saveConfig() {\n    try {\n      // Don't save API key to localStorage for security\n      const configToSave = {\n        ...this.config\n      };\n      delete configToSave.apiKey;\n      localStorage.setItem('quickdiff_hf_config', JSON.stringify(configToSave));\n    } catch (error) {\n      console.error('Error saving Hugging Face config:', error);\n    }\n  }\n  updateConfig(newConfig) {\n    this.config = {\n      ...this.config,\n      ...newConfig\n    };\n    this.saveConfig();\n  }\n  getConfig() {\n    return {\n      ...this.config\n    };\n  }\n\n  // Check if Hugging Face is properly configured\n  isConfigured() {\n    const hasKey = this.config.apiKey && this.config.apiKey.trim().length > 0;\n    const isValidKey = this.config.apiKey && this.config.apiKey.startsWith('hf_');\n    const configured = hasKey && isValidKey;\n    console.log('🔍 HuggingFace isConfigured check:', {\n      envVar: process.env.REACT_APP_HUGGINGFACE_API_KEY ? 'Found' : 'Not found',\n      hasApiKey: !!this.config.apiKey,\n      apiKeyLength: this.config.apiKey ? this.config.apiKey.length : 0,\n      apiKeyPreview: this.config.apiKey ? `${this.config.apiKey.substring(0, 10)}...` : 'none',\n      startsWithHf: isValidKey,\n      configured: configured\n    });\n    return configured;\n  }\n\n  // Generate analysis using Hugging Face models\n  async generateAnalysis(type, originalText, changedText) {\n    console.log('🚀 generateAnalysis called with type:', type);\n    console.log('🔧 isConfigured():', this.isConfigured());\n    if (!this.isConfigured()) {\n      console.log('❌ API not configured, throwing error');\n      throw new Error('Hugging Face API not configured. Please set up your API token.');\n    }\n    console.log('✅ API configured, proceeding with analysis...');\n    try {\n      let analysis;\n      switch (type) {\n        case 'explain':\n          console.log('📝 Generating explanation...');\n          analysis = await this.generateExplanation(originalText, changedText);\n          break;\n        case 'rewrite':\n          console.log('✨ Generating rewrite suggestions...');\n          analysis = await this.generateRewriteSuggestions(originalText, changedText);\n          break;\n        case 'summary':\n          console.log('📄 Generating summary...');\n          analysis = await this.generateSummary(originalText, changedText);\n          break;\n        case 'tone':\n          console.log('🎭 Generating tone analysis...');\n          analysis = await this.generateToneAnalysis(originalText, changedText);\n          break;\n        case 'cleanup':\n          console.log('🧹 Generating cleanup analysis...');\n          analysis = await this.generateCleanupAnalysis(originalText, changedText);\n          break;\n        default:\n          console.log('📝 Generating default explanation...');\n          analysis = await this.generateExplanation(originalText, changedText);\n      }\n      console.log('✅ Analysis generated successfully');\n      return this.formatResponse(type, analysis);\n    } catch (error) {\n      console.error('❌ Hugging Face API Error:', error);\n      throw new Error(`Failed to generate ${type} analysis: ${error.message}`);\n    }\n  }\n\n  // Generate local analysis without API (fallback methods)\n  async generateLocalAnalysis(type, originalText, changedText) {\n    try {\n      let analysis;\n      switch (type) {\n        case 'explain':\n          analysis = this.getFallbackExplanation(originalText, changedText);\n          break;\n        case 'rewrite':\n          analysis = this.getFallbackRewrite();\n          break;\n        case 'summary':\n          analysis = this.getFallbackSummary(originalText, changedText);\n          break;\n        case 'tone':\n          analysis = this.getFallbackToneAnalysis();\n          break;\n        case 'cleanup':\n          analysis = this.generateCleanupAnalysis(originalText, changedText);\n          break;\n        default:\n          analysis = this.getFallbackExplanation(originalText, changedText);\n      }\n      return this.formatResponse(type, analysis);\n    } catch (error) {\n      console.error('Local Analysis Error:', error);\n      throw new Error(`Failed to generate local ${type} analysis: ${error.message}`);\n    }\n  }\n\n  // Call Hugging Face Inference API\n  async callHuggingFaceAPI(modelName, payload) {\n    const url = `${this.config.baseUrl}/${modelName}`;\n    console.log('🌐 Making Hugging Face API call to:', url);\n    console.log('🔑 Using API key:', this.config.apiKey ? `${this.config.apiKey.substring(0, 10)}...` : 'NONE');\n    console.log('📦 Payload:', JSON.stringify(payload, null, 2));\n    const requestBody = {\n      ...payload,\n      options: {\n        wait_for_model: this.config.waitForModel,\n        use_cache: true\n      }\n    };\n    console.log('📤 Full request body:', JSON.stringify(requestBody, null, 2));\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${this.config.apiKey}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestBody)\n    });\n    console.log('📥 Response status:', response.status);\n    console.log('📥 Response headers:', Object.fromEntries(response.headers.entries()));\n    if (!response.ok) {\n      const error = await response.text();\n      console.error('❌ API Error Response:', error);\n      throw new Error(`Hugging Face API error: ${response.status} - ${error}`);\n    }\n    const result = await response.json();\n    console.log('✅ API Success Response:', result);\n    return result;\n  }\n\n  // Generate text using text generation model\n  async generateText(prompt, maxLength = 500) {\n    console.log('🎯 generateText called with:', {\n      model: this.config.models.textGeneration,\n      promptLength: prompt.length,\n      maxLength: maxLength\n    });\n    try {\n      var _result$;\n      // Try primary model first\n      const result = await this.callHuggingFaceAPI(this.config.models.textGeneration, {\n        inputs: prompt,\n        parameters: {\n          max_length: maxLength,\n          temperature: this.config.temperature,\n          do_sample: true,\n          top_p: 0.9,\n          pad_token_id: 50256\n        }\n      });\n      const generatedText = ((_result$ = result[0]) === null || _result$ === void 0 ? void 0 : _result$.generated_text) || '';\n      console.log('📝 Generated text length:', generatedText.length);\n      return generatedText;\n    } catch (error) {\n      console.log('⚠️ Primary model failed, trying fallback model...');\n      try {\n        var _result$2;\n        // Try fallback model\n        const result = await this.callHuggingFaceAPI(this.config.models.textGenerationFallback, {\n          inputs: prompt,\n          parameters: {\n            max_length: maxLength,\n            temperature: this.config.temperature,\n            do_sample: true,\n            top_p: 0.9\n          }\n        });\n        const generatedText = ((_result$2 = result[0]) === null || _result$2 === void 0 ? void 0 : _result$2.generated_text) || '';\n        console.log('📝 Fallback generated text length:', generatedText.length);\n        return generatedText;\n      } catch (fallbackError) {\n        console.error('❌ Both models failed:', fallbackError);\n        throw new Error(`Text generation failed: ${fallbackError.message}`);\n      }\n    }\n  }\n\n  // Generate explanation analysis\n  async generateExplanation(originalText, changedText) {\n    console.log('🚀 Starting Hugging Face API explanation generation...');\n    const stats = this.calculateTextStats(originalText, changedText);\n\n    // Create a shorter, more focused prompt for better results\n    const prompt = `Compare these texts and explain the key differences:\n\nText 1: \"${originalText.substring(0, 150)}${originalText.length > 150 ? '...' : ''}\"\nText 2: \"${changedText.substring(0, 150)}${changedText.length > 150 ? '...' : ''}\"\n\nAnalysis:`;\n    try {\n      console.log('📝 Calling Hugging Face API with prompt:', prompt.substring(0, 100) + '...');\n      const aiInsight = await this.generateText(prompt, 200);\n      console.log('✅ Hugging Face API response received:', aiInsight.substring(0, 100) + '...');\n\n      // Clean up the AI response by removing the original prompt\n      let cleanedInsight = aiInsight;\n      if (aiInsight.includes(prompt)) {\n        cleanedInsight = aiInsight.replace(prompt, '').trim();\n      }\n\n      // If the response is too short or empty, provide a basic analysis\n      if (!cleanedInsight || cleanedInsight.length < 10) {\n        cleanedInsight = \"The AI analysis shows differences in content structure and word usage between the two text versions.\";\n      }\n      return `\n        <div class=\"ai-explanation\">\n          <h4>📊 Hugging Face AI Text Analysis</h4>\n          <div class=\"analysis-stats\">\n            <div class=\"stat-item\">\n              <strong>Original Text:</strong> ${stats.originalLines} lines, ${stats.originalWords} words, ${stats.originalChars} characters\n            </div>\n            <div class=\"stat-item\">\n              <strong>Changed Text:</strong> ${stats.changedLines} lines, ${stats.changedWords} words, ${stats.changedChars} characters\n            </div>\n            <div class=\"stat-item\">\n              <strong>Difference:</strong> ${Math.abs(stats.changedLines - stats.originalLines)} lines, ${Math.abs(stats.changedWords - stats.originalWords)} words, ${Math.abs(stats.changedChars - stats.originalChars)} characters\n            </div>\n          </div>\n          \n          <h4>🤖 AI Insights from Hugging Face</h4>\n          <div class=\"ai-insight\">\n            ${cleanedInsight}\n          </div>\n          \n          <h4>🔍 Key Changes Detected</h4>\n          <ul>\n            ${stats.originalLines !== stats.changedLines ? `<li>Line count changed from ${stats.originalLines} to ${stats.changedLines}</li>` : ''}\n            ${stats.originalWords !== stats.changedWords ? `<li>Word count changed from ${stats.originalWords} to ${stats.changedWords}</li>` : ''}\n            ${originalText === changedText ? '<li>No changes detected - texts are identical</li>' : ''}\n            ${Math.abs(stats.changedChars - stats.originalChars) > stats.originalChars * 0.5 ? '<li>⚠️ Significant length change detected</li>' : ''}\n          </ul>\n        </div>\n      `;\n    } catch (error) {\n      console.error('❌ Hugging Face API failed for explanation:', error);\n      console.error('Full error details:', error.message, error.stack);\n      throw error; // Re-throw to trigger fallback in App.js\n    }\n  }\n\n  // Generate rewrite suggestions\n  async generateRewriteSuggestions(originalText, changedText) {\n    const combinedText = originalText + ' ' + changedText;\n    const prompt = `Improve this text for better clarity and readability:\n\n\"${combinedText.substring(0, 200)}${combinedText.length > 200 ? '...' : ''}\"\n\nSuggestions:`;\n    try {\n      console.log('✨ Generating rewrite suggestions...');\n      const suggestions = await this.generateText(prompt, 250);\n      console.log('✅ Rewrite suggestions received');\n\n      // Clean up the AI response\n      let cleanedSuggestions = suggestions;\n      if (suggestions.includes(prompt)) {\n        cleanedSuggestions = suggestions.replace(prompt, '').trim();\n      }\n\n      // If the response is too short or empty, provide basic suggestions\n      if (!cleanedSuggestions || cleanedSuggestions.length < 10) {\n        cleanedSuggestions = \"Consider improving sentence structure, using more precise vocabulary, and ensuring clear transitions between ideas.\";\n      }\n      return `\n        <div class=\"ai-rewrite\">\n          <h4>✨ Hugging Face AI Rewrite Suggestions</h4>\n          <div class=\"ai-suggestions\">\n            ${cleanedSuggestions}\n          </div>\n          \n          <h4>📝 General Improvements</h4>\n          <ul>\n            <li>Consider breaking long sentences into shorter, more readable ones</li>\n            <li>Use active voice where possible for clearer communication</li>\n            <li>Ensure consistent terminology throughout the text</li>\n            <li>Remove redundant words and phrases</li>\n            <li>Add transitional phrases for better flow</li>\n          </ul>\n        </div>\n      `;\n    } catch (error) {\n      console.error('❌ Error generating rewrite suggestions:', error);\n      throw error; // Let the main function handle fallback\n    }\n  }\n\n  // Generate summary using summarization model\n  async generateSummary(originalText, changedText) {\n    const combinedText = originalText + '\\n\\n' + changedText;\n    try {\n      var _result$3;\n      const result = await this.callHuggingFaceAPI(this.config.models.summarization, {\n        inputs: combinedText,\n        parameters: {\n          max_length: 150,\n          min_length: 30,\n          do_sample: false\n        }\n      });\n      const summary = ((_result$3 = result[0]) === null || _result$3 === void 0 ? void 0 : _result$3.summary_text) || 'Unable to generate summary';\n      return `\n        <div class=\"ai-summary\">\n          <h4>📝 AI-Generated Summary</h4>\n          <div class=\"summary-content\">\n            <p>${summary}</p>\n          </div>\n          \n          <h4>📊 Text Overview</h4>\n          <p>Combined text length: ${combinedText.length} characters</p>\n          <p>Analysis includes both original and changed versions for comprehensive understanding.</p>\n        </div>\n      `;\n    } catch (error) {\n      console.error('Error generating summary:', error);\n      return this.getFallbackSummary(originalText, changedText);\n    }\n  }\n\n  // Generate tone analysis using sentiment model\n  async generateToneAnalysis(originalText, changedText) {\n    try {\n      const [originalSentiment, changedSentiment] = await Promise.all([this.analyzeSentiment(originalText), this.analyzeSentiment(changedText)]);\n      return `\n        <div class=\"ai-tone\">\n          <h4>🎭 AI Tone Analysis</h4>\n          \n          <div class=\"tone-section\">\n            <h5>📊 Original Text Sentiment</h5>\n            <div class=\"sentiment-result\">\n              <strong>Primary Sentiment:</strong> ${originalSentiment.label} (${(originalSentiment.score * 100).toFixed(1)}% confidence)\n            </div>\n          </div>\n          \n          ${changedText ? `\n          <div class=\"tone-section\">\n            <h5>📊 Changed Text Sentiment</h5>\n            <div class=\"sentiment-result\">\n              <strong>Primary Sentiment:</strong> ${changedSentiment.label} (${(changedSentiment.score * 100).toFixed(1)}% confidence)\n            </div>\n          </div>\n          ` : ''}\n          \n          <div class=\"tone-section\">\n            <h5>💡 Tone Insights</h5>\n            <ul>\n              <li>Sentiment analysis powered by Hugging Face AI models</li>\n              <li>Consider your target audience when choosing tone</li>\n              <li>Maintain consistency throughout your document</li>\n              ${originalSentiment.label !== changedSentiment.label ? '<li>⚠️ Tone shift detected between versions</li>' : ''}\n            </ul>\n          </div>\n        </div>\n      `;\n    } catch (error) {\n      console.error('Error generating tone analysis:', error);\n      return this.getFallbackToneAnalysis();\n    }\n  }\n\n  // Analyze sentiment using Hugging Face sentiment model\n  async analyzeSentiment(text) {\n    if (!text.trim()) {\n      return {\n        label: 'NEUTRAL',\n        score: 0.5\n      };\n    }\n    try {\n      const result = await this.callHuggingFaceAPI(this.config.models.sentiment, {\n        inputs: text.substring(0, 500) // Limit text length for API\n      });\n      const topResult = result[0] || {\n        label: 'NEUTRAL',\n        score: 0.5\n      };\n      return topResult;\n    } catch (error) {\n      console.error('Error analyzing sentiment:', error);\n      return {\n        label: 'NEUTRAL',\n        score: 0.5\n      };\n    }\n  }\n\n  // Generate cleanup analysis\n  async generateCleanupAnalysis(originalText, changedText) {\n    const issues = this.detectFormattingIssues(originalText + '\\n' + changedText);\n    return `\n      <div class=\"ai-cleanup\">\n        <h4>🧹 Text Cleanup Analysis</h4>\n        \n        <div class=\"cleanup-section\">\n          <h5>🔍 Issues Detected</h5>\n          ${issues.length > 0 ? `\n            <ul>\n              ${issues.map(issue => `<li>${issue}</li>`).join('')}\n            </ul>\n          ` : '<p>✅ No major formatting issues detected!</p>'}\n        </div>\n        \n        <div class=\"cleanup-section\">\n          <h5>✨ Cleanup Recommendations</h5>\n          <ul>\n            <li>Remove trailing whitespace at line ends</li>\n            <li>Standardize line break usage</li>\n            <li>Fix inconsistent punctuation</li>\n            <li>Normalize quotation marks</li>\n            <li>Remove unnecessary special characters</li>\n          </ul>\n        </div>\n      </div>\n    `;\n  }\n\n  // Helper methods\n  calculateTextStats(originalText, changedText) {\n    return {\n      originalLines: originalText.split('\\n').length,\n      changedLines: changedText.split('\\n').length,\n      originalWords: originalText.split(/\\s+/).filter(w => w.length > 0).length,\n      changedWords: changedText.split(/\\s+/).filter(w => w.length > 0).length,\n      originalChars: originalText.length,\n      changedChars: changedText.length\n    };\n  }\n  detectFormattingIssues(text) {\n    const issues = [];\n    if (text.includes('  ')) issues.push('Multiple consecutive spaces found');\n    if (text.includes('\\n\\n\\n')) issues.push('Excessive line breaks detected');\n    if (text.match(/[.]{2,}/)) issues.push('Multiple periods found');\n    if (text.match(/[!]{2,}/)) issues.push('Multiple exclamation marks found');\n    if (text.match(/[?]{2,}/)) issues.push('Multiple question marks found');\n    return issues;\n  }\n\n  // Fallback methods for when API calls fail\n  getFallbackExplanation(originalText, changedText) {\n    const stats = this.calculateTextStats(originalText, changedText);\n    const wordDiff = stats.changedWords - stats.originalWords;\n    const lineDiff = stats.changedLines - stats.originalLines;\n    const charDiff = stats.changedChars - stats.originalChars;\n    return `\n      <div class=\"ai-explanation\">\n        <h4>📊 Text Analysis (Local Processing)</h4>\n        <div class=\"analysis-stats\">\n          <div class=\"stat-item\">\n            <strong>Original Text:</strong> ${stats.originalLines} lines, ${stats.originalWords} words, ${stats.originalChars} characters\n          </div>\n          <div class=\"stat-item\">\n            <strong>Changed Text:</strong> ${stats.changedLines} lines, ${stats.changedWords} words, ${stats.changedChars} characters\n          </div>\n          <div class=\"stat-item\">\n            <strong>Net Changes:</strong> ${lineDiff > 0 ? '+' : ''}${lineDiff} lines, ${wordDiff > 0 ? '+' : ''}${wordDiff} words, ${charDiff > 0 ? '+' : ''}${charDiff} characters\n          </div>\n        </div>\n        \n        <h4>🔍 Analysis Results</h4>\n        <ul>\n          ${originalText === changedText ? '<li>✅ No changes detected - texts are identical</li>' : ''}\n          ${Math.abs(wordDiff) > 0 ? `<li>📝 Word count ${wordDiff > 0 ? 'increased' : 'decreased'} by ${Math.abs(wordDiff)} words</li>` : ''}\n          ${Math.abs(lineDiff) > 0 ? `<li>📄 Line count ${lineDiff > 0 ? 'increased' : 'decreased'} by ${Math.abs(lineDiff)} lines</li>` : ''}\n          ${Math.abs(charDiff) > stats.originalChars * 0.5 ? '<li>⚠️ Significant content change detected (>50% length change)</li>' : ''}\n          ${Math.abs(charDiff) < stats.originalChars * 0.1 ? '<li>✨ Minor changes detected (<10% length change)</li>' : ''}\n        </ul>\n        \n        <div class=\"ai-note\">\n          <p><em>Note: This is a local analysis. For AI-powered insights, please check your Hugging Face API configuration.</em></p>\n        </div>\n      </div>\n    `;\n  }\n  getFallbackRewrite() {\n    return `\n      <div class=\"ai-rewrite\">\n        <h4>✨ Writing Improvement Suggestions (Local Analysis)</h4>\n        <div class=\"rewrite-suggestions\">\n          <h5>📝 General Writing Tips</h5>\n          <ul>\n            <li><strong>Clarity:</strong> Use clear, concise language and avoid jargon</li>\n            <li><strong>Structure:</strong> Break up long sentences into shorter, more readable ones</li>\n            <li><strong>Voice:</strong> Use active voice when possible for stronger impact</li>\n            <li><strong>Consistency:</strong> Maintain consistent terminology and tone throughout</li>\n            <li><strong>Grammar:</strong> Check for spelling, grammar, and punctuation errors</li>\n          </ul>\n          \n          <h5>🎯 Content Enhancement</h5>\n          <ul>\n            <li>Remove redundant words and phrases</li>\n            <li>Add transitional phrases for better flow</li>\n            <li>Use specific examples to support your points</li>\n            <li>Ensure each paragraph has a clear main idea</li>\n          </ul>\n        </div>\n        \n        <div class=\"ai-note\">\n          <p><em>Note: For AI-powered rewrite suggestions, please configure your Hugging Face API key.</em></p>\n        </div>\n      </div>\n    `;\n  }\n  getFallbackSummary(originalText, changedText) {\n    const stats = this.calculateTextStats(originalText, changedText);\n    const combinedLength = originalText.length + changedText.length;\n    const hasChanges = originalText !== changedText;\n    return `\n      <div class=\"ai-summary\">\n        <h4>📝 Text Summary (Local Analysis)</h4>\n        <div class=\"summary-content\">\n          <p><strong>Document Overview:</strong> This comparison includes ${stats.originalWords + stats.changedWords} total words across both text versions.</p>\n          \n          ${hasChanges ? `\n            <p><strong>Changes Detected:</strong> The text has been modified with ${Math.abs(stats.changedWords - stats.originalWords)} word difference and ${Math.abs(stats.changedLines - stats.originalLines)} line difference.</p>\n          ` : `\n            <p><strong>No Changes:</strong> Both text versions are identical.</p>\n          `}\n          \n          <div class=\"summary-stats\">\n            <p><strong>Text Statistics:</strong></p>\n            <ul>\n              <li>Total characters: ${combinedLength}</li>\n              <li>Original version: ${stats.originalWords} words, ${stats.originalLines} lines</li>\n              <li>Changed version: ${stats.changedWords} words, ${stats.changedLines} lines</li>\n            </ul>\n          </div>\n        </div>\n        \n        <div class=\"ai-note\">\n          <p><em>Note: For AI-generated summaries, please configure your Hugging Face API key.</em></p>\n        </div>\n      </div>\n    `;\n  }\n  getFallbackToneAnalysis() {\n    return `\n      <div class=\"ai-tone\">\n        <h4>🎭 Tone Analysis Guidelines (Local Analysis)</h4>\n        \n        <div class=\"tone-section\">\n          <h5>📋 Manual Tone Assessment</h5>\n          <p>Consider these aspects when evaluating your text's tone:</p>\n          <ul>\n            <li><strong>Formality Level:</strong> Is the language formal, informal, or conversational?</li>\n            <li><strong>Emotional Tone:</strong> Does the text convey positive, negative, or neutral emotions?</li>\n            <li><strong>Authority:</strong> Is the tone confident, uncertain, or questioning?</li>\n            <li><strong>Audience Appropriateness:</strong> Does the tone match your intended audience?</li>\n          </ul>\n        </div>\n        \n        <div class=\"tone-section\">\n          <h5>💡 Tone Consistency Tips</h5>\n          <ul>\n            <li>Maintain consistent voice throughout your document</li>\n            <li>Match tone to your purpose (informative, persuasive, entertaining)</li>\n            <li>Consider cultural context and audience expectations</li>\n            <li>Use appropriate vocabulary for your target readers</li>\n            <li>Balance professionalism with accessibility</li>\n          </ul>\n        </div>\n        \n        <div class=\"ai-note\">\n          <p><em>Note: For AI-powered sentiment analysis, please configure your Hugging Face API key.</em></p>\n        </div>\n      </div>\n    `;\n  }\n\n  // Format the response into the expected structure\n  formatResponse(type, content) {\n    const typeIcons = {\n      explain: '🧠',\n      rewrite: '✨',\n      summary: '📝',\n      tone: '🎭',\n      cleanup: '🧹'\n    };\n    const typeTitles = {\n      explain: 'Hugging Face AI Explanation',\n      rewrite: 'Hugging Face AI Rewrite Suggestions',\n      summary: 'Hugging Face AI Summary',\n      tone: 'Hugging Face AI Tone Analysis',\n      cleanup: 'Hugging Face AI Text Cleanup'\n    };\n    return {\n      title: `${typeIcons[type] || '🤖'} ${typeTitles[type] || 'Hugging Face AI Analysis'}`,\n      content: content,\n      type: type\n    };\n  }\n\n  // Test the Hugging Face connection\n  async testConnection() {\n    console.log('Testing Hugging Face connection...');\n    console.log('API Key configured:', this.isConfigured());\n    console.log('API Key preview:', this.config.apiKey ? `${this.config.apiKey.substring(0, 10)}...` : 'none');\n    if (!this.isConfigured()) {\n      return {\n        success: false,\n        error: 'API key not configured'\n      };\n    }\n    try {\n      // Use a simpler model for testing\n      const result = await this.callHuggingFaceAPI('gpt2', {\n        inputs: \"Hello world\",\n        parameters: {\n          max_length: 20\n        }\n      });\n      console.log('API test result:', result);\n      return {\n        success: true,\n        response: 'Connection successful!',\n        data: result\n      };\n    } catch (error) {\n      console.error('API test failed:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Debug method to check configuration\n  debugConfig() {\n    console.log('=== Hugging Face Debug Info ===');\n    console.log('Environment API Key:', process.env.REACT_APP_HUGGINGFACE_API_KEY ? 'Found' : 'Not found');\n    console.log('Config API Key:', this.config.apiKey ? 'Found' : 'Not found');\n    console.log('API Key length:', this.config.apiKey ? this.config.apiKey.length : 0);\n    console.log('Is Configured:', this.isConfigured());\n    console.log('Base URL:', this.config.baseUrl);\n    console.log('Models:', this.config.models);\n    console.log('==============================');\n  }\n\n  // Get available models\n  getAvailableModels() {\n    return {\n      textGeneration: ['meta-llama/Llama-2-7b-chat-hf', 'microsoft/DialoGPT-large', 'EleutherAI/gpt-neo-2.7B', 'mistralai/Mistral-7B-Instruct-v0.1', 'EleutherAI/gpt-neo-1.3B'],\n      summarization: ['facebook/bart-large-cnn', 'google/pegasus-xsum', 't5-base', 't5-small'],\n      sentiment: ['cardiffnlp/twitter-roberta-base-sentiment-latest', 'nlptown/bert-base-multilingual-uncased-sentiment', 'distilbert-base-uncased-finetuned-sst-2-english']\n    };\n  }\n}","map":{"version":3,"names":["HuggingFaceService","constructor","config","apiKey","process","env","REACT_APP_HUGGINGFACE_API_KEY","baseUrl","models","textGeneration","textGenerationFallback","summarization","sentiment","textClassification","maxLength","temperature","waitForModel","loadConfig","savedConfig","localStorage","getItem","parsedConfig","JSON","parse","envApiKey","error","console","saveConfig","configToSave","setItem","stringify","updateConfig","newConfig","getConfig","isConfigured","hasKey","trim","length","isValidKey","startsWith","configured","log","envVar","hasApiKey","apiKeyLength","apiKeyPreview","substring","startsWithHf","generateAnalysis","type","originalText","changedText","Error","analysis","generateExplanation","generateRewriteSuggestions","generateSummary","generateToneAnalysis","generateCleanupAnalysis","formatResponse","message","generateLocalAnalysis","getFallbackExplanation","getFallbackRewrite","getFallbackSummary","getFallbackToneAnalysis","callHuggingFaceAPI","modelName","payload","url","requestBody","options","wait_for_model","use_cache","response","fetch","method","headers","body","status","Object","fromEntries","entries","ok","text","result","json","generateText","prompt","model","promptLength","_result$","inputs","parameters","max_length","do_sample","top_p","pad_token_id","generatedText","generated_text","_result$2","fallbackError","stats","calculateTextStats","aiInsight","cleanedInsight","includes","replace","originalLines","originalWords","originalChars","changedLines","changedWords","changedChars","Math","abs","stack","combinedText","suggestions","cleanedSuggestions","_result$3","min_length","summary","summary_text","originalSentiment","changedSentiment","Promise","all","analyzeSentiment","label","score","toFixed","topResult","issues","detectFormattingIssues","map","issue","join","split","filter","w","push","match","wordDiff","lineDiff","charDiff","combinedLength","hasChanges","content","typeIcons","explain","rewrite","tone","cleanup","typeTitles","title","testConnection","success","data","debugConfig","getAvailableModels"],"sources":["C:/Users/Joem/quickdiff-react/src/utils/HuggingFaceService.js"],"sourcesContent":["/**\r\n * Hugging Face API Service for QuickDiff React App\r\n * Supports Hugging Face Inference API for text analysis\r\n */\r\n\r\nexport class HuggingFaceService {\r\n  constructor() {\r\n    this.config = {\r\n      apiKey: process.env.REACT_APP_HUGGINGFACE_API_KEY || '', // Hugging Face API token from environment\r\n      baseUrl: 'https://api-inference.huggingface.co/models',\r\n      models: {\r\n        textGeneration: 'microsoft/DialoGPT-medium', // More reliable text generation model\r\n        textGenerationFallback: 'gpt2', // Fallback option\r\n        summarization: 'facebook/bart-large-cnn', // Best summarization model\r\n        sentiment: 'cardiffnlp/twitter-roberta-base-sentiment-latest', // Best sentiment analysis\r\n        textClassification: 'unitary/toxic-bert' // For cleanup analysis\r\n      },\r\n      maxLength: 1000,\r\n      temperature: 0.7,\r\n      waitForModel: true // Wait for model to load if needed\r\n    };\r\n    \r\n    // Load config from localStorage if available\r\n    this.loadConfig();\r\n  }\r\n\r\n  loadConfig() {\r\n    try {\r\n      const savedConfig = localStorage.getItem('quickdiff_hf_config');\r\n      if (savedConfig) {\r\n        const parsedConfig = JSON.parse(savedConfig);\r\n        // Don't override API key from environment with localStorage\r\n        delete parsedConfig.apiKey;\r\n        this.config = { ...this.config, ...parsedConfig };\r\n      }\r\n      \r\n      // Ensure environment variable always takes precedence\r\n      const envApiKey = process.env.REACT_APP_HUGGINGFACE_API_KEY;\r\n      if (envApiKey) {\r\n        this.config.apiKey = envApiKey;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading Hugging Face config:', error);\r\n    }\r\n  }\r\n\r\n  saveConfig() {\r\n    try {\r\n      // Don't save API key to localStorage for security\r\n      const configToSave = { ...this.config };\r\n      delete configToSave.apiKey;\r\n      localStorage.setItem('quickdiff_hf_config', JSON.stringify(configToSave));\r\n    } catch (error) {\r\n      console.error('Error saving Hugging Face config:', error);\r\n    }\r\n  }\r\n\r\n  updateConfig(newConfig) {\r\n    this.config = { ...this.config, ...newConfig };\r\n    this.saveConfig();\r\n  }\r\n\r\n  getConfig() {\r\n    return { ...this.config };\r\n  }\r\n\r\n  // Check if Hugging Face is properly configured\r\n  isConfigured() {\r\n    const hasKey = this.config.apiKey && this.config.apiKey.trim().length > 0;\r\n    const isValidKey = this.config.apiKey && this.config.apiKey.startsWith('hf_');\r\n    const configured = hasKey && isValidKey;\r\n    \r\n    console.log('🔍 HuggingFace isConfigured check:', {\r\n      envVar: process.env.REACT_APP_HUGGINGFACE_API_KEY ? 'Found' : 'Not found',\r\n      hasApiKey: !!this.config.apiKey,\r\n      apiKeyLength: this.config.apiKey ? this.config.apiKey.length : 0,\r\n      apiKeyPreview: this.config.apiKey ? `${this.config.apiKey.substring(0, 10)}...` : 'none',\r\n      startsWithHf: isValidKey,\r\n      configured: configured\r\n    });\r\n    return configured;\r\n  }\r\n\r\n  // Generate analysis using Hugging Face models\r\n  async generateAnalysis(type, originalText, changedText) {\r\n    console.log('🚀 generateAnalysis called with type:', type);\r\n    console.log('🔧 isConfigured():', this.isConfigured());\r\n    \r\n    if (!this.isConfigured()) {\r\n      console.log('❌ API not configured, throwing error');\r\n      throw new Error('Hugging Face API not configured. Please set up your API token.');\r\n    }\r\n\r\n    console.log('✅ API configured, proceeding with analysis...');\r\n    try {\r\n      let analysis;\r\n      switch (type) {\r\n        case 'explain':\r\n          console.log('📝 Generating explanation...');\r\n          analysis = await this.generateExplanation(originalText, changedText);\r\n          break;\r\n        case 'rewrite':\r\n          console.log('✨ Generating rewrite suggestions...');\r\n          analysis = await this.generateRewriteSuggestions(originalText, changedText);\r\n          break;\r\n        case 'summary':\r\n          console.log('📄 Generating summary...');\r\n          analysis = await this.generateSummary(originalText, changedText);\r\n          break;\r\n        case 'tone':\r\n          console.log('🎭 Generating tone analysis...');\r\n          analysis = await this.generateToneAnalysis(originalText, changedText);\r\n          break;\r\n        case 'cleanup':\r\n          console.log('🧹 Generating cleanup analysis...');\r\n          analysis = await this.generateCleanupAnalysis(originalText, changedText);\r\n          break;\r\n        default:\r\n          console.log('📝 Generating default explanation...');\r\n          analysis = await this.generateExplanation(originalText, changedText);\r\n      }\r\n      \r\n      console.log('✅ Analysis generated successfully');\r\n      return this.formatResponse(type, analysis);\r\n    } catch (error) {\r\n      console.error('❌ Hugging Face API Error:', error);\r\n      throw new Error(`Failed to generate ${type} analysis: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // Generate local analysis without API (fallback methods)\r\n  async generateLocalAnalysis(type, originalText, changedText) {\r\n    try {\r\n      let analysis;\r\n      switch (type) {\r\n        case 'explain':\r\n          analysis = this.getFallbackExplanation(originalText, changedText);\r\n          break;\r\n        case 'rewrite':\r\n          analysis = this.getFallbackRewrite();\r\n          break;\r\n        case 'summary':\r\n          analysis = this.getFallbackSummary(originalText, changedText);\r\n          break;\r\n        case 'tone':\r\n          analysis = this.getFallbackToneAnalysis();\r\n          break;\r\n        case 'cleanup':\r\n          analysis = this.generateCleanupAnalysis(originalText, changedText);\r\n          break;\r\n        default:\r\n          analysis = this.getFallbackExplanation(originalText, changedText);\r\n      }\r\n      \r\n      return this.formatResponse(type, analysis);\r\n    } catch (error) {\r\n      console.error('Local Analysis Error:', error);\r\n      throw new Error(`Failed to generate local ${type} analysis: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // Call Hugging Face Inference API\r\n  async callHuggingFaceAPI(modelName, payload) {\r\n    const url = `${this.config.baseUrl}/${modelName}`;\r\n    console.log('🌐 Making Hugging Face API call to:', url);\r\n    console.log('🔑 Using API key:', this.config.apiKey ? `${this.config.apiKey.substring(0, 10)}...` : 'NONE');\r\n    console.log('📦 Payload:', JSON.stringify(payload, null, 2));\r\n    \r\n    const requestBody = {\r\n      ...payload,\r\n      options: {\r\n        wait_for_model: this.config.waitForModel,\r\n        use_cache: true\r\n      }\r\n    };\r\n    \r\n    console.log('📤 Full request body:', JSON.stringify(requestBody, null, 2));\r\n    \r\n    const response = await fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${this.config.apiKey}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(requestBody)\r\n    });\r\n\r\n    console.log('📥 Response status:', response.status);\r\n    console.log('📥 Response headers:', Object.fromEntries(response.headers.entries()));\r\n\r\n    if (!response.ok) {\r\n      const error = await response.text();\r\n      console.error('❌ API Error Response:', error);\r\n      throw new Error(`Hugging Face API error: ${response.status} - ${error}`);\r\n    }\r\n\r\n    const result = await response.json();\r\n    console.log('✅ API Success Response:', result);\r\n    return result;\r\n  }\r\n\r\n  // Generate text using text generation model\r\n  async generateText(prompt, maxLength = 500) {\r\n    console.log('🎯 generateText called with:', {\r\n      model: this.config.models.textGeneration,\r\n      promptLength: prompt.length,\r\n      maxLength: maxLength\r\n    });\r\n    \r\n    try {\r\n      // Try primary model first\r\n      const result = await this.callHuggingFaceAPI(this.config.models.textGeneration, {\r\n        inputs: prompt,\r\n        parameters: {\r\n          max_length: maxLength,\r\n          temperature: this.config.temperature,\r\n          do_sample: true,\r\n          top_p: 0.9,\r\n          pad_token_id: 50256\r\n        }\r\n      });\r\n\r\n      const generatedText = result[0]?.generated_text || '';\r\n      console.log('📝 Generated text length:', generatedText.length);\r\n      return generatedText;\r\n    } catch (error) {\r\n      console.log('⚠️ Primary model failed, trying fallback model...');\r\n      try {\r\n        // Try fallback model\r\n        const result = await this.callHuggingFaceAPI(this.config.models.textGenerationFallback, {\r\n          inputs: prompt,\r\n          parameters: {\r\n            max_length: maxLength,\r\n            temperature: this.config.temperature,\r\n            do_sample: true,\r\n            top_p: 0.9\r\n          }\r\n        });\r\n\r\n        const generatedText = result[0]?.generated_text || '';\r\n        console.log('📝 Fallback generated text length:', generatedText.length);\r\n        return generatedText;\r\n      } catch (fallbackError) {\r\n        console.error('❌ Both models failed:', fallbackError);\r\n        throw new Error(`Text generation failed: ${fallbackError.message}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Generate explanation analysis\r\n  async generateExplanation(originalText, changedText) {\r\n    console.log('🚀 Starting Hugging Face API explanation generation...');\r\n    const stats = this.calculateTextStats(originalText, changedText);\r\n    \r\n    // Create a shorter, more focused prompt for better results\r\n    const prompt = `Compare these texts and explain the key differences:\r\n\r\nText 1: \"${originalText.substring(0, 150)}${originalText.length > 150 ? '...' : ''}\"\r\nText 2: \"${changedText.substring(0, 150)}${changedText.length > 150 ? '...' : ''}\"\r\n\r\nAnalysis:`;\r\n\r\n    try {\r\n      console.log('📝 Calling Hugging Face API with prompt:', prompt.substring(0, 100) + '...');\r\n      const aiInsight = await this.generateText(prompt, 200);\r\n      console.log('✅ Hugging Face API response received:', aiInsight.substring(0, 100) + '...');\r\n      \r\n      // Clean up the AI response by removing the original prompt\r\n      let cleanedInsight = aiInsight;\r\n      if (aiInsight.includes(prompt)) {\r\n        cleanedInsight = aiInsight.replace(prompt, '').trim();\r\n      }\r\n      \r\n      // If the response is too short or empty, provide a basic analysis\r\n      if (!cleanedInsight || cleanedInsight.length < 10) {\r\n        cleanedInsight = \"The AI analysis shows differences in content structure and word usage between the two text versions.\";\r\n      }\r\n      \r\n      return `\r\n        <div class=\"ai-explanation\">\r\n          <h4>📊 Hugging Face AI Text Analysis</h4>\r\n          <div class=\"analysis-stats\">\r\n            <div class=\"stat-item\">\r\n              <strong>Original Text:</strong> ${stats.originalLines} lines, ${stats.originalWords} words, ${stats.originalChars} characters\r\n            </div>\r\n            <div class=\"stat-item\">\r\n              <strong>Changed Text:</strong> ${stats.changedLines} lines, ${stats.changedWords} words, ${stats.changedChars} characters\r\n            </div>\r\n            <div class=\"stat-item\">\r\n              <strong>Difference:</strong> ${Math.abs(stats.changedLines - stats.originalLines)} lines, ${Math.abs(stats.changedWords - stats.originalWords)} words, ${Math.abs(stats.changedChars - stats.originalChars)} characters\r\n            </div>\r\n          </div>\r\n          \r\n          <h4>🤖 AI Insights from Hugging Face</h4>\r\n          <div class=\"ai-insight\">\r\n            ${cleanedInsight}\r\n          </div>\r\n          \r\n          <h4>🔍 Key Changes Detected</h4>\r\n          <ul>\r\n            ${stats.originalLines !== stats.changedLines ? `<li>Line count changed from ${stats.originalLines} to ${stats.changedLines}</li>` : ''}\r\n            ${stats.originalWords !== stats.changedWords ? `<li>Word count changed from ${stats.originalWords} to ${stats.changedWords}</li>` : ''}\r\n            ${originalText === changedText ? '<li>No changes detected - texts are identical</li>' : ''}\r\n            ${Math.abs(stats.changedChars - stats.originalChars) > stats.originalChars * 0.5 ? '<li>⚠️ Significant length change detected</li>' : ''}\r\n          </ul>\r\n        </div>\r\n      `;\r\n    } catch (error) {\r\n      console.error('❌ Hugging Face API failed for explanation:', error);\r\n      console.error('Full error details:', error.message, error.stack);\r\n      throw error; // Re-throw to trigger fallback in App.js\r\n    }\r\n  }\r\n\r\n  // Generate rewrite suggestions\r\n  async generateRewriteSuggestions(originalText, changedText) {\r\n    const combinedText = originalText + ' ' + changedText;\r\n    const prompt = `Improve this text for better clarity and readability:\r\n\r\n\"${combinedText.substring(0, 200)}${combinedText.length > 200 ? '...' : ''}\"\r\n\r\nSuggestions:`;\r\n\r\n    try {\r\n      console.log('✨ Generating rewrite suggestions...');\r\n      const suggestions = await this.generateText(prompt, 250);\r\n      console.log('✅ Rewrite suggestions received');\r\n      \r\n      // Clean up the AI response\r\n      let cleanedSuggestions = suggestions;\r\n      if (suggestions.includes(prompt)) {\r\n        cleanedSuggestions = suggestions.replace(prompt, '').trim();\r\n      }\r\n      \r\n      // If the response is too short or empty, provide basic suggestions\r\n      if (!cleanedSuggestions || cleanedSuggestions.length < 10) {\r\n        cleanedSuggestions = \"Consider improving sentence structure, using more precise vocabulary, and ensuring clear transitions between ideas.\";\r\n      }\r\n      \r\n      return `\r\n        <div class=\"ai-rewrite\">\r\n          <h4>✨ Hugging Face AI Rewrite Suggestions</h4>\r\n          <div class=\"ai-suggestions\">\r\n            ${cleanedSuggestions}\r\n          </div>\r\n          \r\n          <h4>📝 General Improvements</h4>\r\n          <ul>\r\n            <li>Consider breaking long sentences into shorter, more readable ones</li>\r\n            <li>Use active voice where possible for clearer communication</li>\r\n            <li>Ensure consistent terminology throughout the text</li>\r\n            <li>Remove redundant words and phrases</li>\r\n            <li>Add transitional phrases for better flow</li>\r\n          </ul>\r\n        </div>\r\n      `;\r\n    } catch (error) {\r\n      console.error('❌ Error generating rewrite suggestions:', error);\r\n      throw error; // Let the main function handle fallback\r\n    }\r\n  }\r\n\r\n  // Generate summary using summarization model\r\n  async generateSummary(originalText, changedText) {\r\n    const combinedText = originalText + '\\n\\n' + changedText;\r\n    \r\n    try {\r\n      const result = await this.callHuggingFaceAPI(this.config.models.summarization, {\r\n        inputs: combinedText,\r\n        parameters: {\r\n          max_length: 150,\r\n          min_length: 30,\r\n          do_sample: false\r\n        }\r\n      });\r\n\r\n      const summary = result[0]?.summary_text || 'Unable to generate summary';\r\n      \r\n      return `\r\n        <div class=\"ai-summary\">\r\n          <h4>📝 AI-Generated Summary</h4>\r\n          <div class=\"summary-content\">\r\n            <p>${summary}</p>\r\n          </div>\r\n          \r\n          <h4>📊 Text Overview</h4>\r\n          <p>Combined text length: ${combinedText.length} characters</p>\r\n          <p>Analysis includes both original and changed versions for comprehensive understanding.</p>\r\n        </div>\r\n      `;\r\n    } catch (error) {\r\n      console.error('Error generating summary:', error);\r\n      return this.getFallbackSummary(originalText, changedText);\r\n    }\r\n  }\r\n\r\n  // Generate tone analysis using sentiment model\r\n  async generateToneAnalysis(originalText, changedText) {\r\n    try {\r\n      const [originalSentiment, changedSentiment] = await Promise.all([\r\n        this.analyzeSentiment(originalText),\r\n        this.analyzeSentiment(changedText)\r\n      ]);\r\n\r\n      return `\r\n        <div class=\"ai-tone\">\r\n          <h4>🎭 AI Tone Analysis</h4>\r\n          \r\n          <div class=\"tone-section\">\r\n            <h5>📊 Original Text Sentiment</h5>\r\n            <div class=\"sentiment-result\">\r\n              <strong>Primary Sentiment:</strong> ${originalSentiment.label} (${(originalSentiment.score * 100).toFixed(1)}% confidence)\r\n            </div>\r\n          </div>\r\n          \r\n          ${changedText ? `\r\n          <div class=\"tone-section\">\r\n            <h5>📊 Changed Text Sentiment</h5>\r\n            <div class=\"sentiment-result\">\r\n              <strong>Primary Sentiment:</strong> ${changedSentiment.label} (${(changedSentiment.score * 100).toFixed(1)}% confidence)\r\n            </div>\r\n          </div>\r\n          ` : ''}\r\n          \r\n          <div class=\"tone-section\">\r\n            <h5>💡 Tone Insights</h5>\r\n            <ul>\r\n              <li>Sentiment analysis powered by Hugging Face AI models</li>\r\n              <li>Consider your target audience when choosing tone</li>\r\n              <li>Maintain consistency throughout your document</li>\r\n              ${originalSentiment.label !== changedSentiment.label ? '<li>⚠️ Tone shift detected between versions</li>' : ''}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      `;\r\n    } catch (error) {\r\n      console.error('Error generating tone analysis:', error);\r\n      return this.getFallbackToneAnalysis();\r\n    }\r\n  }\r\n\r\n  // Analyze sentiment using Hugging Face sentiment model\r\n  async analyzeSentiment(text) {\r\n    if (!text.trim()) {\r\n      return { label: 'NEUTRAL', score: 0.5 };\r\n    }\r\n\r\n    try {\r\n      const result = await this.callHuggingFaceAPI(this.config.models.sentiment, {\r\n        inputs: text.substring(0, 500) // Limit text length for API\r\n      });\r\n\r\n      const topResult = result[0] || { label: 'NEUTRAL', score: 0.5 };\r\n      return topResult;\r\n    } catch (error) {\r\n      console.error('Error analyzing sentiment:', error);\r\n      return { label: 'NEUTRAL', score: 0.5 };\r\n    }\r\n  }\r\n\r\n  // Generate cleanup analysis\r\n  async generateCleanupAnalysis(originalText, changedText) {\r\n    const issues = this.detectFormattingIssues(originalText + '\\n' + changedText);\r\n    \r\n    return `\r\n      <div class=\"ai-cleanup\">\r\n        <h4>🧹 Text Cleanup Analysis</h4>\r\n        \r\n        <div class=\"cleanup-section\">\r\n          <h5>🔍 Issues Detected</h5>\r\n          ${issues.length > 0 ? `\r\n            <ul>\r\n              ${issues.map(issue => `<li>${issue}</li>`).join('')}\r\n            </ul>\r\n          ` : '<p>✅ No major formatting issues detected!</p>'}\r\n        </div>\r\n        \r\n        <div class=\"cleanup-section\">\r\n          <h5>✨ Cleanup Recommendations</h5>\r\n          <ul>\r\n            <li>Remove trailing whitespace at line ends</li>\r\n            <li>Standardize line break usage</li>\r\n            <li>Fix inconsistent punctuation</li>\r\n            <li>Normalize quotation marks</li>\r\n            <li>Remove unnecessary special characters</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  // Helper methods\r\n  calculateTextStats(originalText, changedText) {\r\n    return {\r\n      originalLines: originalText.split('\\n').length,\r\n      changedLines: changedText.split('\\n').length,\r\n      originalWords: originalText.split(/\\s+/).filter(w => w.length > 0).length,\r\n      changedWords: changedText.split(/\\s+/).filter(w => w.length > 0).length,\r\n      originalChars: originalText.length,\r\n      changedChars: changedText.length\r\n    };\r\n  }\r\n\r\n  detectFormattingIssues(text) {\r\n    const issues = [];\r\n    if (text.includes('  ')) issues.push('Multiple consecutive spaces found');\r\n    if (text.includes('\\n\\n\\n')) issues.push('Excessive line breaks detected');\r\n    if (text.match(/[.]{2,}/)) issues.push('Multiple periods found');\r\n    if (text.match(/[!]{2,}/)) issues.push('Multiple exclamation marks found');\r\n    if (text.match(/[?]{2,}/)) issues.push('Multiple question marks found');\r\n    return issues;\r\n  }\r\n\r\n  // Fallback methods for when API calls fail\r\n  getFallbackExplanation(originalText, changedText) {\r\n    const stats = this.calculateTextStats(originalText, changedText);\r\n    const wordDiff = stats.changedWords - stats.originalWords;\r\n    const lineDiff = stats.changedLines - stats.originalLines;\r\n    const charDiff = stats.changedChars - stats.originalChars;\r\n    \r\n    return `\r\n      <div class=\"ai-explanation\">\r\n        <h4>📊 Text Analysis (Local Processing)</h4>\r\n        <div class=\"analysis-stats\">\r\n          <div class=\"stat-item\">\r\n            <strong>Original Text:</strong> ${stats.originalLines} lines, ${stats.originalWords} words, ${stats.originalChars} characters\r\n          </div>\r\n          <div class=\"stat-item\">\r\n            <strong>Changed Text:</strong> ${stats.changedLines} lines, ${stats.changedWords} words, ${stats.changedChars} characters\r\n          </div>\r\n          <div class=\"stat-item\">\r\n            <strong>Net Changes:</strong> ${lineDiff > 0 ? '+' : ''}${lineDiff} lines, ${wordDiff > 0 ? '+' : ''}${wordDiff} words, ${charDiff > 0 ? '+' : ''}${charDiff} characters\r\n          </div>\r\n        </div>\r\n        \r\n        <h4>🔍 Analysis Results</h4>\r\n        <ul>\r\n          ${originalText === changedText ? '<li>✅ No changes detected - texts are identical</li>' : ''}\r\n          ${Math.abs(wordDiff) > 0 ? `<li>📝 Word count ${wordDiff > 0 ? 'increased' : 'decreased'} by ${Math.abs(wordDiff)} words</li>` : ''}\r\n          ${Math.abs(lineDiff) > 0 ? `<li>📄 Line count ${lineDiff > 0 ? 'increased' : 'decreased'} by ${Math.abs(lineDiff)} lines</li>` : ''}\r\n          ${Math.abs(charDiff) > stats.originalChars * 0.5 ? '<li>⚠️ Significant content change detected (>50% length change)</li>' : ''}\r\n          ${Math.abs(charDiff) < stats.originalChars * 0.1 ? '<li>✨ Minor changes detected (<10% length change)</li>' : ''}\r\n        </ul>\r\n        \r\n        <div class=\"ai-note\">\r\n          <p><em>Note: This is a local analysis. For AI-powered insights, please check your Hugging Face API configuration.</em></p>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  getFallbackRewrite() {\r\n    return `\r\n      <div class=\"ai-rewrite\">\r\n        <h4>✨ Writing Improvement Suggestions (Local Analysis)</h4>\r\n        <div class=\"rewrite-suggestions\">\r\n          <h5>📝 General Writing Tips</h5>\r\n          <ul>\r\n            <li><strong>Clarity:</strong> Use clear, concise language and avoid jargon</li>\r\n            <li><strong>Structure:</strong> Break up long sentences into shorter, more readable ones</li>\r\n            <li><strong>Voice:</strong> Use active voice when possible for stronger impact</li>\r\n            <li><strong>Consistency:</strong> Maintain consistent terminology and tone throughout</li>\r\n            <li><strong>Grammar:</strong> Check for spelling, grammar, and punctuation errors</li>\r\n          </ul>\r\n          \r\n          <h5>🎯 Content Enhancement</h5>\r\n          <ul>\r\n            <li>Remove redundant words and phrases</li>\r\n            <li>Add transitional phrases for better flow</li>\r\n            <li>Use specific examples to support your points</li>\r\n            <li>Ensure each paragraph has a clear main idea</li>\r\n          </ul>\r\n        </div>\r\n        \r\n        <div class=\"ai-note\">\r\n          <p><em>Note: For AI-powered rewrite suggestions, please configure your Hugging Face API key.</em></p>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  getFallbackSummary(originalText, changedText) {\r\n    const stats = this.calculateTextStats(originalText, changedText);\r\n    const combinedLength = originalText.length + changedText.length;\r\n    const hasChanges = originalText !== changedText;\r\n    \r\n    return `\r\n      <div class=\"ai-summary\">\r\n        <h4>📝 Text Summary (Local Analysis)</h4>\r\n        <div class=\"summary-content\">\r\n          <p><strong>Document Overview:</strong> This comparison includes ${stats.originalWords + stats.changedWords} total words across both text versions.</p>\r\n          \r\n          ${hasChanges ? `\r\n            <p><strong>Changes Detected:</strong> The text has been modified with ${Math.abs(stats.changedWords - stats.originalWords)} word difference and ${Math.abs(stats.changedLines - stats.originalLines)} line difference.</p>\r\n          ` : `\r\n            <p><strong>No Changes:</strong> Both text versions are identical.</p>\r\n          `}\r\n          \r\n          <div class=\"summary-stats\">\r\n            <p><strong>Text Statistics:</strong></p>\r\n            <ul>\r\n              <li>Total characters: ${combinedLength}</li>\r\n              <li>Original version: ${stats.originalWords} words, ${stats.originalLines} lines</li>\r\n              <li>Changed version: ${stats.changedWords} words, ${stats.changedLines} lines</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"ai-note\">\r\n          <p><em>Note: For AI-generated summaries, please configure your Hugging Face API key.</em></p>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  getFallbackToneAnalysis() {\r\n    return `\r\n      <div class=\"ai-tone\">\r\n        <h4>🎭 Tone Analysis Guidelines (Local Analysis)</h4>\r\n        \r\n        <div class=\"tone-section\">\r\n          <h5>📋 Manual Tone Assessment</h5>\r\n          <p>Consider these aspects when evaluating your text's tone:</p>\r\n          <ul>\r\n            <li><strong>Formality Level:</strong> Is the language formal, informal, or conversational?</li>\r\n            <li><strong>Emotional Tone:</strong> Does the text convey positive, negative, or neutral emotions?</li>\r\n            <li><strong>Authority:</strong> Is the tone confident, uncertain, or questioning?</li>\r\n            <li><strong>Audience Appropriateness:</strong> Does the tone match your intended audience?</li>\r\n          </ul>\r\n        </div>\r\n        \r\n        <div class=\"tone-section\">\r\n          <h5>💡 Tone Consistency Tips</h5>\r\n          <ul>\r\n            <li>Maintain consistent voice throughout your document</li>\r\n            <li>Match tone to your purpose (informative, persuasive, entertaining)</li>\r\n            <li>Consider cultural context and audience expectations</li>\r\n            <li>Use appropriate vocabulary for your target readers</li>\r\n            <li>Balance professionalism with accessibility</li>\r\n          </ul>\r\n        </div>\r\n        \r\n        <div class=\"ai-note\">\r\n          <p><em>Note: For AI-powered sentiment analysis, please configure your Hugging Face API key.</em></p>\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  // Format the response into the expected structure\r\n  formatResponse(type, content) {\r\n    const typeIcons = {\r\n      explain: '🧠',\r\n      rewrite: '✨',\r\n      summary: '📝',\r\n      tone: '🎭',\r\n      cleanup: '🧹'\r\n    };\r\n\r\n    const typeTitles = {\r\n      explain: 'Hugging Face AI Explanation',\r\n      rewrite: 'Hugging Face AI Rewrite Suggestions',\r\n      summary: 'Hugging Face AI Summary',\r\n      tone: 'Hugging Face AI Tone Analysis',\r\n      cleanup: 'Hugging Face AI Text Cleanup'\r\n    };\r\n\r\n    return {\r\n      title: `${typeIcons[type] || '🤖'} ${typeTitles[type] || 'Hugging Face AI Analysis'}`,\r\n      content: content,\r\n      type: type\r\n    };\r\n  }\r\n\r\n  // Test the Hugging Face connection\r\n  async testConnection() {\r\n    console.log('Testing Hugging Face connection...');\r\n    console.log('API Key configured:', this.isConfigured());\r\n    console.log('API Key preview:', this.config.apiKey ? `${this.config.apiKey.substring(0, 10)}...` : 'none');\r\n    \r\n    if (!this.isConfigured()) {\r\n      return { success: false, error: 'API key not configured' };\r\n    }\r\n    \r\n    try {\r\n      // Use a simpler model for testing\r\n      const result = await this.callHuggingFaceAPI('gpt2', {\r\n        inputs: \"Hello world\",\r\n        parameters: { max_length: 20 }\r\n      });\r\n      console.log('API test result:', result);\r\n      return { success: true, response: 'Connection successful!', data: result };\r\n    } catch (error) {\r\n      console.error('API test failed:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n\r\n  // Debug method to check configuration\r\n  debugConfig() {\r\n    console.log('=== Hugging Face Debug Info ===');\r\n    console.log('Environment API Key:', process.env.REACT_APP_HUGGINGFACE_API_KEY ? 'Found' : 'Not found');\r\n    console.log('Config API Key:', this.config.apiKey ? 'Found' : 'Not found');\r\n    console.log('API Key length:', this.config.apiKey ? this.config.apiKey.length : 0);\r\n    console.log('Is Configured:', this.isConfigured());\r\n    console.log('Base URL:', this.config.baseUrl);\r\n    console.log('Models:', this.config.models);\r\n    console.log('==============================');\r\n  }\r\n\r\n  // Get available models\r\n  getAvailableModels() {\r\n    return {\r\n      textGeneration: [\r\n        'meta-llama/Llama-2-7b-chat-hf',\r\n        'microsoft/DialoGPT-large',\r\n        'EleutherAI/gpt-neo-2.7B',\r\n        'mistralai/Mistral-7B-Instruct-v0.1',\r\n        'EleutherAI/gpt-neo-1.3B'\r\n      ],\r\n      summarization: [\r\n        'facebook/bart-large-cnn',\r\n        'google/pegasus-xsum',\r\n        't5-base',\r\n        't5-small'\r\n      ],\r\n      sentiment: [\r\n        'cardiffnlp/twitter-roberta-base-sentiment-latest',\r\n        'nlptown/bert-base-multilingual-uncased-sentiment',\r\n        'distilbert-base-uncased-finetuned-sst-2-english'\r\n      ]\r\n    };\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}