{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joem\\\\quickdiff-react\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport './App.css';\nimport './user-guide.css';\nimport Header from './components/Header';\nimport SettingsPanel from './components/SettingsPanel';\nimport InputSection from './components/InputSection';\nimport Controls from './components/Controls';\nimport Legend from './components/Legend';\nimport Results from './components/Results';\nimport ReactUserGuide from './user-guide.js';\nimport { DiffEngine } from './utils/DiffEngine';\nimport { ExportUtils } from './utils/ExportUtils';\nimport { HuggingFaceService } from './utils/HuggingFaceService';\nimport { LanguageDetector } from './utils/LanguageDetector';\nimport { NotificationProvider, useNotification } from './components/NotificationProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuickDiffApp() {\n  _s();\n  // State management\n  const [originalText, setOriginalText] = useState('');\n  const [changedText, setChangedText] = useState('');\n  const [diffResult, setDiffResult] = useState(null);\n  const [showResults, setShowResults] = useState(false);\n  const [theme, setTheme] = useState('light');\n  const [contrast, setContrast] = useState('normal');\n\n  // Settings state\n  const [settings, setSettings] = useState({\n    diffMode: 'line',\n    viewMode: 'side-by-side',\n    language: 'plaintext',\n    autoDetectLanguage: true,\n    ignoreCase: false,\n    ignoreWhitespace: false,\n    ignorePunctuation: false,\n    livePreview: false\n  });\n\n  // Language detection state\n  const [detectedLanguage, setDetectedLanguage] = useState({\n    language: 'plaintext',\n    confidence: 'low',\n    method: 'default'\n  });\n\n  // AI state\n  const [aiResults, setAiResults] = useState([]);\n  const [showAiResults, setShowAiResults] = useState(false);\n  const [isGeneratingAI, setIsGeneratingAI] = useState(false);\n\n  // Navigation state\n  const [changes, setChanges] = useState([]);\n  const [currentChangeIndex, setCurrentChangeIndex] = useState(-1);\n  const [minimapVisible, setMinimapVisible] = useState(false);\n\n  // Initialize user guide\n  useEffect(() => {\n    new ReactUserGuide();\n  }, []);\n\n  // Refs\n  const debounceTimer = useRef(null);\n  const diffEngine = useRef(new DiffEngine());\n  const exportUtils = useRef(new ExportUtils());\n  const hfService = useRef(new HuggingFaceService());\n  const languageDetector = useRef(new LanguageDetector());\n  const {\n    showNotification\n  } = useNotification();\n\n  // Settings management functions (defined early to avoid hoisting issues)\n  const loadSettings = () => {\n    try {\n      const savedSettings = localStorage.getItem('quickdiff_react_settings');\n      if (savedSettings) {\n        setSettings(prev => ({\n          ...prev,\n          ...JSON.parse(savedSettings)\n        }));\n      }\n    } catch (error) {\n      console.error('Error loading settings:', error);\n    }\n  };\n  const saveSettings = useCallback(() => {\n    try {\n      localStorage.setItem('quickdiff_react_settings', JSON.stringify(settings));\n    } catch (error) {\n      console.error('Error saving settings:', error);\n    }\n  }, [settings]);\n  const loadTheme = () => {\n    const savedTheme = localStorage.getItem('quickdiff_theme') || 'light';\n    const savedContrast = localStorage.getItem('quickdiff_contrast') || 'normal';\n    setTheme(savedTheme);\n    setContrast(savedContrast);\n    document.documentElement.setAttribute('data-theme', savedTheme);\n    document.documentElement.setAttribute('data-contrast', savedContrast);\n  };\n\n  // Load settings and theme on mount\n  useEffect(() => {\n    loadSettings();\n    loadTheme();\n\n    // Debug Hugging Face configuration\n    console.log('=== QuickDiff App Debug ===');\n    console.log('Environment variables check:');\n    console.log('REACT_APP_HUGGINGFACE_API_KEY:', process.env.REACT_APP_HUGGINGFACE_API_KEY ? 'Found' : 'Not found');\n    if (hfService.current) {\n      hfService.current.debugConfig();\n\n      // Make HF service available globally for testing\n      window.testHF = async () => {\n        console.log('🧪 Testing Hugging Face API...');\n        try {\n          const result = await hfService.current.testConnection();\n          console.log('🧪 Test result:', result);\n          return result;\n        } catch (error) {\n          console.error('🧪 Test failed:', error);\n          return {\n            success: false,\n            error: error.message\n          };\n        }\n      };\n      console.log('💡 You can test HF API by running: testHF() in console');\n    }\n    console.log('========================');\n  }, []);\n\n  // Auto-save settings when they change\n  useEffect(() => {\n    saveSettings();\n  }, [settings, saveSettings]);\n\n  // Collect changes for navigation (defined early to avoid hoisting issues)\n  const collectChanges = useCallback(result => {\n    if (!result) return;\n    const newChanges = [];\n\n    // Extract changes from originalLines (DiffEngine returns originalLines and changedLines)\n    if (result.originalLines) {\n      result.originalLines.forEach((line, index) => {\n        if (line.type && line.type !== 'unchanged' && line.type !== '') {\n          newChanges.push({\n            lineNumber: index + 1,\n            type: line.type,\n            content: line.content || '',\n            originalLineNumber: index + 1,\n            changedLineNumber: index + 1\n          });\n        }\n      });\n    }\n\n    // Also check changedLines for additional changes (like added lines)\n    if (result.changedLines) {\n      result.changedLines.forEach((line, index) => {\n        if (line.type && line.type !== 'unchanged' && line.type !== '') {\n          // Avoid duplicates by checking if we already have this change\n          const exists = newChanges.some(change => change.lineNumber === index + 1 && change.type === line.type);\n          if (!exists) {\n            newChanges.push({\n              lineNumber: index + 1,\n              type: line.type,\n              content: line.content || '',\n              originalLineNumber: index + 1,\n              changedLineNumber: index + 1\n            });\n          }\n        }\n      });\n    }\n\n    // Sort changes by line number\n    newChanges.sort((a, b) => a.lineNumber - b.lineNumber);\n    console.log('Collected Changes:', newChanges); // Debug log\n    setChanges(newChanges);\n    setCurrentChangeIndex(newChanges.length > 0 ? 0 : -1);\n    if (newChanges.length > 0) {\n      showNotification(`Found ${newChanges.length} changes`);\n    } else {\n      showNotification('No changes detected');\n    }\n  }, [showNotification]);\n\n  // Main comparison function (defined early to avoid hoisting issues)\n  const performComparison = useCallback(() => {\n    if (!originalText.trim() && !changedText.trim()) {\n      showNotification('Please enter some text to compare');\n      return;\n    }\n    try {\n      const result = diffEngine.current.performComparison(originalText, changedText, settings);\n      console.log('Diff Result:', result); // Debug log\n      setDiffResult(result);\n      setShowResults(true);\n      collectChanges(result);\n\n      // Auto-generate AI analysis is disabled to prevent duplicate results\n      // Users can manually trigger AI analysis using the AI buttons\n\n      // Auto-scroll to results only if live preview is disabled\n      if (!settings.livePreview) {\n        setTimeout(() => {\n          const resultsElement = document.getElementById('results-section');\n          if (resultsElement) {\n            resultsElement.scrollIntoView({\n              behavior: 'smooth',\n              block: 'start'\n            });\n          }\n        }, 100);\n      }\n      showNotification('Comparison completed');\n    } catch (error) {\n      console.error('Comparison error:', error);\n      showNotification('Error performing comparison');\n    }\n  }, [originalText, changedText, settings, showNotification, collectChanges]);\n\n  // Theme management\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n    localStorage.setItem('quickdiff_theme', newTheme);\n    document.documentElement.setAttribute('data-theme', newTheme);\n    showNotification(`Switched to ${newTheme} theme`);\n  };\n  const toggleContrast = () => {\n    const newContrast = contrast === 'normal' ? 'high' : 'normal';\n    setContrast(newContrast);\n    localStorage.setItem('quickdiff_contrast', newContrast);\n    document.documentElement.setAttribute('data-contrast', newContrast);\n    showNotification(`${newContrast === 'high' ? 'Enabled' : 'Disabled'} high contrast mode`);\n  };\n\n  // Text manipulation functions\n  const clearAll = () => {\n    setOriginalText('');\n    setChangedText('');\n    setShowResults(false);\n    setDiffResult(null);\n    setAiResults([]);\n    setShowAiResults(false);\n    showNotification('All content cleared');\n  };\n  const swapTexts = () => {\n    const temp = originalText;\n    setOriginalText(changedText);\n    setChangedText(temp);\n    showNotification('Texts swapped');\n    if (settings.livePreview && (originalText.trim() || changedText.trim())) {\n      performComparison();\n    }\n  };\n\n  // File handling\n  const handleFileLoad = (file, target) => {\n    const reader = new FileReader();\n    reader.onload = e => {\n      const content = e.target.result;\n      if (target === 'original') {\n        setOriginalText(content);\n      } else {\n        setChangedText(content);\n      }\n\n      // Auto-detect language from filename if enabled\n      if (settings.autoDetectLanguage) {\n        const detection = languageDetector.current.autoDetect(content, file.name);\n        setDetectedLanguage(detection);\n        if (detection.language !== 'plaintext') {\n          setSettings(prev => ({\n            ...prev,\n            language: detection.language\n          }));\n        }\n        showNotification(`File loaded: ${file.name}`);\n      } else {\n        showNotification(`File loaded: ${file.name}`);\n      }\n    };\n    reader.readAsText(file);\n  };\n\n  // Export functions\n  const copyResults = () => {\n    exportUtils.current.copyResults(originalText, changedText, aiResults).then(() => showNotification('Results copied to clipboard')).catch(() => showNotification('Failed to copy results'));\n  };\n  const exportToTxt = () => {\n    exportUtils.current.exportToTxt(originalText, changedText, diffResult, aiResults);\n    showNotification('Exported as TXT file');\n  };\n  const exportToHtml = () => {\n    exportUtils.current.exportToHtml(originalText, changedText, diffResult, aiResults);\n    showNotification('Exported as HTML file');\n  };\n  const exportToMarkdown = () => {\n    exportUtils.current.exportToMarkdown(originalText, changedText, diffResult, aiResults);\n    showNotification('Exported as Markdown file');\n  };\n  const exportToPdf = () => {\n    exportUtils.current.exportToPdf(originalText, changedText, diffResult, aiResults);\n    showNotification('Exported as PDF file');\n  };\n\n  // AI functions\n  const generateAIAnalysis = async type => {\n    if (!originalText.trim() && !changedText.trim()) {\n      showNotification('Please enter some text to analyze');\n      return;\n    }\n\n    // Check if this analysis type already exists to prevent duplicates\n    const existingAnalysis = aiResults.find(result => result.type === type);\n    if (existingAnalysis) {\n      showNotification(`${type} analysis already exists. Clear AI results first to regenerate.`);\n      return;\n    }\n    setIsGeneratingAI(true);\n    try {\n      if (hfService.current.isConfigured()) {\n        // Use Hugging Face API when configured\n        showNotification('Generating AI analysis...');\n        const analysis = await hfService.current.generateAnalysis(type, originalText, changedText);\n        setAiResults(prev => [...prev, analysis]);\n        setShowAiResults(true);\n        showNotification('AI analysis completed');\n      } else {\n        // Generate local analysis when API is not configured\n        showNotification('Generating local analysis (Hugging Face API not configured)');\n        const analysis = await hfService.current.generateLocalAnalysis(type, originalText, changedText);\n        setAiResults(prev => [...prev, analysis]);\n        setShowAiResults(true);\n        showNotification('Local analysis completed');\n      }\n    } catch (error) {\n      console.error('AI Analysis Error:', error);\n      // Try to generate fallback analysis even on error\n      try {\n        const fallbackAnalysis = await hfService.current.generateLocalAnalysis(type, originalText, changedText);\n        setAiResults(prev => [...prev, fallbackAnalysis]);\n        setShowAiResults(true);\n        showNotification('Local analysis completed (AI service unavailable)');\n      } catch (fallbackError) {\n        showNotification(`Analysis failed: ${error.message}`);\n      }\n    } finally {\n      setIsGeneratingAI(false);\n    }\n  };\n  const clearAIResults = () => {\n    setAiResults([]);\n    setShowAiResults(false);\n    showNotification('AI results cleared');\n  };\n  const removeAICard = index => {\n    setAiResults(prev => prev.filter((_, i) => i !== index));\n    showNotification('AI analysis removed');\n\n    // Hide AI results section if no cards left\n    if (aiResults.length <= 1) {\n      setShowAiResults(false);\n    }\n  };\n\n  // Navigation functions\n  const navigateToPreviousChange = () => {\n    console.log('Navigate Previous - Changes:', changes.length, 'Current Index:', currentChangeIndex); // Debug log\n    if (changes.length === 0) {\n      showNotification('No changes to navigate');\n      return;\n    }\n    const newIndex = currentChangeIndex > 0 ? currentChangeIndex - 1 : changes.length - 1;\n    setCurrentChangeIndex(newIndex);\n    scrollToChange(newIndex);\n  };\n  const navigateToNextChange = () => {\n    console.log('Navigate Next - Changes:', changes.length, 'Current Index:', currentChangeIndex); // Debug log\n    if (changes.length === 0) {\n      showNotification('No changes to navigate');\n      return;\n    }\n    const newIndex = currentChangeIndex < changes.length - 1 ? currentChangeIndex + 1 : 0;\n    setCurrentChangeIndex(newIndex);\n    scrollToChange(newIndex);\n  };\n  const scrollToChange = index => {\n    if (index < 0 || index >= changes.length) return;\n    const change = changes[index];\n\n    // Try multiple selectors to find the line\n    let lineElement = document.querySelector(`[data-line-number=\"${change.lineNumber}\"][data-line-type=\"${change.type}\"]`);\n    if (!lineElement) {\n      lineElement = document.querySelector(`[data-original-line=\"${change.lineNumber}\"]`);\n    }\n    if (!lineElement) {\n      lineElement = document.querySelector(`[data-line-number=\"${change.lineNumber}\"]`);\n    }\n    if (lineElement) {\n      // Remove previous highlights\n      document.querySelectorAll('.current-change').forEach(el => {\n        el.classList.remove('current-change');\n      });\n      lineElement.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center'\n      });\n\n      // Highlight the current change temporarily\n      lineElement.classList.add('current-change');\n      setTimeout(() => {\n        lineElement.classList.remove('current-change');\n      }, 3000);\n      showNotification(`Navigated to change ${index + 1} of ${changes.length}: ${change.type}`);\n    } else {\n      showNotification(`Could not find change ${index + 1} (line ${change.lineNumber})`);\n    }\n  };\n  const toggleMinimap = () => {\n    setMinimapVisible(!minimapVisible);\n    showNotification(minimapVisible ? 'Minimap hidden' : 'Minimap shown');\n  };\n\n  // Auto-detect language when text changes\n  useEffect(() => {\n    if (settings.autoDetectLanguage && (originalText.trim() || changedText.trim())) {\n      const combinedText = originalText + '\\n' + changedText;\n      const detection = languageDetector.current.autoDetect(combinedText);\n      setDetectedLanguage(detection);\n\n      // Auto-update language setting for any detection that's not plaintext\n      if (detection.language !== 'plaintext' && detection.language !== settings.language) {\n        setSettings(prev => ({\n          ...prev,\n          language: detection.language\n        }));\n      }\n    } else if (!settings.autoDetectLanguage) {\n      // Reset to default when auto-detect is disabled\n      setDetectedLanguage({\n        language: 'plaintext',\n        confidence: 'low',\n        method: 'default'\n      });\n    }\n  }, [originalText, changedText, settings.autoDetectLanguage, settings.language]);\n\n  // Live preview with debouncing\n  useEffect(() => {\n    if (settings.livePreview && (originalText.trim() || changedText.trim())) {\n      clearTimeout(debounceTimer.current);\n      debounceTimer.current = setTimeout(() => {\n        performComparison();\n      }, 500);\n    }\n    return () => clearTimeout(debounceTimer.current);\n  }, [originalText, changedText, settings.livePreview, settings.diffMode, settings.ignoreCase, settings.ignoreWhitespace, settings.ignorePunctuation, performComparison]);\n\n  // Keyboard shortcuts\n  useEffect(() => {\n    const handleKeyDown = e => {\n      // Don't trigger shortcuts when typing in text areas or input fields\n      if (e.target.tagName === 'TEXTAREA' || e.target.tagName === 'INPUT') {\n        return;\n      }\n      if (e.ctrlKey || e.metaKey) {\n        switch (e.key.toLowerCase()) {\n          case 'enter':\n            e.preventDefault();\n            performComparison();\n            showNotification('⌨️ Ctrl+Enter: Comparison started');\n            break;\n          case 'k':\n            e.preventDefault();\n            clearAll();\n            showNotification('⌨️ Ctrl+K: All content cleared');\n            break;\n          case 's':\n            e.preventDefault();\n            swapTexts();\n            showNotification('⌨️ Ctrl+S: Texts swapped');\n            break;\n          case 'c':\n            if (showResults) {\n              e.preventDefault();\n              copyResults();\n              showNotification('⌨️ Ctrl+C: Results copied');\n            }\n            break;\n          case 'd':\n            e.preventDefault();\n            toggleTheme();\n            showNotification('⌨️ Ctrl+D: Theme toggled');\n            break;\n          case 'h':\n            e.preventDefault();\n            toggleContrast();\n            showNotification('⌨️ Ctrl+H: Contrast toggled');\n            break;\n          case 'm':\n            e.preventDefault();\n            toggleMinimap();\n            showNotification('⌨️ Ctrl+M: Minimap toggled');\n            break;\n          default:\n            break;\n        }\n      }\n\n      // Handle other shortcuts\n      switch (e.key) {\n        case 'Escape':\n          if (showAiResults) {\n            clearAIResults();\n            showNotification('⌨️ Escape: AI results cleared');\n          }\n          break;\n        case 'ArrowUp':\n          if (e.ctrlKey) {\n            e.preventDefault();\n            navigateToPreviousChange();\n          }\n          break;\n        case 'ArrowDown':\n          if (e.ctrlKey) {\n            e.preventDefault();\n            navigateToNextChange();\n          }\n          break;\n        default:\n          break;\n      }\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [showResults, showAiResults, performComparison, clearAll, swapTexts, copyResults, toggleTheme, toggleContrast, toggleMinimap, clearAIResults, navigateToPreviousChange, navigateToNextChange, showNotification]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quickdiff-app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        onThemeToggle: toggleTheme,\n        onContrastToggle: toggleContrast\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SettingsPanel, {\n        settings: settings,\n        onSettingsChange: setSettings,\n        detectedLanguage: detectedLanguage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSection, {\n        originalText: originalText,\n        changedText: changedText,\n        onOriginalTextChange: setOriginalText,\n        onChangedTextChange: setChangedText,\n        onFileLoad: handleFileLoad\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {\n        onCompare: performComparison,\n        onClear: clearAll,\n        onSwap: swapTexts,\n        onCopy: copyResults,\n        onExportTxt: exportToTxt,\n        onExportHtml: exportToHtml,\n        onExportMd: exportToMarkdown,\n        onExportPdf: exportToPdf,\n        onAIAnalysis: generateAIAnalysis,\n        hasResults: showResults,\n        isGeneratingAI: isGeneratingAI,\n        hfConfigured: hfService.current.isConfigured()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 614,\n        columnNumber: 9\n      }, this), showResults && /*#__PURE__*/_jsxDEV(Results, {\n        diffResult: diffResult,\n        settings: settings,\n        changes: changes,\n        currentChangeIndex: currentChangeIndex,\n        minimapVisible: minimapVisible,\n        onNavigatePrevious: navigateToPreviousChange,\n        onNavigateNext: navigateToNextChange,\n        onToggleMinimap: toggleMinimap,\n        onNavigateToChange: index => {\n          setCurrentChangeIndex(index);\n          scrollToChange(index);\n        },\n        aiResults: aiResults,\n        showAiResults: showAiResults,\n        onClearAIResults: clearAIResults,\n        onRemoveAICard: removeAICard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 617,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 579,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 578,\n    columnNumber: 5\n  }, this);\n}\n_s(QuickDiffApp, \"JwGPDasXTf8/on3vSKGKZA2ZiNc=\", false, function () {\n  return [useNotification];\n});\n_c = QuickDiffApp;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(NotificationProvider, {\n    children: /*#__PURE__*/_jsxDEV(QuickDiffApp, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 646,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 645,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"QuickDiffApp\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","Header","SettingsPanel","InputSection","Controls","Legend","Results","ReactUserGuide","DiffEngine","ExportUtils","HuggingFaceService","LanguageDetector","NotificationProvider","useNotification","jsxDEV","_jsxDEV","QuickDiffApp","_s","originalText","setOriginalText","changedText","setChangedText","diffResult","setDiffResult","showResults","setShowResults","theme","setTheme","contrast","setContrast","settings","setSettings","diffMode","viewMode","language","autoDetectLanguage","ignoreCase","ignoreWhitespace","ignorePunctuation","livePreview","detectedLanguage","setDetectedLanguage","confidence","method","aiResults","setAiResults","showAiResults","setShowAiResults","isGeneratingAI","setIsGeneratingAI","changes","setChanges","currentChangeIndex","setCurrentChangeIndex","minimapVisible","setMinimapVisible","debounceTimer","diffEngine","exportUtils","hfService","languageDetector","showNotification","loadSettings","savedSettings","localStorage","getItem","prev","JSON","parse","error","console","saveSettings","setItem","stringify","loadTheme","savedTheme","savedContrast","document","documentElement","setAttribute","log","process","env","REACT_APP_HUGGINGFACE_API_KEY","current","debugConfig","window","testHF","result","testConnection","success","message","collectChanges","newChanges","originalLines","forEach","line","index","type","push","lineNumber","content","originalLineNumber","changedLineNumber","changedLines","exists","some","change","sort","a","b","length","performComparison","trim","setTimeout","resultsElement","getElementById","scrollIntoView","behavior","block","toggleTheme","newTheme","toggleContrast","newContrast","clearAll","swapTexts","temp","handleFileLoad","file","target","reader","FileReader","onload","e","detection","autoDetect","name","readAsText","copyResults","then","catch","exportToTxt","exportToHtml","exportToMarkdown","exportToPdf","generateAIAnalysis","existingAnalysis","find","isConfigured","analysis","generateAnalysis","generateLocalAnalysis","fallbackAnalysis","fallbackError","clearAIResults","removeAICard","filter","_","i","navigateToPreviousChange","newIndex","scrollToChange","navigateToNextChange","lineElement","querySelector","querySelectorAll","el","classList","remove","add","toggleMinimap","combinedText","clearTimeout","handleKeyDown","tagName","ctrlKey","metaKey","key","toLowerCase","preventDefault","addEventListener","removeEventListener","className","children","onThemeToggle","onContrastToggle","fileName","_jsxFileName","columnNumber","onSettingsChange","onOriginalTextChange","onChangedTextChange","onFileLoad","onCompare","onClear","onSwap","onCopy","onExportTxt","onExportHtml","onExportMd","onExportPdf","onAIAnalysis","hasResults","hfConfigured","onNavigatePrevious","onNavigateNext","onToggleMinimap","onNavigateToChange","onClearAIResults","onRemoveAICard","_c","App","_c2","$RefreshReg$"],"sources":["C:/Users/Joem/quickdiff-react/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport './App.css';\r\nimport './user-guide.css';\r\nimport Header from './components/Header';\r\nimport SettingsPanel from './components/SettingsPanel';\r\nimport InputSection from './components/InputSection';\r\nimport Controls from './components/Controls';\r\nimport Legend from './components/Legend';\r\nimport Results from './components/Results';\r\nimport ReactUserGuide from './user-guide.js';\r\nimport { DiffEngine } from './utils/DiffEngine';\r\nimport { ExportUtils } from './utils/ExportUtils';\r\nimport { HuggingFaceService } from './utils/HuggingFaceService';\r\nimport { LanguageDetector } from './utils/LanguageDetector';\r\nimport { NotificationProvider, useNotification } from './components/NotificationProvider';\r\n\r\nfunction QuickDiffApp() {\r\n  // State management\r\n  const [originalText, setOriginalText] = useState('');\r\n  const [changedText, setChangedText] = useState('');\r\n  const [diffResult, setDiffResult] = useState(null);\r\n  const [showResults, setShowResults] = useState(false);\r\n  const [theme, setTheme] = useState('light');\r\n  const [contrast, setContrast] = useState('normal');\r\n  \r\n  // Settings state\r\n  const [settings, setSettings] = useState({\r\n    diffMode: 'line',\r\n    viewMode: 'side-by-side',\r\n    language: 'plaintext',\r\n    autoDetectLanguage: true,\r\n    ignoreCase: false,\r\n    ignoreWhitespace: false,\r\n    ignorePunctuation: false,\r\n    livePreview: false\r\n  });\r\n\r\n  // Language detection state\r\n  const [detectedLanguage, setDetectedLanguage] = useState({\r\n    language: 'plaintext',\r\n    confidence: 'low',\r\n    method: 'default'\r\n  });\r\n\r\n  // AI state\r\n  const [aiResults, setAiResults] = useState([]);\r\n  const [showAiResults, setShowAiResults] = useState(false);\r\n  const [isGeneratingAI, setIsGeneratingAI] = useState(false);\r\n\r\n  // Navigation state\r\n  const [changes, setChanges] = useState([]);\r\n  const [currentChangeIndex, setCurrentChangeIndex] = useState(-1);\r\n  const [minimapVisible, setMinimapVisible] = useState(false);\r\n  \r\n  // Initialize user guide\r\n  useEffect(() => {\r\n    new ReactUserGuide();\r\n  }, []);\r\n\r\n  // Refs\r\n  const debounceTimer = useRef(null);\r\n  const diffEngine = useRef(new DiffEngine());\r\n  const exportUtils = useRef(new ExportUtils());\r\n  const hfService = useRef(new HuggingFaceService());\r\n  const languageDetector = useRef(new LanguageDetector());\r\n  \r\n  const { showNotification } = useNotification();\r\n\r\n  // Settings management functions (defined early to avoid hoisting issues)\r\n  const loadSettings = () => {\r\n    try {\r\n      const savedSettings = localStorage.getItem('quickdiff_react_settings');\r\n      if (savedSettings) {\r\n        setSettings(prev => ({ ...prev, ...JSON.parse(savedSettings) }));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading settings:', error);\r\n    }\r\n  };\r\n\r\n  const saveSettings = useCallback(() => {\r\n    try {\r\n      localStorage.setItem('quickdiff_react_settings', JSON.stringify(settings));\r\n    } catch (error) {\r\n      console.error('Error saving settings:', error);\r\n    }\r\n  }, [settings]);\r\n\r\n  const loadTheme = () => {\r\n    const savedTheme = localStorage.getItem('quickdiff_theme') || 'light';\r\n    const savedContrast = localStorage.getItem('quickdiff_contrast') || 'normal';\r\n    setTheme(savedTheme);\r\n    setContrast(savedContrast);\r\n    document.documentElement.setAttribute('data-theme', savedTheme);\r\n    document.documentElement.setAttribute('data-contrast', savedContrast);\r\n  };\r\n\r\n  // Load settings and theme on mount\r\n  useEffect(() => {\r\n    loadSettings();\r\n    loadTheme();\r\n    \r\n    // Debug Hugging Face configuration\r\n    console.log('=== QuickDiff App Debug ===');\r\n    console.log('Environment variables check:');\r\n    console.log('REACT_APP_HUGGINGFACE_API_KEY:', process.env.REACT_APP_HUGGINGFACE_API_KEY ? 'Found' : 'Not found');\r\n    if (hfService.current) {\r\n      hfService.current.debugConfig();\r\n      \r\n      // Make HF service available globally for testing\r\n      window.testHF = async () => {\r\n        console.log('🧪 Testing Hugging Face API...');\r\n        try {\r\n          const result = await hfService.current.testConnection();\r\n          console.log('🧪 Test result:', result);\r\n          return result;\r\n        } catch (error) {\r\n          console.error('🧪 Test failed:', error);\r\n          return { success: false, error: error.message };\r\n        }\r\n      };\r\n      \r\n      console.log('💡 You can test HF API by running: testHF() in console');\r\n    }\r\n    console.log('========================');\r\n  }, []);\r\n\r\n\r\n  // Auto-save settings when they change\r\n  useEffect(() => {\r\n    saveSettings();\r\n  }, [settings, saveSettings]);\r\n\r\n\r\n\r\n  // Collect changes for navigation (defined early to avoid hoisting issues)\r\n  const collectChanges = useCallback((result) => {\r\n    if (!result) return;\r\n    \r\n    const newChanges = [];\r\n    \r\n    // Extract changes from originalLines (DiffEngine returns originalLines and changedLines)\r\n    if (result.originalLines) {\r\n      result.originalLines.forEach((line, index) => {\r\n        if (line.type && line.type !== 'unchanged' && line.type !== '') {\r\n          newChanges.push({\r\n            lineNumber: index + 1,\r\n            type: line.type,\r\n            content: line.content || '',\r\n            originalLineNumber: index + 1,\r\n            changedLineNumber: index + 1\r\n          });\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Also check changedLines for additional changes (like added lines)\r\n    if (result.changedLines) {\r\n      result.changedLines.forEach((line, index) => {\r\n        if (line.type && line.type !== 'unchanged' && line.type !== '') {\r\n          // Avoid duplicates by checking if we already have this change\r\n          const exists = newChanges.some(change => \r\n            change.lineNumber === index + 1 && change.type === line.type\r\n          );\r\n          if (!exists) {\r\n            newChanges.push({\r\n              lineNumber: index + 1,\r\n              type: line.type,\r\n              content: line.content || '',\r\n              originalLineNumber: index + 1,\r\n              changedLineNumber: index + 1\r\n            });\r\n          }\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Sort changes by line number\r\n    newChanges.sort((a, b) => a.lineNumber - b.lineNumber);\r\n    \r\n    console.log('Collected Changes:', newChanges); // Debug log\r\n    setChanges(newChanges);\r\n    setCurrentChangeIndex(newChanges.length > 0 ? 0 : -1);\r\n    \r\n    if (newChanges.length > 0) {\r\n      showNotification(`Found ${newChanges.length} changes`);\r\n    } else {\r\n      showNotification('No changes detected');\r\n    }\r\n  }, [showNotification]);\r\n\r\n  // Main comparison function (defined early to avoid hoisting issues)\r\n  const performComparison = useCallback(() => {\r\n    if (!originalText.trim() && !changedText.trim()) {\r\n      showNotification('Please enter some text to compare');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const result = diffEngine.current.performComparison(\r\n        originalText,\r\n        changedText,\r\n        settings\r\n      );\r\n\r\n      console.log('Diff Result:', result); // Debug log\r\n      setDiffResult(result);\r\n      setShowResults(true);\r\n      collectChanges(result);\r\n      \r\n      // Auto-generate AI analysis is disabled to prevent duplicate results\r\n      // Users can manually trigger AI analysis using the AI buttons\r\n      \r\n      // Auto-scroll to results only if live preview is disabled\r\n      if (!settings.livePreview) {\r\n        setTimeout(() => {\r\n          const resultsElement = document.getElementById('results-section');\r\n          if (resultsElement) {\r\n            resultsElement.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n          }\r\n        }, 100);\r\n      }\r\n\r\n      showNotification('Comparison completed');\r\n    } catch (error) {\r\n      console.error('Comparison error:', error);\r\n      showNotification('Error performing comparison');\r\n    }\r\n  }, [originalText, changedText, settings, showNotification, collectChanges]);\r\n\r\n  // Theme management\r\n  const toggleTheme = () => {\r\n    const newTheme = theme === 'light' ? 'dark' : 'light';\r\n    setTheme(newTheme);\r\n    localStorage.setItem('quickdiff_theme', newTheme);\r\n    document.documentElement.setAttribute('data-theme', newTheme);\r\n    showNotification(`Switched to ${newTheme} theme`);\r\n  };\r\n\r\n  const toggleContrast = () => {\r\n    const newContrast = contrast === 'normal' ? 'high' : 'normal';\r\n    setContrast(newContrast);\r\n    localStorage.setItem('quickdiff_contrast', newContrast);\r\n    document.documentElement.setAttribute('data-contrast', newContrast);\r\n    showNotification(`${newContrast === 'high' ? 'Enabled' : 'Disabled'} high contrast mode`);\r\n  };\r\n\r\n  // Text manipulation functions\r\n  const clearAll = () => {\r\n    setOriginalText('');\r\n    setChangedText('');\r\n    setShowResults(false);\r\n    setDiffResult(null);\r\n    setAiResults([]);\r\n    setShowAiResults(false);\r\n    showNotification('All content cleared');\r\n  };\r\n\r\n  const swapTexts = () => {\r\n    const temp = originalText;\r\n    setOriginalText(changedText);\r\n    setChangedText(temp);\r\n    showNotification('Texts swapped');\r\n    \r\n    if (settings.livePreview && (originalText.trim() || changedText.trim())) {\r\n      performComparison();\r\n    }\r\n  };\r\n\r\n  // File handling\r\n  const handleFileLoad = (file, target) => {\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      const content = e.target.result;\r\n      if (target === 'original') {\r\n        setOriginalText(content);\r\n      } else {\r\n        setChangedText(content);\r\n      }\r\n      \r\n      // Auto-detect language from filename if enabled\r\n      if (settings.autoDetectLanguage) {\r\n        const detection = languageDetector.current.autoDetect(content, file.name);\r\n        setDetectedLanguage(detection);\r\n        \r\n        if (detection.language !== 'plaintext') {\r\n          setSettings(prev => ({\r\n            ...prev,\r\n            language: detection.language\r\n          }));\r\n        }\r\n        showNotification(`File loaded: ${file.name}`);\r\n      } else {\r\n        showNotification(`File loaded: ${file.name}`);\r\n      }\r\n    };\r\n    reader.readAsText(file);\r\n  };\r\n\r\n  // Export functions\r\n  const copyResults = () => {\r\n    exportUtils.current.copyResults(originalText, changedText, aiResults)\r\n      .then(() => showNotification('Results copied to clipboard'))\r\n      .catch(() => showNotification('Failed to copy results'));\r\n  };\r\n\r\n  const exportToTxt = () => {\r\n    exportUtils.current.exportToTxt(originalText, changedText, diffResult, aiResults);\r\n    showNotification('Exported as TXT file');\r\n  };\r\n\r\n  const exportToHtml = () => {\r\n    exportUtils.current.exportToHtml(originalText, changedText, diffResult, aiResults);\r\n    showNotification('Exported as HTML file');\r\n  };\r\n\r\n  const exportToMarkdown = () => {\r\n    exportUtils.current.exportToMarkdown(originalText, changedText, diffResult, aiResults);\r\n    showNotification('Exported as Markdown file');\r\n  };\r\n\r\n  const exportToPdf = () => {\r\n    exportUtils.current.exportToPdf(originalText, changedText, diffResult, aiResults);\r\n    showNotification('Exported as PDF file');\r\n  };\r\n\r\n  // AI functions\r\n  const generateAIAnalysis = async (type) => {\r\n    if (!originalText.trim() && !changedText.trim()) {\r\n      showNotification('Please enter some text to analyze');\r\n      return;\r\n    }\r\n\r\n    // Check if this analysis type already exists to prevent duplicates\r\n    const existingAnalysis = aiResults.find(result => result.type === type);\r\n    if (existingAnalysis) {\r\n      showNotification(`${type} analysis already exists. Clear AI results first to regenerate.`);\r\n      return;\r\n    }\r\n\r\n    setIsGeneratingAI(true);\r\n    try {\r\n      if (hfService.current.isConfigured()) {\r\n        // Use Hugging Face API when configured\r\n        showNotification('Generating AI analysis...');\r\n        const analysis = await hfService.current.generateAnalysis(type, originalText, changedText);\r\n        setAiResults(prev => [...prev, analysis]);\r\n        setShowAiResults(true);\r\n        showNotification('AI analysis completed');\r\n      } else {\r\n        // Generate local analysis when API is not configured\r\n        showNotification('Generating local analysis (Hugging Face API not configured)');\r\n        const analysis = await hfService.current.generateLocalAnalysis(type, originalText, changedText);\r\n        setAiResults(prev => [...prev, analysis]);\r\n        setShowAiResults(true);\r\n        showNotification('Local analysis completed');\r\n      }\r\n    } catch (error) {\r\n      console.error('AI Analysis Error:', error);\r\n      // Try to generate fallback analysis even on error\r\n      try {\r\n        const fallbackAnalysis = await hfService.current.generateLocalAnalysis(type, originalText, changedText);\r\n        setAiResults(prev => [...prev, fallbackAnalysis]);\r\n        setShowAiResults(true);\r\n        showNotification('Local analysis completed (AI service unavailable)');\r\n      } catch (fallbackError) {\r\n        showNotification(`Analysis failed: ${error.message}`);\r\n      }\r\n    } finally {\r\n      setIsGeneratingAI(false);\r\n    }\r\n  };\r\n\r\n  const clearAIResults = () => {\r\n    setAiResults([]);\r\n    setShowAiResults(false);\r\n    showNotification('AI results cleared');\r\n  };\r\n\r\n  const removeAICard = (index) => {\r\n    setAiResults(prev => prev.filter((_, i) => i !== index));\r\n    showNotification('AI analysis removed');\r\n    \r\n    // Hide AI results section if no cards left\r\n    if (aiResults.length <= 1) {\r\n      setShowAiResults(false);\r\n    }\r\n  };\r\n\r\n  // Navigation functions\r\n  const navigateToPreviousChange = () => {\r\n    console.log('Navigate Previous - Changes:', changes.length, 'Current Index:', currentChangeIndex); // Debug log\r\n    if (changes.length === 0) {\r\n      showNotification('No changes to navigate');\r\n      return;\r\n    }\r\n    \r\n    const newIndex = currentChangeIndex > 0 ? currentChangeIndex - 1 : changes.length - 1;\r\n    setCurrentChangeIndex(newIndex);\r\n    scrollToChange(newIndex);\r\n  };\r\n\r\n  const navigateToNextChange = () => {\r\n    console.log('Navigate Next - Changes:', changes.length, 'Current Index:', currentChangeIndex); // Debug log\r\n    if (changes.length === 0) {\r\n      showNotification('No changes to navigate');\r\n      return;\r\n    }\r\n    \r\n    const newIndex = currentChangeIndex < changes.length - 1 ? currentChangeIndex + 1 : 0;\r\n    setCurrentChangeIndex(newIndex);\r\n    scrollToChange(newIndex);\r\n  };\r\n\r\n  const scrollToChange = (index) => {\r\n    if (index < 0 || index >= changes.length) return;\r\n    \r\n    const change = changes[index];\r\n    \r\n    // Try multiple selectors to find the line\r\n    let lineElement = document.querySelector(`[data-line-number=\"${change.lineNumber}\"][data-line-type=\"${change.type}\"]`);\r\n    \r\n    if (!lineElement) {\r\n      lineElement = document.querySelector(`[data-original-line=\"${change.lineNumber}\"]`);\r\n    }\r\n    \r\n    if (!lineElement) {\r\n      lineElement = document.querySelector(`[data-line-number=\"${change.lineNumber}\"]`);\r\n    }\r\n    \r\n    if (lineElement) {\r\n      // Remove previous highlights\r\n      document.querySelectorAll('.current-change').forEach(el => {\r\n        el.classList.remove('current-change');\r\n      });\r\n      \r\n      lineElement.scrollIntoView({ \r\n        behavior: 'smooth', \r\n        block: 'center' \r\n      });\r\n      \r\n      // Highlight the current change temporarily\r\n      lineElement.classList.add('current-change');\r\n      setTimeout(() => {\r\n        lineElement.classList.remove('current-change');\r\n      }, 3000);\r\n      \r\n      showNotification(`Navigated to change ${index + 1} of ${changes.length}: ${change.type}`);\r\n    } else {\r\n      showNotification(`Could not find change ${index + 1} (line ${change.lineNumber})`);\r\n    }\r\n  };\r\n\r\n  const toggleMinimap = () => {\r\n    setMinimapVisible(!minimapVisible);\r\n    showNotification(minimapVisible ? 'Minimap hidden' : 'Minimap shown');\r\n  };\r\n\r\n  // Auto-detect language when text changes\r\n  useEffect(() => {\r\n    if (settings.autoDetectLanguage && (originalText.trim() || changedText.trim())) {\r\n      const combinedText = originalText + '\\n' + changedText;\r\n      const detection = languageDetector.current.autoDetect(combinedText);\r\n      \r\n      setDetectedLanguage(detection);\r\n      \r\n      // Auto-update language setting for any detection that's not plaintext\r\n      if (detection.language !== 'plaintext' && detection.language !== settings.language) {\r\n        setSettings(prev => ({\r\n          ...prev,\r\n          language: detection.language\r\n        }));\r\n      }\r\n    } else if (!settings.autoDetectLanguage) {\r\n      // Reset to default when auto-detect is disabled\r\n      setDetectedLanguage({\r\n        language: 'plaintext',\r\n        confidence: 'low',\r\n        method: 'default'\r\n      });\r\n    }\r\n  }, [originalText, changedText, settings.autoDetectLanguage, settings.language]);\r\n\r\n  // Live preview with debouncing\r\n  useEffect(() => {\r\n    if (settings.livePreview && (originalText.trim() || changedText.trim())) {\r\n      clearTimeout(debounceTimer.current);\r\n      debounceTimer.current = setTimeout(() => {\r\n        performComparison();\r\n      }, 500);\r\n    }\r\n    \r\n    return () => clearTimeout(debounceTimer.current);\r\n  }, [originalText, changedText, settings.livePreview, settings.diffMode, settings.ignoreCase, settings.ignoreWhitespace, settings.ignorePunctuation, performComparison]);\r\n\r\n  // Keyboard shortcuts\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      // Don't trigger shortcuts when typing in text areas or input fields\r\n      if (e.target.tagName === 'TEXTAREA' || e.target.tagName === 'INPUT') {\r\n        return;\r\n      }\r\n      \r\n      if (e.ctrlKey || e.metaKey) {\r\n        switch (e.key.toLowerCase()) {\r\n          case 'enter':\r\n            e.preventDefault();\r\n            performComparison();\r\n            showNotification('⌨️ Ctrl+Enter: Comparison started');\r\n            break;\r\n          case 'k':\r\n            e.preventDefault();\r\n            clearAll();\r\n            showNotification('⌨️ Ctrl+K: All content cleared');\r\n            break;\r\n          case 's':\r\n            e.preventDefault();\r\n            swapTexts();\r\n            showNotification('⌨️ Ctrl+S: Texts swapped');\r\n            break;\r\n          case 'c':\r\n            if (showResults) {\r\n              e.preventDefault();\r\n              copyResults();\r\n              showNotification('⌨️ Ctrl+C: Results copied');\r\n            }\r\n            break;\r\n          case 'd':\r\n            e.preventDefault();\r\n            toggleTheme();\r\n            showNotification('⌨️ Ctrl+D: Theme toggled');\r\n            break;\r\n          case 'h':\r\n            e.preventDefault();\r\n            toggleContrast();\r\n            showNotification('⌨️ Ctrl+H: Contrast toggled');\r\n            break;\r\n          case 'm':\r\n            e.preventDefault();\r\n            toggleMinimap();\r\n            showNotification('⌨️ Ctrl+M: Minimap toggled');\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n      \r\n      // Handle other shortcuts\r\n      switch (e.key) {\r\n        case 'Escape':\r\n          if (showAiResults) {\r\n            clearAIResults();\r\n            showNotification('⌨️ Escape: AI results cleared');\r\n          }\r\n          break;\r\n        case 'ArrowUp':\r\n          if (e.ctrlKey) {\r\n            e.preventDefault();\r\n            navigateToPreviousChange();\r\n          }\r\n          break;\r\n        case 'ArrowDown':\r\n          if (e.ctrlKey) {\r\n            e.preventDefault();\r\n            navigateToNextChange();\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', handleKeyDown);\r\n    return () => document.removeEventListener('keydown', handleKeyDown);\r\n  }, [showResults, showAiResults, performComparison, clearAll, swapTexts, copyResults, toggleTheme, toggleContrast, toggleMinimap, clearAIResults, navigateToPreviousChange, navigateToNextChange, showNotification]);\r\n\r\n  return (\r\n    <div className=\"quickdiff-app\">\r\n      <div className=\"container\">\r\n        <Header \r\n          onThemeToggle={toggleTheme}\r\n          onContrastToggle={toggleContrast}\r\n        />\r\n        \r\n        <SettingsPanel \r\n          settings={settings}\r\n          onSettingsChange={setSettings}\r\n          detectedLanguage={detectedLanguage}\r\n        />\r\n        \r\n        <InputSection\r\n          originalText={originalText}\r\n          changedText={changedText}\r\n          onOriginalTextChange={setOriginalText}\r\n          onChangedTextChange={setChangedText}\r\n          onFileLoad={handleFileLoad}\r\n        />\r\n        \r\n        <Controls\r\n          onCompare={performComparison}\r\n          onClear={clearAll}\r\n          onSwap={swapTexts}\r\n          onCopy={copyResults}\r\n          onExportTxt={exportToTxt}\r\n          onExportHtml={exportToHtml}\r\n          onExportMd={exportToMarkdown}\r\n          onExportPdf={exportToPdf}\r\n          onAIAnalysis={generateAIAnalysis}\r\n          hasResults={showResults}\r\n          isGeneratingAI={isGeneratingAI}\r\n          hfConfigured={hfService.current.isConfigured()}\r\n        />\r\n        \r\n        <Legend />\r\n        \r\n        {showResults && (\r\n          <Results\r\n            diffResult={diffResult}\r\n            settings={settings}\r\n            changes={changes}\r\n            currentChangeIndex={currentChangeIndex}\r\n            minimapVisible={minimapVisible}\r\n            onNavigatePrevious={navigateToPreviousChange}\r\n            onNavigateNext={navigateToNextChange}\r\n            onToggleMinimap={toggleMinimap}\r\n            onNavigateToChange={(index) => {\r\n              setCurrentChangeIndex(index);\r\n              scrollToChange(index);\r\n            }}\r\n            aiResults={aiResults}\r\n            showAiResults={showAiResults}\r\n            onClearAIResults={clearAIResults}\r\n            onRemoveAICard={removeAICard}\r\n          />\r\n        )}\r\n        \r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <NotificationProvider>\r\n      <QuickDiffApp />\r\n    </NotificationProvider>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}