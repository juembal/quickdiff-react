{"ast":null,"code":"export class AIEngine{generateAnalysis(type,originalText,changedText){switch(type){case'explain':return this.generateExplanation(originalText,changedText);case'rewrite':return this.generateRewrite(originalText,changedText);case'summary':return this.generateSummary(originalText,changedText);case'tone':return this.generateToneAnalysis(originalText,changedText);case'cleanup':return this.generateCleanup(originalText,changedText);default:return this.generateExplanation(originalText,changedText);}}generateExplanation(originalText,changedText){const originalLines=originalText.split('\\n').length;const changedLines=changedText.split('\\n').length;const originalWords=originalText.split(/\\s+/).filter(w=>w.length>0).length;const changedWords=changedText.split(/\\s+/).filter(w=>w.length>0).length;const content=\"\\n      <div class=\\\"ai-explanation\\\">\\n        <h4>\\uD83D\\uDCCA Text Analysis</h4>\\n        <div class=\\\"analysis-stats\\\">\\n          <div class=\\\"stat-item\\\">\\n            <strong>Original Text:</strong> \".concat(originalLines,\" lines, \").concat(originalWords,\" words, \").concat(originalText.length,\" characters\\n          </div>\\n          <div class=\\\"stat-item\\\">\\n            <strong>Changed Text:</strong> \").concat(changedLines,\" lines, \").concat(changedWords,\" words, \").concat(changedText.length,\" characters\\n          </div>\\n          <div class=\\\"stat-item\\\">\\n            <strong>Difference:</strong> \").concat(Math.abs(changedLines-originalLines),\" lines, \").concat(Math.abs(changedWords-originalWords),\" words, \").concat(Math.abs(changedText.length-originalText.length),\" characters\\n          </div>\\n        </div>\\n        \\n        <h4>\\uD83D\\uDD0D Key Changes Detected</h4>\\n        <ul>\\n          \").concat(originalLines!==changedLines?\"<li>Line count changed from \".concat(originalLines,\" to \").concat(changedLines,\"</li>\"):'',\"\\n          \").concat(originalWords!==changedWords?\"<li>Word count changed from \".concat(originalWords,\" to \").concat(changedWords,\"</li>\"):'',\"\\n          \").concat(originalText.length!==changedText.length?\"<li>Character count changed from \".concat(originalText.length,\" to \").concat(changedText.length,\"</li>\"):'',\"\\n          \").concat(originalText===changedText?'<li>No changes detected - texts are identical</li>':'',\"\\n        </ul>\\n        \\n        <h4>\\uD83D\\uDCA1 Recommendations</h4>\\n        <ul>\\n          <li>Review highlighted differences in the comparison view</li>\\n          <li>Check for formatting consistency between versions</li>\\n          <li>Verify that important content hasn't been accidentally removed</li>\\n          \").concat(Math.abs(changedText.length-originalText.length)>originalText.length*0.5?'<li>‚ö†Ô∏è Significant length change detected - review carefully</li>':'',\"\\n        </ul>\\n      </div>\\n    \");return{title:'üß† AI Explanation',content,type:'explanation'};}generateRewrite(originalText,changedText){const content=\"\\n      <div class=\\\"ai-rewrite\\\">\\n        <h4>\\u2728 Rewrite Suggestions</h4>\\n        \\n        <div class=\\\"suggestion-section\\\">\\n          <h5>\\uD83D\\uDCDD Style Improvements</h5>\\n          <ul>\\n            <li>Consider breaking long sentences into shorter, more readable ones</li>\\n            <li>Use active voice where possible for clearer communication</li>\\n            <li>Ensure consistent terminology throughout the text</li>\\n            <li>Remove redundant words and phrases</li>\\n          </ul>\\n        </div>\\n        \\n        <div class=\\\"suggestion-section\\\">\\n          <h5>\\uD83C\\uDFAF Clarity Enhancements</h5>\\n          <ul>\\n            <li>Add transitional phrases to improve flow</li>\\n            <li>Define technical terms or acronyms on first use</li>\\n            <li>Use bullet points or numbered lists for complex information</li>\\n            <li>Ensure each paragraph has a clear main idea</li>\\n          </ul>\\n        </div>\\n        \\n        <div class=\\\"suggestion-section\\\">\\n          <h5>\\uD83D\\uDD27 Structure Recommendations</h5>\\n          <ul>\\n            <li>Start with a clear introduction or summary</li>\\n            <li>Organize content in logical order</li>\\n            <li>Use headings and subheadings for better navigation</li>\\n            <li>End with a conclusion or call to action</li>\\n          </ul>\\n        </div>\\n      </div>\\n    \";return{title:'‚ú® AI Rewrite Suggestions',content,type:'rewrite'};}generateSummary(originalText,changedText){const combinedText=originalText+'\\n\\n'+changedText;const sentences=combinedText.split(/[.!?]+/).filter(s=>s.trim().length>10);const keyPoints=sentences.slice(0,3).map(s=>s.trim());const content=\"\\n      <div class=\\\"ai-summary\\\">\\n        <h4>\\uD83D\\uDCDD Text Summary</h4>\\n        \\n        <div class=\\\"summary-section\\\">\\n          <h5>\\uD83C\\uDFAF Key Points</h5>\\n          <ul>\\n            \".concat(keyPoints.map(point=>\"<li>\".concat(point,\"</li>\")).join(''),\"\\n          </ul>\\n        </div>\\n        \\n        <div class=\\\"summary-section\\\">\\n          <h5>\\uD83D\\uDCCA Overview</h5>\\n          <p>The text contains \").concat(sentences.length,\" main sentences covering various topics. \\n          \").concat(originalText&&changedText?'Both original and changed versions have been analyzed.':'Single text version analyzed.',\"</p>\\n        </div>\\n        \\n        <div class=\\\"summary-section\\\">\\n          <h5>\\uD83D\\uDD0D Main Themes</h5>\\n          <ul>\\n            <li>Primary content focus and structure</li>\\n            <li>Key information and data points</li>\\n            <li>Important conclusions or recommendations</li>\\n          </ul>\\n        </div>\\n      </div>\\n    \");return{title:'üìù AI Summary',content,type:'summary'};}generateToneAnalysis(originalText,changedText){const analyzeText=text=>{const words=text.toLowerCase().split(/\\s+/);const positiveWords=['good','great','excellent','amazing','wonderful','fantastic','positive','success','achieve','improve'];const negativeWords=['bad','terrible','awful','horrible','negative','fail','problem','issue','error','wrong'];const formalWords=['therefore','furthermore','consequently','however','nevertheless','accordingly'];const positiveCount=words.filter(w=>positiveWords.includes(w)).length;const negativeCount=words.filter(w=>negativeWords.includes(w)).length;const formalCount=words.filter(w=>formalWords.includes(w)).length;return{positiveCount,negativeCount,formalCount,totalWords:words.length};};const originalAnalysis=analyzeText(originalText);const changedAnalysis=analyzeText(changedText);const content=\"\\n      <div class=\\\"ai-tone\\\">\\n        <h4>\\uD83C\\uDFAD Tone Analysis</h4>\\n        \\n        <div class=\\\"tone-section\\\">\\n          <h5>\\uD83D\\uDCCA Original Text Tone</h5>\\n          <ul>\\n            <li><strong>Sentiment:</strong> \".concat(originalAnalysis.positiveCount>originalAnalysis.negativeCount?'Positive':originalAnalysis.negativeCount>originalAnalysis.positiveCount?'Negative':'Neutral',\"</li>\\n            <li><strong>Formality:</strong> \").concat(originalAnalysis.formalCount>2?'Formal':'Informal',\"</li>\\n            <li><strong>Positive indicators:</strong> \").concat(originalAnalysis.positiveCount,\" words</li>\\n            <li><strong>Negative indicators:</strong> \").concat(originalAnalysis.negativeCount,\" words</li>\\n          </ul>\\n        </div>\\n        \\n        \").concat(changedText?\"\\n        <div class=\\\"tone-section\\\">\\n          <h5>\\uD83D\\uDCCA Changed Text Tone</h5>\\n          <ul>\\n            <li><strong>Sentiment:</strong> \".concat(changedAnalysis.positiveCount>changedAnalysis.negativeCount?'Positive':changedAnalysis.negativeCount>changedAnalysis.positiveCount?'Negative':'Neutral',\"</li>\\n            <li><strong>Formality:</strong> \").concat(changedAnalysis.formalCount>2?'Formal':'Informal',\"</li>\\n            <li><strong>Positive indicators:</strong> \").concat(changedAnalysis.positiveCount,\" words</li>\\n            <li><strong>Negative indicators:</strong> \").concat(changedAnalysis.negativeCount,\" words</li>\\n          </ul>\\n        </div>\\n        \"):'',\"\\n        \\n        <div class=\\\"tone-section\\\">\\n          <h5>\\uD83D\\uDCA1 Tone Recommendations</h5>\\n          <ul>\\n            <li>Maintain consistent tone throughout the document</li>\\n            <li>Consider your target audience when choosing formality level</li>\\n            <li>Balance positive and negative language appropriately</li>\\n            <li>Use active voice for more engaging tone</li>\\n          </ul>\\n        </div>\\n      </div>\\n    \");return{title:'üé≠ AI Tone Analysis',content,type:'tone'};}generateCleanup(originalText,changedText){const cleanupSuggestions=[];// Check for common issues\nif(originalText.includes('  '))cleanupSuggestions.push('Remove extra spaces');if(originalText.includes('\\n\\n\\n'))cleanupSuggestions.push('Reduce excessive line breaks');if(originalText.match(/[.]{2,}/))cleanupSuggestions.push('Fix multiple periods');if(originalText.match(/[!]{2,}/))cleanupSuggestions.push('Fix multiple exclamation marks');if(originalText.match(/[?]{2,}/))cleanupSuggestions.push('Fix multiple question marks');const content=\"\\n      <div class=\\\"ai-cleanup\\\">\\n        <h4>\\uD83E\\uDDF9 Text Cleanup Analysis</h4>\\n        \\n        <div class=\\\"cleanup-section\\\">\\n          <h5>\\uD83D\\uDD0D Issues Detected</h5>\\n          \".concat(cleanupSuggestions.length>0?\"\\n            <ul>\\n              \".concat(cleanupSuggestions.map(suggestion=>\"<li>\".concat(suggestion,\"</li>\")).join(''),\"\\n            </ul>\\n          \"):'<p>‚úÖ No major formatting issues detected!</p>',\"\\n        </div>\\n        \\n        <div class=\\\"cleanup-section\\\">\\n          <h5>\\u2728 Cleanup Recommendations</h5>\\n          <ul>\\n            <li>Remove trailing whitespace at line ends</li>\\n            <li>Standardize line break usage</li>\\n            <li>Fix inconsistent punctuation</li>\\n            <li>Normalize quotation marks</li>\\n            <li>Remove unnecessary special characters</li>\\n          </ul>\\n        </div>\\n        \\n        <div class=\\\"cleanup-section\\\">\\n          <h5>\\uD83C\\uDFAF Best Practices</h5>\\n          <ul>\\n            <li>Use single spaces between words</li>\\n            <li>Use single line breaks between paragraphs</li>\\n            <li>Be consistent with punctuation style</li>\\n            <li>Remove empty lines at document start/end</li>\\n          </ul>\\n        </div>\\n      </div>\\n    \");return{title:'üßπ AI Text Cleanup',content,type:'cleanup'};}}","map":{"version":3,"names":["AIEngine","generateAnalysis","type","originalText","changedText","generateExplanation","generateRewrite","generateSummary","generateToneAnalysis","generateCleanup","originalLines","split","length","changedLines","originalWords","filter","w","changedWords","content","concat","Math","abs","title","combinedText","sentences","s","trim","keyPoints","slice","map","point","join","analyzeText","text","words","toLowerCase","positiveWords","negativeWords","formalWords","positiveCount","includes","negativeCount","formalCount","totalWords","originalAnalysis","changedAnalysis","cleanupSuggestions","push","match","suggestion"],"sources":["C:/Users/Joem/quickdiff-react/src/utils/AIEngine.js"],"sourcesContent":["export class AIEngine {\r\n  generateAnalysis(type, originalText, changedText) {\r\n    switch (type) {\r\n      case 'explain':\r\n        return this.generateExplanation(originalText, changedText);\r\n      case 'rewrite':\r\n        return this.generateRewrite(originalText, changedText);\r\n      case 'summary':\r\n        return this.generateSummary(originalText, changedText);\r\n      case 'tone':\r\n        return this.generateToneAnalysis(originalText, changedText);\r\n      case 'cleanup':\r\n        return this.generateCleanup(originalText, changedText);\r\n      default:\r\n        return this.generateExplanation(originalText, changedText);\r\n    }\r\n  }\r\n\r\n  generateExplanation(originalText, changedText) {\r\n    const originalLines = originalText.split('\\n').length;\r\n    const changedLines = changedText.split('\\n').length;\r\n    const originalWords = originalText.split(/\\s+/).filter(w => w.length > 0).length;\r\n    const changedWords = changedText.split(/\\s+/).filter(w => w.length > 0).length;\r\n    \r\n    const content = `\r\n      <div class=\"ai-explanation\">\r\n        <h4>üìä Text Analysis</h4>\r\n        <div class=\"analysis-stats\">\r\n          <div class=\"stat-item\">\r\n            <strong>Original Text:</strong> ${originalLines} lines, ${originalWords} words, ${originalText.length} characters\r\n          </div>\r\n          <div class=\"stat-item\">\r\n            <strong>Changed Text:</strong> ${changedLines} lines, ${changedWords} words, ${changedText.length} characters\r\n          </div>\r\n          <div class=\"stat-item\">\r\n            <strong>Difference:</strong> ${Math.abs(changedLines - originalLines)} lines, ${Math.abs(changedWords - originalWords)} words, ${Math.abs(changedText.length - originalText.length)} characters\r\n          </div>\r\n        </div>\r\n        \r\n        <h4>üîç Key Changes Detected</h4>\r\n        <ul>\r\n          ${originalLines !== changedLines ? `<li>Line count changed from ${originalLines} to ${changedLines}</li>` : ''}\r\n          ${originalWords !== changedWords ? `<li>Word count changed from ${originalWords} to ${changedWords}</li>` : ''}\r\n          ${originalText.length !== changedText.length ? `<li>Character count changed from ${originalText.length} to ${changedText.length}</li>` : ''}\r\n          ${originalText === changedText ? '<li>No changes detected - texts are identical</li>' : ''}\r\n        </ul>\r\n        \r\n        <h4>üí° Recommendations</h4>\r\n        <ul>\r\n          <li>Review highlighted differences in the comparison view</li>\r\n          <li>Check for formatting consistency between versions</li>\r\n          <li>Verify that important content hasn't been accidentally removed</li>\r\n          ${Math.abs(changedText.length - originalText.length) > originalText.length * 0.5 ? '<li>‚ö†Ô∏è Significant length change detected - review carefully</li>' : ''}\r\n        </ul>\r\n      </div>\r\n    `;\r\n    \r\n    return {\r\n      title: 'üß† AI Explanation',\r\n      content,\r\n      type: 'explanation'\r\n    };\r\n  }\r\n\r\n  generateRewrite(originalText, changedText) {\r\n    const content = `\r\n      <div class=\"ai-rewrite\">\r\n        <h4>‚ú® Rewrite Suggestions</h4>\r\n        \r\n        <div class=\"suggestion-section\">\r\n          <h5>üìù Style Improvements</h5>\r\n          <ul>\r\n            <li>Consider breaking long sentences into shorter, more readable ones</li>\r\n            <li>Use active voice where possible for clearer communication</li>\r\n            <li>Ensure consistent terminology throughout the text</li>\r\n            <li>Remove redundant words and phrases</li>\r\n          </ul>\r\n        </div>\r\n        \r\n        <div class=\"suggestion-section\">\r\n          <h5>üéØ Clarity Enhancements</h5>\r\n          <ul>\r\n            <li>Add transitional phrases to improve flow</li>\r\n            <li>Define technical terms or acronyms on first use</li>\r\n            <li>Use bullet points or numbered lists for complex information</li>\r\n            <li>Ensure each paragraph has a clear main idea</li>\r\n          </ul>\r\n        </div>\r\n        \r\n        <div class=\"suggestion-section\">\r\n          <h5>üîß Structure Recommendations</h5>\r\n          <ul>\r\n            <li>Start with a clear introduction or summary</li>\r\n            <li>Organize content in logical order</li>\r\n            <li>Use headings and subheadings for better navigation</li>\r\n            <li>End with a conclusion or call to action</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    `;\r\n    \r\n    return {\r\n      title: '‚ú® AI Rewrite Suggestions',\r\n      content,\r\n      type: 'rewrite'\r\n    };\r\n  }\r\n\r\n  generateSummary(originalText, changedText) {\r\n    const combinedText = originalText + '\\n\\n' + changedText;\r\n    const sentences = combinedText.split(/[.!?]+/).filter(s => s.trim().length > 10);\r\n    const keyPoints = sentences.slice(0, 3).map(s => s.trim());\r\n    \r\n    const content = `\r\n      <div class=\"ai-summary\">\r\n        <h4>üìù Text Summary</h4>\r\n        \r\n        <div class=\"summary-section\">\r\n          <h5>üéØ Key Points</h5>\r\n          <ul>\r\n            ${keyPoints.map(point => `<li>${point}</li>`).join('')}\r\n          </ul>\r\n        </div>\r\n        \r\n        <div class=\"summary-section\">\r\n          <h5>üìä Overview</h5>\r\n          <p>The text contains ${sentences.length} main sentences covering various topics. \r\n          ${originalText && changedText ? 'Both original and changed versions have been analyzed.' : 'Single text version analyzed.'}</p>\r\n        </div>\r\n        \r\n        <div class=\"summary-section\">\r\n          <h5>üîç Main Themes</h5>\r\n          <ul>\r\n            <li>Primary content focus and structure</li>\r\n            <li>Key information and data points</li>\r\n            <li>Important conclusions or recommendations</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    `;\r\n    \r\n    return {\r\n      title: 'üìù AI Summary',\r\n      content,\r\n      type: 'summary'\r\n    };\r\n  }\r\n\r\n  generateToneAnalysis(originalText, changedText) {\r\n    const analyzeText = (text) => {\r\n      const words = text.toLowerCase().split(/\\s+/);\r\n      const positiveWords = ['good', 'great', 'excellent', 'amazing', 'wonderful', 'fantastic', 'positive', 'success', 'achieve', 'improve'];\r\n      const negativeWords = ['bad', 'terrible', 'awful', 'horrible', 'negative', 'fail', 'problem', 'issue', 'error', 'wrong'];\r\n      const formalWords = ['therefore', 'furthermore', 'consequently', 'however', 'nevertheless', 'accordingly'];\r\n      \r\n      const positiveCount = words.filter(w => positiveWords.includes(w)).length;\r\n      const negativeCount = words.filter(w => negativeWords.includes(w)).length;\r\n      const formalCount = words.filter(w => formalWords.includes(w)).length;\r\n      \r\n      return { positiveCount, negativeCount, formalCount, totalWords: words.length };\r\n    };\r\n    \r\n    const originalAnalysis = analyzeText(originalText);\r\n    const changedAnalysis = analyzeText(changedText);\r\n    \r\n    const content = `\r\n      <div class=\"ai-tone\">\r\n        <h4>üé≠ Tone Analysis</h4>\r\n        \r\n        <div class=\"tone-section\">\r\n          <h5>üìä Original Text Tone</h5>\r\n          <ul>\r\n            <li><strong>Sentiment:</strong> ${originalAnalysis.positiveCount > originalAnalysis.negativeCount ? 'Positive' : originalAnalysis.negativeCount > originalAnalysis.positiveCount ? 'Negative' : 'Neutral'}</li>\r\n            <li><strong>Formality:</strong> ${originalAnalysis.formalCount > 2 ? 'Formal' : 'Informal'}</li>\r\n            <li><strong>Positive indicators:</strong> ${originalAnalysis.positiveCount} words</li>\r\n            <li><strong>Negative indicators:</strong> ${originalAnalysis.negativeCount} words</li>\r\n          </ul>\r\n        </div>\r\n        \r\n        ${changedText ? `\r\n        <div class=\"tone-section\">\r\n          <h5>üìä Changed Text Tone</h5>\r\n          <ul>\r\n            <li><strong>Sentiment:</strong> ${changedAnalysis.positiveCount > changedAnalysis.negativeCount ? 'Positive' : changedAnalysis.negativeCount > changedAnalysis.positiveCount ? 'Negative' : 'Neutral'}</li>\r\n            <li><strong>Formality:</strong> ${changedAnalysis.formalCount > 2 ? 'Formal' : 'Informal'}</li>\r\n            <li><strong>Positive indicators:</strong> ${changedAnalysis.positiveCount} words</li>\r\n            <li><strong>Negative indicators:</strong> ${changedAnalysis.negativeCount} words</li>\r\n          </ul>\r\n        </div>\r\n        ` : ''}\r\n        \r\n        <div class=\"tone-section\">\r\n          <h5>üí° Tone Recommendations</h5>\r\n          <ul>\r\n            <li>Maintain consistent tone throughout the document</li>\r\n            <li>Consider your target audience when choosing formality level</li>\r\n            <li>Balance positive and negative language appropriately</li>\r\n            <li>Use active voice for more engaging tone</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    `;\r\n    \r\n    return {\r\n      title: 'üé≠ AI Tone Analysis',\r\n      content,\r\n      type: 'tone'\r\n    };\r\n  }\r\n\r\n  generateCleanup(originalText, changedText) {\r\n    const cleanupSuggestions = [];\r\n    \r\n    // Check for common issues\r\n    if (originalText.includes('  ')) cleanupSuggestions.push('Remove extra spaces');\r\n    if (originalText.includes('\\n\\n\\n')) cleanupSuggestions.push('Reduce excessive line breaks');\r\n    if (originalText.match(/[.]{2,}/)) cleanupSuggestions.push('Fix multiple periods');\r\n    if (originalText.match(/[!]{2,}/)) cleanupSuggestions.push('Fix multiple exclamation marks');\r\n    if (originalText.match(/[?]{2,}/)) cleanupSuggestions.push('Fix multiple question marks');\r\n    \r\n    const content = `\r\n      <div class=\"ai-cleanup\">\r\n        <h4>üßπ Text Cleanup Analysis</h4>\r\n        \r\n        <div class=\"cleanup-section\">\r\n          <h5>üîç Issues Detected</h5>\r\n          ${cleanupSuggestions.length > 0 ? `\r\n            <ul>\r\n              ${cleanupSuggestions.map(suggestion => `<li>${suggestion}</li>`).join('')}\r\n            </ul>\r\n          ` : '<p>‚úÖ No major formatting issues detected!</p>'}\r\n        </div>\r\n        \r\n        <div class=\"cleanup-section\">\r\n          <h5>‚ú® Cleanup Recommendations</h5>\r\n          <ul>\r\n            <li>Remove trailing whitespace at line ends</li>\r\n            <li>Standardize line break usage</li>\r\n            <li>Fix inconsistent punctuation</li>\r\n            <li>Normalize quotation marks</li>\r\n            <li>Remove unnecessary special characters</li>\r\n          </ul>\r\n        </div>\r\n        \r\n        <div class=\"cleanup-section\">\r\n          <h5>üéØ Best Practices</h5>\r\n          <ul>\r\n            <li>Use single spaces between words</li>\r\n            <li>Use single line breaks between paragraphs</li>\r\n            <li>Be consistent with punctuation style</li>\r\n            <li>Remove empty lines at document start/end</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    `;\r\n    \r\n    return {\r\n      title: 'üßπ AI Text Cleanup',\r\n      content,\r\n      type: 'cleanup'\r\n    };\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}