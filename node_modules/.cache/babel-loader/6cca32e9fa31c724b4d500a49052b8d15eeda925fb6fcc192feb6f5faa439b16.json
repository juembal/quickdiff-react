{"ast":null,"code":"import _objectSpread from\"C:/Users/Joem/quickdiff-react/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useCallback,useRef}from'react';import'./App.css';import'./user-guide.css';import'./user-guide.js';import Header from'./components/Header';import SettingsPanel from'./components/SettingsPanel';import InputSection from'./components/InputSection';import Controls from'./components/Controls';import Legend from'./components/Legend';import Results from'./components/Results';import{DiffEngine}from'./utils/DiffEngine';import{ExportUtils}from'./utils/ExportUtils';import{AIEngine}from'./utils/AIEngine';import{LanguageDetector}from'./utils/LanguageDetector';import{NotificationProvider,useNotification}from'./components/NotificationProvider';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function QuickDiffApp(){// State management\nconst[originalText,setOriginalText]=useState('');const[changedText,setChangedText]=useState('');const[diffResult,setDiffResult]=useState(null);const[showResults,setShowResults]=useState(false);const[theme,setTheme]=useState('light');const[contrast,setContrast]=useState('normal');// Settings state\nconst[settings,setSettings]=useState({diffMode:'line',viewMode:'side-by-side',language:'plaintext',autoDetectLanguage:true,ignoreCase:false,ignoreWhitespace:false,ignorePunctuation:false,livePreview:false});// Language detection state\nconst[detectedLanguage,setDetectedLanguage]=useState({language:'plaintext',confidence:'low',method:'default'});// AI state\nconst[aiResults,setAiResults]=useState([]);const[showAiResults,setShowAiResults]=useState(false);// Navigation state\nconst[changes,setChanges]=useState([]);const[currentChangeIndex,setCurrentChangeIndex]=useState(-1);const[minimapVisible,setMinimapVisible]=useState(false);// Refs\nconst debounceTimer=useRef(null);const diffEngine=useRef(new DiffEngine());const exportUtils=useRef(new ExportUtils());const aiEngine=useRef(new AIEngine());const languageDetector=useRef(new LanguageDetector());const{showNotification}=useNotification();// Load settings and theme on mount\nuseEffect(()=>{loadSettings();loadTheme();},[]);// Initialize user guide\nuseEffect(()=>{const initUserGuide=()=>{if(window.QuickDiffUserGuide){if(!window.userGuideInitialized){new window.QuickDiffUserGuide();window.userGuideInitialized=true;}}else{// If the class isn't available yet, try again after a short delay\nsetTimeout(initUserGuide,100);}};// Small delay to ensure DOM is ready\nsetTimeout(initUserGuide,200);},[]);// Auto-save settings when they change\nuseEffect(()=>{saveSettings();},[settings,saveSettings]);// Auto-detect language when text changes\nuseEffect(()=>{if(settings.autoDetectLanguage&&(originalText.trim()||changedText.trim())){const combinedText=originalText+'\\n'+changedText;const detection=languageDetector.current.autoDetect(combinedText);setDetectedLanguage(detection);// Auto-update language setting for any detection that's not plaintext\nif(detection.language!=='plaintext'&&detection.language!==settings.language){setSettings(prev=>_objectSpread(_objectSpread({},prev),{},{language:detection.language}));}}else if(!settings.autoDetectLanguage){// Reset to default when auto-detect is disabled\nsetDetectedLanguage({language:'plaintext',confidence:'low',method:'default'});}},[originalText,changedText,settings.autoDetectLanguage,settings.language]);// Live preview with debouncing\nuseEffect(()=>{if(settings.livePreview&&(originalText.trim()||changedText.trim())){clearTimeout(debounceTimer.current);debounceTimer.current=setTimeout(()=>{performComparison();},500);}return()=>clearTimeout(debounceTimer.current);},[originalText,changedText,settings.livePreview,settings.diffMode,settings.ignoreCase,settings.ignoreWhitespace,settings.ignorePunctuation,performComparison]);// Settings management\nconst loadSettings=()=>{try{const savedSettings=localStorage.getItem('quickdiff_react_settings');if(savedSettings){setSettings(prev=>_objectSpread(_objectSpread({},prev),JSON.parse(savedSettings)));}}catch(error){console.error('Error loading settings:',error);}};const saveSettings=()=>{try{localStorage.setItem('quickdiff_react_settings',JSON.stringify(settings));}catch(error){console.error('Error saving settings:',error);}};const loadTheme=()=>{const savedTheme=localStorage.getItem('quickdiff_theme')||'light';const savedContrast=localStorage.getItem('quickdiff_contrast')||'normal';setTheme(savedTheme);setContrast(savedContrast);document.documentElement.setAttribute('data-theme',savedTheme);document.documentElement.setAttribute('data-contrast',savedContrast);};// Theme management\nconst toggleTheme=()=>{const newTheme=theme==='light'?'dark':'light';setTheme(newTheme);localStorage.setItem('quickdiff_theme',newTheme);document.documentElement.setAttribute('data-theme',newTheme);showNotification(\"Switched to \".concat(newTheme,\" theme\"));};const toggleContrast=()=>{const newContrast=contrast==='normal'?'high':'normal';setContrast(newContrast);localStorage.setItem('quickdiff_contrast',newContrast);document.documentElement.setAttribute('data-contrast',newContrast);showNotification(\"\".concat(newContrast==='high'?'Enabled':'Disabled',\" high contrast mode\"));};// Main comparison function\nconst performComparison=useCallback(()=>{if(!originalText.trim()&&!changedText.trim()){showNotification('Please enter some text to compare');return;}try{const result=diffEngine.current.performComparison(originalText,changedText,settings);console.log('Diff Result:',result);// Debug log\nsetDiffResult(result);setShowResults(true);collectChanges(result);// Auto-scroll to results only if live preview is disabled\nif(!settings.livePreview){setTimeout(()=>{const resultsElement=document.getElementById('results-section');if(resultsElement){resultsElement.scrollIntoView({behavior:'smooth',block:'start'});}},100);}showNotification('Comparison completed');}catch(error){console.error('Comparison error:',error);showNotification('Error performing comparison');}},[originalText,changedText,settings,showNotification,collectChanges]);// Collect changes for navigation\nconst collectChanges=result=>{if(!result)return;const newChanges=[];// Extract changes from originalLines (DiffEngine returns originalLines and changedLines)\nif(result.originalLines){result.originalLines.forEach((line,index)=>{if(line.type&&line.type!=='unchanged'&&line.type!==''){newChanges.push({lineNumber:index+1,type:line.type,content:line.content||'',originalLineNumber:index+1,changedLineNumber:index+1});}});}// Also check changedLines for additional changes (like added lines)\nif(result.changedLines){result.changedLines.forEach((line,index)=>{if(line.type&&line.type!=='unchanged'&&line.type!==''){// Avoid duplicates by checking if we already have this change\nconst exists=newChanges.some(change=>change.lineNumber===index+1&&change.type===line.type);if(!exists){newChanges.push({lineNumber:index+1,type:line.type,content:line.content||'',originalLineNumber:index+1,changedLineNumber:index+1});}}});}// Sort changes by line number\nnewChanges.sort((a,b)=>a.lineNumber-b.lineNumber);console.log('Collected Changes:',newChanges);// Debug log\nsetChanges(newChanges);setCurrentChangeIndex(newChanges.length>0?0:-1);if(newChanges.length>0){showNotification(\"Found \".concat(newChanges.length,\" changes\"));}else{showNotification('No changes detected');}};// Text manipulation functions\nconst clearAll=()=>{setOriginalText('');setChangedText('');setShowResults(false);setDiffResult(null);setAiResults([]);setShowAiResults(false);showNotification('All content cleared');};const swapTexts=()=>{const temp=originalText;setOriginalText(changedText);setChangedText(temp);showNotification('Texts swapped');if(settings.livePreview&&(originalText.trim()||changedText.trim())){performComparison();}};// File handling\nconst handleFileLoad=(file,target)=>{const reader=new FileReader();reader.onload=e=>{const content=e.target.result;if(target==='original'){setOriginalText(content);}else{setChangedText(content);}// Auto-detect language from filename if enabled\nif(settings.autoDetectLanguage){const detection=languageDetector.current.autoDetect(content,file.name);setDetectedLanguage(detection);if(detection.language!=='plaintext'){setSettings(prev=>_objectSpread(_objectSpread({},prev),{},{language:detection.language}));}showNotification(\"File loaded: \".concat(file.name));}else{showNotification(\"File loaded: \".concat(file.name));}};reader.readAsText(file);};// Export functions\nconst copyResults=()=>{exportUtils.current.copyResults(originalText,changedText,aiResults).then(()=>showNotification('Results copied to clipboard')).catch(()=>showNotification('Failed to copy results'));};const exportToTxt=()=>{exportUtils.current.exportToTxt(originalText,changedText,diffResult,aiResults);showNotification('Exported as TXT file');};const exportToHtml=()=>{exportUtils.current.exportToHtml(originalText,changedText,diffResult,aiResults);showNotification('Exported as HTML file');};const exportToMarkdown=()=>{exportUtils.current.exportToMarkdown(originalText,changedText,diffResult,aiResults);showNotification('Exported as Markdown file');};const exportToPdf=()=>{exportUtils.current.exportToPdf(originalText,changedText,diffResult,aiResults);showNotification('Exported as PDF file');};// AI functions\nconst generateAIAnalysis=type=>{if(!originalText.trim()&&!changedText.trim()){showNotification('Please enter some text to analyze');return;}const analysis=aiEngine.current.generateAnalysis(type,originalText,changedText);setAiResults(prev=>[...prev,analysis]);setShowAiResults(true);showNotification('AI analysis completed');};const clearAIResults=()=>{setAiResults([]);setShowAiResults(false);showNotification('AI results cleared');};const removeAICard=index=>{setAiResults(prev=>prev.filter((_,i)=>i!==index));showNotification('AI analysis removed');// Hide AI results section if no cards left\nif(aiResults.length<=1){setShowAiResults(false);}};// Navigation functions\nconst navigateToPreviousChange=()=>{console.log('Navigate Previous - Changes:',changes.length,'Current Index:',currentChangeIndex);// Debug log\nif(changes.length===0){showNotification('No changes to navigate');return;}const newIndex=currentChangeIndex>0?currentChangeIndex-1:changes.length-1;setCurrentChangeIndex(newIndex);scrollToChange(newIndex);};const navigateToNextChange=()=>{console.log('Navigate Next - Changes:',changes.length,'Current Index:',currentChangeIndex);// Debug log\nif(changes.length===0){showNotification('No changes to navigate');return;}const newIndex=currentChangeIndex<changes.length-1?currentChangeIndex+1:0;setCurrentChangeIndex(newIndex);scrollToChange(newIndex);};const scrollToChange=index=>{if(index<0||index>=changes.length)return;const change=changes[index];// Try multiple selectors to find the line\nlet lineElement=document.querySelector(\"[data-line-number=\\\"\".concat(change.lineNumber,\"\\\"][data-line-type=\\\"\").concat(change.type,\"\\\"]\"));if(!lineElement){lineElement=document.querySelector(\"[data-original-line=\\\"\".concat(change.lineNumber,\"\\\"]\"));}if(!lineElement){lineElement=document.querySelector(\"[data-line-number=\\\"\".concat(change.lineNumber,\"\\\"]\"));}if(lineElement){// Remove previous highlights\ndocument.querySelectorAll('.current-change').forEach(el=>{el.classList.remove('current-change');});lineElement.scrollIntoView({behavior:'smooth',block:'center'});// Highlight the current change temporarily\nlineElement.classList.add('current-change');setTimeout(()=>{lineElement.classList.remove('current-change');},3000);showNotification(\"Navigated to change \".concat(index+1,\" of \").concat(changes.length,\": \").concat(change.type));}else{showNotification(\"Could not find change \".concat(index+1,\" (line \").concat(change.lineNumber,\")\"));}};const toggleMinimap=()=>{setMinimapVisible(!minimapVisible);showNotification(minimapVisible?'Minimap hidden':'Minimap shown');};// Keyboard shortcuts\nuseEffect(()=>{const handleKeyDown=e=>{// Don't trigger shortcuts when typing in text areas or input fields\nif(e.target.tagName==='TEXTAREA'||e.target.tagName==='INPUT'){return;}if(e.ctrlKey||e.metaKey){switch(e.key.toLowerCase()){case'enter':e.preventDefault();performComparison();showNotification('⌨️ Ctrl+Enter: Comparison started');break;case'k':e.preventDefault();clearAll();showNotification('⌨️ Ctrl+K: All content cleared');break;case's':e.preventDefault();swapTexts();showNotification('⌨️ Ctrl+S: Texts swapped');break;case'c':if(showResults){e.preventDefault();copyResults();showNotification('⌨️ Ctrl+C: Results copied');}break;case'd':e.preventDefault();toggleTheme();showNotification('⌨️ Ctrl+D: Theme toggled');break;case'h':e.preventDefault();toggleContrast();showNotification('⌨️ Ctrl+H: Contrast toggled');break;case'm':e.preventDefault();toggleMinimap();showNotification('⌨️ Ctrl+M: Minimap toggled');break;default:break;}}// Handle other shortcuts\nswitch(e.key){case'Escape':if(showAiResults){clearAIResults();showNotification('⌨️ Escape: AI results cleared');}break;case'ArrowUp':if(e.ctrlKey){e.preventDefault();navigateToPreviousChange();}break;case'ArrowDown':if(e.ctrlKey){e.preventDefault();navigateToNextChange();}break;default:break;}};document.addEventListener('keydown',handleKeyDown);return()=>document.removeEventListener('keydown',handleKeyDown);},[showResults,showAiResults,performComparison,clearAll,swapTexts,copyResults,toggleTheme,toggleContrast,toggleMinimap,clearAIResults,navigateToPreviousChange,navigateToNextChange,showNotification]);return/*#__PURE__*/_jsx(\"div\",{className:\"quickdiff-app\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(Header,{onThemeToggle:toggleTheme,onContrastToggle:toggleContrast}),/*#__PURE__*/_jsx(SettingsPanel,{settings:settings,onSettingsChange:setSettings,detectedLanguage:detectedLanguage}),/*#__PURE__*/_jsx(InputSection,{originalText:originalText,changedText:changedText,onOriginalTextChange:setOriginalText,onChangedTextChange:setChangedText,onFileLoad:handleFileLoad}),/*#__PURE__*/_jsx(Controls,{onCompare:performComparison,onClear:clearAll,onSwap:swapTexts,onCopy:copyResults,onExportTxt:exportToTxt,onExportHtml:exportToHtml,onExportMd:exportToMarkdown,onExportPdf:exportToPdf,onAIAnalysis:generateAIAnalysis,hasResults:showResults}),/*#__PURE__*/_jsx(Legend,{}),showResults&&/*#__PURE__*/_jsx(Results,{diffResult:diffResult,settings:settings,changes:changes,currentChangeIndex:currentChangeIndex,minimapVisible:minimapVisible,onNavigatePrevious:navigateToPreviousChange,onNavigateNext:navigateToNextChange,onToggleMinimap:toggleMinimap,onNavigateToChange:index=>{setCurrentChangeIndex(index);scrollToChange(index);},aiResults:aiResults,showAiResults:showAiResults,onClearAIResults:clearAIResults,onRemoveAICard:removeAICard})]})});}function App(){return/*#__PURE__*/_jsx(NotificationProvider,{children:/*#__PURE__*/_jsx(QuickDiffApp,{})});}export default App;","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","Header","SettingsPanel","InputSection","Controls","Legend","Results","DiffEngine","ExportUtils","AIEngine","LanguageDetector","NotificationProvider","useNotification","jsx","_jsx","jsxs","_jsxs","QuickDiffApp","originalText","setOriginalText","changedText","setChangedText","diffResult","setDiffResult","showResults","setShowResults","theme","setTheme","contrast","setContrast","settings","setSettings","diffMode","viewMode","language","autoDetectLanguage","ignoreCase","ignoreWhitespace","ignorePunctuation","livePreview","detectedLanguage","setDetectedLanguage","confidence","method","aiResults","setAiResults","showAiResults","setShowAiResults","changes","setChanges","currentChangeIndex","setCurrentChangeIndex","minimapVisible","setMinimapVisible","debounceTimer","diffEngine","exportUtils","aiEngine","languageDetector","showNotification","loadSettings","loadTheme","initUserGuide","window","QuickDiffUserGuide","userGuideInitialized","setTimeout","saveSettings","trim","combinedText","detection","current","autoDetect","prev","_objectSpread","clearTimeout","performComparison","savedSettings","localStorage","getItem","JSON","parse","error","console","setItem","stringify","savedTheme","savedContrast","document","documentElement","setAttribute","toggleTheme","newTheme","concat","toggleContrast","newContrast","result","log","collectChanges","resultsElement","getElementById","scrollIntoView","behavior","block","newChanges","originalLines","forEach","line","index","type","push","lineNumber","content","originalLineNumber","changedLineNumber","changedLines","exists","some","change","sort","a","b","length","clearAll","swapTexts","temp","handleFileLoad","file","target","reader","FileReader","onload","e","name","readAsText","copyResults","then","catch","exportToTxt","exportToHtml","exportToMarkdown","exportToPdf","generateAIAnalysis","analysis","generateAnalysis","clearAIResults","removeAICard","filter","_","i","navigateToPreviousChange","newIndex","scrollToChange","navigateToNextChange","lineElement","querySelector","querySelectorAll","el","classList","remove","add","toggleMinimap","handleKeyDown","tagName","ctrlKey","metaKey","key","toLowerCase","preventDefault","addEventListener","removeEventListener","className","children","onThemeToggle","onContrastToggle","onSettingsChange","onOriginalTextChange","onChangedTextChange","onFileLoad","onCompare","onClear","onSwap","onCopy","onExportTxt","onExportHtml","onExportMd","onExportPdf","onAIAnalysis","hasResults","onNavigatePrevious","onNavigateNext","onToggleMinimap","onNavigateToChange","onClearAIResults","onRemoveAICard","App"],"sources":["C:/Users/Joem/quickdiff-react/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport './App.css';\r\nimport './user-guide.css';\r\nimport './user-guide.js';\r\nimport Header from './components/Header';\r\nimport SettingsPanel from './components/SettingsPanel';\r\nimport InputSection from './components/InputSection';\r\nimport Controls from './components/Controls';\r\nimport Legend from './components/Legend';\r\nimport Results from './components/Results';\r\nimport { DiffEngine } from './utils/DiffEngine';\r\nimport { ExportUtils } from './utils/ExportUtils';\r\nimport { AIEngine } from './utils/AIEngine';\r\nimport { LanguageDetector } from './utils/LanguageDetector';\r\nimport { NotificationProvider, useNotification } from './components/NotificationProvider';\r\n\r\nfunction QuickDiffApp() {\r\n  // State management\r\n  const [originalText, setOriginalText] = useState('');\r\n  const [changedText, setChangedText] = useState('');\r\n  const [diffResult, setDiffResult] = useState(null);\r\n  const [showResults, setShowResults] = useState(false);\r\n  const [theme, setTheme] = useState('light');\r\n  const [contrast, setContrast] = useState('normal');\r\n  \r\n  // Settings state\r\n  const [settings, setSettings] = useState({\r\n    diffMode: 'line',\r\n    viewMode: 'side-by-side',\r\n    language: 'plaintext',\r\n    autoDetectLanguage: true,\r\n    ignoreCase: false,\r\n    ignoreWhitespace: false,\r\n    ignorePunctuation: false,\r\n    livePreview: false\r\n  });\r\n\r\n  // Language detection state\r\n  const [detectedLanguage, setDetectedLanguage] = useState({\r\n    language: 'plaintext',\r\n    confidence: 'low',\r\n    method: 'default'\r\n  });\r\n\r\n  // AI state\r\n  const [aiResults, setAiResults] = useState([]);\r\n  const [showAiResults, setShowAiResults] = useState(false);\r\n\r\n  // Navigation state\r\n  const [changes, setChanges] = useState([]);\r\n  const [currentChangeIndex, setCurrentChangeIndex] = useState(-1);\r\n  const [minimapVisible, setMinimapVisible] = useState(false);\r\n\r\n  // Refs\r\n  const debounceTimer = useRef(null);\r\n  const diffEngine = useRef(new DiffEngine());\r\n  const exportUtils = useRef(new ExportUtils());\r\n  const aiEngine = useRef(new AIEngine());\r\n  const languageDetector = useRef(new LanguageDetector());\r\n  \r\n  const { showNotification } = useNotification();\r\n\r\n  // Load settings and theme on mount\r\n  useEffect(() => {\r\n    loadSettings();\r\n    loadTheme();\r\n  }, []);\r\n\r\n  // Initialize user guide\r\n  useEffect(() => {\r\n    const initUserGuide = () => {\r\n      if (window.QuickDiffUserGuide) {\r\n        if (!window.userGuideInitialized) {\r\n          new window.QuickDiffUserGuide();\r\n          window.userGuideInitialized = true;\r\n        }\r\n      } else {\r\n        // If the class isn't available yet, try again after a short delay\r\n        setTimeout(initUserGuide, 100);\r\n      }\r\n    };\r\n    \r\n    // Small delay to ensure DOM is ready\r\n    setTimeout(initUserGuide, 200);\r\n  }, []);\r\n\r\n  // Auto-save settings when they change\r\n  useEffect(() => {\r\n    saveSettings();\r\n  }, [settings, saveSettings]);\r\n\r\n  // Auto-detect language when text changes\r\n  useEffect(() => {\r\n    if (settings.autoDetectLanguage && (originalText.trim() || changedText.trim())) {\r\n      const combinedText = originalText + '\\n' + changedText;\r\n      const detection = languageDetector.current.autoDetect(combinedText);\r\n      \r\n      setDetectedLanguage(detection);\r\n      \r\n      // Auto-update language setting for any detection that's not plaintext\r\n      if (detection.language !== 'plaintext' && detection.language !== settings.language) {\r\n        setSettings(prev => ({\r\n          ...prev,\r\n          language: detection.language\r\n        }));\r\n      }\r\n    } else if (!settings.autoDetectLanguage) {\r\n      // Reset to default when auto-detect is disabled\r\n      setDetectedLanguage({\r\n        language: 'plaintext',\r\n        confidence: 'low',\r\n        method: 'default'\r\n      });\r\n    }\r\n  }, [originalText, changedText, settings.autoDetectLanguage, settings.language]);\r\n\r\n  // Live preview with debouncing\r\n  useEffect(() => {\r\n    if (settings.livePreview && (originalText.trim() || changedText.trim())) {\r\n      clearTimeout(debounceTimer.current);\r\n      debounceTimer.current = setTimeout(() => {\r\n        performComparison();\r\n      }, 500);\r\n    }\r\n    \r\n    return () => clearTimeout(debounceTimer.current);\r\n  }, [originalText, changedText, settings.livePreview, settings.diffMode, settings.ignoreCase, settings.ignoreWhitespace, settings.ignorePunctuation, performComparison]);\r\n\r\n  // Settings management\r\n  const loadSettings = () => {\r\n    try {\r\n      const savedSettings = localStorage.getItem('quickdiff_react_settings');\r\n      if (savedSettings) {\r\n        setSettings(prev => ({ ...prev, ...JSON.parse(savedSettings) }));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading settings:', error);\r\n    }\r\n  };\r\n\r\n  const saveSettings = () => {\r\n    try {\r\n      localStorage.setItem('quickdiff_react_settings', JSON.stringify(settings));\r\n    } catch (error) {\r\n      console.error('Error saving settings:', error);\r\n    }\r\n  };\r\n\r\n  const loadTheme = () => {\r\n    const savedTheme = localStorage.getItem('quickdiff_theme') || 'light';\r\n    const savedContrast = localStorage.getItem('quickdiff_contrast') || 'normal';\r\n    setTheme(savedTheme);\r\n    setContrast(savedContrast);\r\n    document.documentElement.setAttribute('data-theme', savedTheme);\r\n    document.documentElement.setAttribute('data-contrast', savedContrast);\r\n  };\r\n\r\n  // Theme management\r\n  const toggleTheme = () => {\r\n    const newTheme = theme === 'light' ? 'dark' : 'light';\r\n    setTheme(newTheme);\r\n    localStorage.setItem('quickdiff_theme', newTheme);\r\n    document.documentElement.setAttribute('data-theme', newTheme);\r\n    showNotification(`Switched to ${newTheme} theme`);\r\n  };\r\n\r\n  const toggleContrast = () => {\r\n    const newContrast = contrast === 'normal' ? 'high' : 'normal';\r\n    setContrast(newContrast);\r\n    localStorage.setItem('quickdiff_contrast', newContrast);\r\n    document.documentElement.setAttribute('data-contrast', newContrast);\r\n    showNotification(`${newContrast === 'high' ? 'Enabled' : 'Disabled'} high contrast mode`);\r\n  };\r\n\r\n  // Main comparison function\r\n  const performComparison = useCallback(() => {\r\n    if (!originalText.trim() && !changedText.trim()) {\r\n      showNotification('Please enter some text to compare');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const result = diffEngine.current.performComparison(\r\n        originalText,\r\n        changedText,\r\n        settings\r\n      );\r\n\r\n      console.log('Diff Result:', result); // Debug log\r\n      setDiffResult(result);\r\n      setShowResults(true);\r\n      collectChanges(result);\r\n      \r\n      // Auto-scroll to results only if live preview is disabled\r\n      if (!settings.livePreview) {\r\n        setTimeout(() => {\r\n          const resultsElement = document.getElementById('results-section');\r\n          if (resultsElement) {\r\n            resultsElement.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n          }\r\n        }, 100);\r\n      }\r\n\r\n      showNotification('Comparison completed');\r\n    } catch (error) {\r\n      console.error('Comparison error:', error);\r\n      showNotification('Error performing comparison');\r\n    }\r\n  }, [originalText, changedText, settings, showNotification, collectChanges]);\r\n\r\n  // Collect changes for navigation\r\n  const collectChanges = (result) => {\r\n    if (!result) return;\r\n    \r\n    const newChanges = [];\r\n    \r\n    // Extract changes from originalLines (DiffEngine returns originalLines and changedLines)\r\n    if (result.originalLines) {\r\n      result.originalLines.forEach((line, index) => {\r\n        if (line.type && line.type !== 'unchanged' && line.type !== '') {\r\n          newChanges.push({\r\n            lineNumber: index + 1,\r\n            type: line.type,\r\n            content: line.content || '',\r\n            originalLineNumber: index + 1,\r\n            changedLineNumber: index + 1\r\n          });\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Also check changedLines for additional changes (like added lines)\r\n    if (result.changedLines) {\r\n      result.changedLines.forEach((line, index) => {\r\n        if (line.type && line.type !== 'unchanged' && line.type !== '') {\r\n          // Avoid duplicates by checking if we already have this change\r\n          const exists = newChanges.some(change => \r\n            change.lineNumber === index + 1 && change.type === line.type\r\n          );\r\n          if (!exists) {\r\n            newChanges.push({\r\n              lineNumber: index + 1,\r\n              type: line.type,\r\n              content: line.content || '',\r\n              originalLineNumber: index + 1,\r\n              changedLineNumber: index + 1\r\n            });\r\n          }\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Sort changes by line number\r\n    newChanges.sort((a, b) => a.lineNumber - b.lineNumber);\r\n    \r\n    console.log('Collected Changes:', newChanges); // Debug log\r\n    setChanges(newChanges);\r\n    setCurrentChangeIndex(newChanges.length > 0 ? 0 : -1);\r\n    \r\n    if (newChanges.length > 0) {\r\n      showNotification(`Found ${newChanges.length} changes`);\r\n    } else {\r\n      showNotification('No changes detected');\r\n    }\r\n  };\r\n\r\n  // Text manipulation functions\r\n  const clearAll = () => {\r\n    setOriginalText('');\r\n    setChangedText('');\r\n    setShowResults(false);\r\n    setDiffResult(null);\r\n    setAiResults([]);\r\n    setShowAiResults(false);\r\n    showNotification('All content cleared');\r\n  };\r\n\r\n  const swapTexts = () => {\r\n    const temp = originalText;\r\n    setOriginalText(changedText);\r\n    setChangedText(temp);\r\n    showNotification('Texts swapped');\r\n    \r\n    if (settings.livePreview && (originalText.trim() || changedText.trim())) {\r\n      performComparison();\r\n    }\r\n  };\r\n\r\n  // File handling\r\n  const handleFileLoad = (file, target) => {\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      const content = e.target.result;\r\n      if (target === 'original') {\r\n        setOriginalText(content);\r\n      } else {\r\n        setChangedText(content);\r\n      }\r\n      \r\n      // Auto-detect language from filename if enabled\r\n      if (settings.autoDetectLanguage) {\r\n        const detection = languageDetector.current.autoDetect(content, file.name);\r\n        setDetectedLanguage(detection);\r\n        \r\n        if (detection.language !== 'plaintext') {\r\n          setSettings(prev => ({\r\n            ...prev,\r\n            language: detection.language\r\n          }));\r\n        }\r\n        showNotification(`File loaded: ${file.name}`);\r\n      } else {\r\n        showNotification(`File loaded: ${file.name}`);\r\n      }\r\n    };\r\n    reader.readAsText(file);\r\n  };\r\n\r\n  // Export functions\r\n  const copyResults = () => {\r\n    exportUtils.current.copyResults(originalText, changedText, aiResults)\r\n      .then(() => showNotification('Results copied to clipboard'))\r\n      .catch(() => showNotification('Failed to copy results'));\r\n  };\r\n\r\n  const exportToTxt = () => {\r\n    exportUtils.current.exportToTxt(originalText, changedText, diffResult, aiResults);\r\n    showNotification('Exported as TXT file');\r\n  };\r\n\r\n  const exportToHtml = () => {\r\n    exportUtils.current.exportToHtml(originalText, changedText, diffResult, aiResults);\r\n    showNotification('Exported as HTML file');\r\n  };\r\n\r\n  const exportToMarkdown = () => {\r\n    exportUtils.current.exportToMarkdown(originalText, changedText, diffResult, aiResults);\r\n    showNotification('Exported as Markdown file');\r\n  };\r\n\r\n  const exportToPdf = () => {\r\n    exportUtils.current.exportToPdf(originalText, changedText, diffResult, aiResults);\r\n    showNotification('Exported as PDF file');\r\n  };\r\n\r\n  // AI functions\r\n  const generateAIAnalysis = (type) => {\r\n    if (!originalText.trim() && !changedText.trim()) {\r\n      showNotification('Please enter some text to analyze');\r\n      return;\r\n    }\r\n\r\n    const analysis = aiEngine.current.generateAnalysis(type, originalText, changedText);\r\n    setAiResults(prev => [...prev, analysis]);\r\n    setShowAiResults(true);\r\n    showNotification('AI analysis completed');\r\n  };\r\n\r\n  const clearAIResults = () => {\r\n    setAiResults([]);\r\n    setShowAiResults(false);\r\n    showNotification('AI results cleared');\r\n  };\r\n\r\n  const removeAICard = (index) => {\r\n    setAiResults(prev => prev.filter((_, i) => i !== index));\r\n    showNotification('AI analysis removed');\r\n    \r\n    // Hide AI results section if no cards left\r\n    if (aiResults.length <= 1) {\r\n      setShowAiResults(false);\r\n    }\r\n  };\r\n\r\n  // Navigation functions\r\n  const navigateToPreviousChange = () => {\r\n    console.log('Navigate Previous - Changes:', changes.length, 'Current Index:', currentChangeIndex); // Debug log\r\n    if (changes.length === 0) {\r\n      showNotification('No changes to navigate');\r\n      return;\r\n    }\r\n    \r\n    const newIndex = currentChangeIndex > 0 ? currentChangeIndex - 1 : changes.length - 1;\r\n    setCurrentChangeIndex(newIndex);\r\n    scrollToChange(newIndex);\r\n  };\r\n\r\n  const navigateToNextChange = () => {\r\n    console.log('Navigate Next - Changes:', changes.length, 'Current Index:', currentChangeIndex); // Debug log\r\n    if (changes.length === 0) {\r\n      showNotification('No changes to navigate');\r\n      return;\r\n    }\r\n    \r\n    const newIndex = currentChangeIndex < changes.length - 1 ? currentChangeIndex + 1 : 0;\r\n    setCurrentChangeIndex(newIndex);\r\n    scrollToChange(newIndex);\r\n  };\r\n\r\n  const scrollToChange = (index) => {\r\n    if (index < 0 || index >= changes.length) return;\r\n    \r\n    const change = changes[index];\r\n    \r\n    // Try multiple selectors to find the line\r\n    let lineElement = document.querySelector(`[data-line-number=\"${change.lineNumber}\"][data-line-type=\"${change.type}\"]`);\r\n    \r\n    if (!lineElement) {\r\n      lineElement = document.querySelector(`[data-original-line=\"${change.lineNumber}\"]`);\r\n    }\r\n    \r\n    if (!lineElement) {\r\n      lineElement = document.querySelector(`[data-line-number=\"${change.lineNumber}\"]`);\r\n    }\r\n    \r\n    if (lineElement) {\r\n      // Remove previous highlights\r\n      document.querySelectorAll('.current-change').forEach(el => {\r\n        el.classList.remove('current-change');\r\n      });\r\n      \r\n      lineElement.scrollIntoView({ \r\n        behavior: 'smooth', \r\n        block: 'center' \r\n      });\r\n      \r\n      // Highlight the current change temporarily\r\n      lineElement.classList.add('current-change');\r\n      setTimeout(() => {\r\n        lineElement.classList.remove('current-change');\r\n      }, 3000);\r\n      \r\n      showNotification(`Navigated to change ${index + 1} of ${changes.length}: ${change.type}`);\r\n    } else {\r\n      showNotification(`Could not find change ${index + 1} (line ${change.lineNumber})`);\r\n    }\r\n  };\r\n\r\n  const toggleMinimap = () => {\r\n    setMinimapVisible(!minimapVisible);\r\n    showNotification(minimapVisible ? 'Minimap hidden' : 'Minimap shown');\r\n  };\r\n\r\n  // Keyboard shortcuts\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      // Don't trigger shortcuts when typing in text areas or input fields\r\n      if (e.target.tagName === 'TEXTAREA' || e.target.tagName === 'INPUT') {\r\n        return;\r\n      }\r\n      \r\n      if (e.ctrlKey || e.metaKey) {\r\n        switch (e.key.toLowerCase()) {\r\n          case 'enter':\r\n            e.preventDefault();\r\n            performComparison();\r\n            showNotification('⌨️ Ctrl+Enter: Comparison started');\r\n            break;\r\n          case 'k':\r\n            e.preventDefault();\r\n            clearAll();\r\n            showNotification('⌨️ Ctrl+K: All content cleared');\r\n            break;\r\n          case 's':\r\n            e.preventDefault();\r\n            swapTexts();\r\n            showNotification('⌨️ Ctrl+S: Texts swapped');\r\n            break;\r\n          case 'c':\r\n            if (showResults) {\r\n              e.preventDefault();\r\n              copyResults();\r\n              showNotification('⌨️ Ctrl+C: Results copied');\r\n            }\r\n            break;\r\n          case 'd':\r\n            e.preventDefault();\r\n            toggleTheme();\r\n            showNotification('⌨️ Ctrl+D: Theme toggled');\r\n            break;\r\n          case 'h':\r\n            e.preventDefault();\r\n            toggleContrast();\r\n            showNotification('⌨️ Ctrl+H: Contrast toggled');\r\n            break;\r\n          case 'm':\r\n            e.preventDefault();\r\n            toggleMinimap();\r\n            showNotification('⌨️ Ctrl+M: Minimap toggled');\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n      \r\n      // Handle other shortcuts\r\n      switch (e.key) {\r\n        case 'Escape':\r\n          if (showAiResults) {\r\n            clearAIResults();\r\n            showNotification('⌨️ Escape: AI results cleared');\r\n          }\r\n          break;\r\n        case 'ArrowUp':\r\n          if (e.ctrlKey) {\r\n            e.preventDefault();\r\n            navigateToPreviousChange();\r\n          }\r\n          break;\r\n        case 'ArrowDown':\r\n          if (e.ctrlKey) {\r\n            e.preventDefault();\r\n            navigateToNextChange();\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', handleKeyDown);\r\n    return () => document.removeEventListener('keydown', handleKeyDown);\r\n  }, [showResults, showAiResults, performComparison, clearAll, swapTexts, copyResults, toggleTheme, toggleContrast, toggleMinimap, clearAIResults, navigateToPreviousChange, navigateToNextChange, showNotification]);\r\n\r\n  return (\r\n    <div className=\"quickdiff-app\">\r\n      <div className=\"container\">\r\n        <Header \r\n          onThemeToggle={toggleTheme}\r\n          onContrastToggle={toggleContrast}\r\n        />\r\n        \r\n        <SettingsPanel \r\n          settings={settings}\r\n          onSettingsChange={setSettings}\r\n          detectedLanguage={detectedLanguage}\r\n        />\r\n        \r\n        <InputSection\r\n          originalText={originalText}\r\n          changedText={changedText}\r\n          onOriginalTextChange={setOriginalText}\r\n          onChangedTextChange={setChangedText}\r\n          onFileLoad={handleFileLoad}\r\n        />\r\n        \r\n        <Controls\r\n          onCompare={performComparison}\r\n          onClear={clearAll}\r\n          onSwap={swapTexts}\r\n          onCopy={copyResults}\r\n          onExportTxt={exportToTxt}\r\n          onExportHtml={exportToHtml}\r\n          onExportMd={exportToMarkdown}\r\n          onExportPdf={exportToPdf}\r\n          onAIAnalysis={generateAIAnalysis}\r\n          hasResults={showResults}\r\n        />\r\n        \r\n        <Legend />\r\n        \r\n        {showResults && (\r\n          <Results\r\n            diffResult={diffResult}\r\n            settings={settings}\r\n            changes={changes}\r\n            currentChangeIndex={currentChangeIndex}\r\n            minimapVisible={minimapVisible}\r\n            onNavigatePrevious={navigateToPreviousChange}\r\n            onNavigateNext={navigateToNextChange}\r\n            onToggleMinimap={toggleMinimap}\r\n            onNavigateToChange={(index) => {\r\n              setCurrentChangeIndex(index);\r\n              scrollToChange(index);\r\n            }}\r\n            aiResults={aiResults}\r\n            showAiResults={showAiResults}\r\n            onClearAIResults={clearAIResults}\r\n            onRemoveAICard={removeAICard}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <NotificationProvider>\r\n      <QuickDiffApp />\r\n    </NotificationProvider>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}