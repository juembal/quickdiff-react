{"ast":null,"code":"import _objectSpread from\"C:/Users/Joem/quickdiff-react/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\r\n * Groq API Service for QuickDiff React App\r\n * Fast, reliable, and free AI API for text analysis\r\n * Get your free API key at: https://console.groq.com/\r\n */export class GroqService{constructor(){this.config={apiKey:process.env.REACT_APP_GROQ_API_KEY||'',// Groq API key from environment\nbaseUrl:'https://api.groq.com/openai/v1/chat/completions',model:'llama-3.1-8b-instant',// Fast and reliable model\nmaxTokens:1000,temperature:0.7};this.loadConfig();}loadConfig(){try{const savedConfig=localStorage.getItem('quickdiff_groq_config');if(savedConfig){const parsedConfig=JSON.parse(savedConfig);delete parsedConfig.apiKey;// Don't override API key from environment\nthis.config=_objectSpread(_objectSpread({},this.config),parsedConfig);}// Ensure environment variable always takes precedence\nconst envApiKey=process.env.REACT_APP_GROQ_API_KEY;if(envApiKey){this.config.apiKey=envApiKey;}}catch(error){console.error('Error loading Groq config:',error);}}// Check if Groq is properly configured\nisConfigured(){const hasKey=this.config.apiKey&&this.config.apiKey.trim().length>0;const isValidKey=this.config.apiKey&&this.config.apiKey.startsWith('gsk_');const configured=hasKey&&isValidKey;console.log('🔍 Groq isConfigured check:',{envVar:process.env.REACT_APP_GROQ_API_KEY?'Found':'Not found',hasApiKey:!!this.config.apiKey,apiKeyLength:this.config.apiKey?this.config.apiKey.length:0,apiKeyPreview:this.config.apiKey?\"\".concat(this.config.apiKey.substring(0,10),\"...\"):'none',startsWithGsk:isValidKey,configured:configured});return configured;}// Call Groq API\nasync callGroqAPI(messages){console.log('🌐 Making Groq API call...');console.log('🔑 Using API key:',this.config.apiKey?\"\".concat(this.config.apiKey.substring(0,10),\"...\"):'NONE');const response=await fetch(this.config.baseUrl,{method:'POST',headers:{'Authorization':\"Bearer \".concat(this.config.apiKey),'Content-Type':'application/json'},body:JSON.stringify({model:this.config.model,messages:messages,max_tokens:this.config.maxTokens,temperature:this.config.temperature})});console.log('📥 Response status:',response.status);if(!response.ok){const error=await response.text();console.error('❌ Groq API Error Response:',error);throw new Error(\"Groq API error: \".concat(response.status,\" - \").concat(error));}const result=await response.json();console.log('✅ Groq API Success');return result.choices[0].message.content;}// Generate analysis using Groq\nasync generateAnalysis(type,originalText,changedText){console.log('🚀 generateAnalysis called with type:',type);console.log('🔧 isConfigured():',this.isConfigured());if(!this.isConfigured()){console.log('❌ Groq API not configured, throwing error');throw new Error('Groq API not configured. Please set up your API token.');}console.log('✅ Groq API configured, proceeding with analysis...');try{let analysis;switch(type){case'explain':analysis=await this.generateExplanation(originalText,changedText);break;case'rewrite':analysis=await this.generateRewriteSuggestions(originalText,changedText);break;case'summary':analysis=await this.generateSummary(originalText,changedText);break;case'tone':analysis=await this.generateToneAnalysis(originalText,changedText);break;case'cleanup':analysis=await this.generateCleanupAnalysis(originalText,changedText);break;default:analysis=await this.generateExplanation(originalText,changedText);}console.log('✅ Analysis generated successfully');return this.formatResponse(type,analysis);}catch(error){console.error('❌ Groq API Error:',error);throw new Error(\"Failed to generate \".concat(type,\" analysis: \").concat(error.message));}}// Generate explanation analysis\nasync generateExplanation(originalText,changedText){console.log('📝 Generating explanation with Groq...');const stats=this.calculateTextStats(originalText,changedText);const messages=[{role:\"system\",content:\"You are an expert text analyst. Analyze the differences between two texts and provide clear, insightful explanations.\"},{role:\"user\",content:\"Compare these two texts and explain the key differences:\\n\\nOriginal Text: \\\"\".concat(originalText.substring(0,300)).concat(originalText.length>300?'...':'',\"\\\"\\n\\nChanged Text: \\\"\").concat(changedText.substring(0,300)).concat(changedText.length>300?'...':'',\"\\\"\\n\\nPlease provide a detailed analysis of the differences, changes in meaning, style, and content structure.\")}];try{const aiInsight=await this.callGroqAPI(messages);console.log('✅ Groq explanation received');return\"\\n        <div class=\\\"ai-explanation\\\">\\n          <div class=\\\"ai-header\\\">\\n            <h4>\\uD83D\\uDCCA Groq AI Text Analysis</h4>\\n          </div>\\n          \\n          <div class=\\\"ai-section\\\">\\n            <h5 class=\\\"section-title\\\">\\uD83D\\uDCC8 Text Statistics</h5>\\n            <div class=\\\"stats-grid\\\">\\n              <div class=\\\"stat-card\\\">\\n                <div class=\\\"stat-label\\\">Original Text</div>\\n                <div class=\\\"stat-value\\\">\".concat(stats.originalLines,\" lines \\u2022 \").concat(stats.originalWords,\" words \\u2022 \").concat(stats.originalChars,\" chars</div>\\n              </div>\\n              <div class=\\\"stat-card\\\">\\n                <div class=\\\"stat-label\\\">Changed Text</div>\\n                <div class=\\\"stat-value\\\">\").concat(stats.changedLines,\" lines \\u2022 \").concat(stats.changedWords,\" words \\u2022 \").concat(stats.changedChars,\" chars</div>\\n              </div>\\n              <div class=\\\"stat-card\\\">\\n                <div class=\\\"stat-label\\\">Net Changes</div>\\n                <div class=\\\"stat-value\\\">\\n                  \").concat(Math.abs(stats.changedLines-stats.originalLines),\" lines \\u2022 \\n                  \").concat(Math.abs(stats.changedWords-stats.originalWords),\" words \\u2022 \\n                  \").concat(Math.abs(stats.changedChars-stats.originalChars),\" chars\\n                </div>\\n              </div>\\n            </div>\\n          </div>\\n          \\n          <div class=\\\"ai-section\\\">\\n            <h5 class=\\\"section-title\\\">\\uD83E\\uDD16 AI Analysis</h5>\\n            <div class=\\\"ai-insight-box\\\">\\n              \").concat(this.formatAIResponse(aiInsight),\"\\n            </div>\\n          </div>\\n          \\n          <div class=\\\"ai-section\\\">\\n            <h5 class=\\\"section-title\\\">\\uD83D\\uDD0D Key Findings</h5>\\n            <div class=\\\"findings-list\\\">\\n              \").concat(stats.originalLines!==stats.changedLines?\"<div class=\\\"finding-item\\\">\\uD83D\\uDCC4 Line count: \".concat(stats.originalLines,\" \\u2192 \").concat(stats.changedLines,\"</div>\"):'',\"\\n              \").concat(stats.originalWords!==stats.changedWords?\"<div class=\\\"finding-item\\\">\\uD83D\\uDCDD Word count: \".concat(stats.originalWords,\" \\u2192 \").concat(stats.changedWords,\"</div>\"):'',\"\\n              \").concat(originalText===changedText?'<div class=\"finding-item\">✅ No changes detected - texts are identical</div>':'',\"\\n              \").concat(Math.abs(stats.changedChars-stats.originalChars)>stats.originalChars*0.5?'<div class=\"finding-item\">⚠️ Significant content change detected (>50%)</div>':'',\"\\n              \").concat(Math.abs(stats.changedChars-stats.originalChars)<stats.originalChars*0.1?'<div class=\"finding-item\">✨ Minor changes detected (<10%)</div>':'',\"\\n            </div>\\n          </div>\\n        </div>\\n      \");}catch(error){console.error('❌ Groq API failed for explanation:',error);throw error;}}// Generate rewrite suggestions\nasync generateRewriteSuggestions(originalText,changedText){console.log('✨ Generating rewrite suggestions with Groq...');const combinedText=originalText+' '+changedText;const messages=[{role:\"system\",content:\"You are an expert writing coach. Provide specific, actionable suggestions to improve text clarity, style, and readability.\"},{role:\"user\",content:\"Please analyze this text and provide specific rewrite suggestions to improve clarity, style, and readability:\\n\\n\\\"\".concat(combinedText.substring(0,400)).concat(combinedText.length>400?'...':'',\"\\\"\\n\\nProvide concrete suggestions for improvement, including specific examples where possible.\")}];try{const suggestions=await this.callGroqAPI(messages);console.log('✅ Groq rewrite suggestions received');return\"\\n        <div class=\\\"ai-rewrite\\\">\\n          <div class=\\\"ai-header\\\">\\n            <h4>\\u2728 Groq AI Rewrite Suggestions</h4>\\n          </div>\\n          \\n          <div class=\\\"ai-section\\\">\\n            <h5 class=\\\"section-title\\\">\\uD83C\\uDFAF AI-Generated Suggestions</h5>\\n            <div class=\\\"suggestions-box\\\">\\n              \".concat(this.formatAIResponse(suggestions),\"\\n            </div>\\n          </div>\\n          \\n          <div class=\\\"ai-section\\\">\\n            <h5 class=\\\"section-title\\\">\\uD83D\\uDCDD Writing Best Practices</h5>\\n            <div class=\\\"tips-grid\\\">\\n              <div class=\\\"tip-item\\\">\\n                <div class=\\\"tip-icon\\\">\\uD83C\\uDFAF</div>\\n                <div class=\\\"tip-content\\\">\\n                  <strong>Clarity:</strong> Use clear, concise language and avoid jargon\\n                </div>\\n              </div>\\n              <div class=\\\"tip-item\\\">\\n                <div class=\\\"tip-icon\\\">\\uD83D\\uDCCF</div>\\n                <div class=\\\"tip-content\\\">\\n                  <strong>Structure:</strong> Break up long sentences for better readability\\n                </div>\\n              </div>\\n              <div class=\\\"tip-item\\\">\\n                <div class=\\\"tip-icon\\\">\\uD83D\\uDCAA</div>\\n                <div class=\\\"tip-content\\\">\\n                  <strong>Voice:</strong> Use active voice when possible\\n                </div>\\n              </div>\\n              <div class=\\\"tip-item\\\">\\n                <div class=\\\"tip-icon\\\">\\uD83D\\uDD04</div>\\n                <div class=\\\"tip-content\\\">\\n                  <strong>Consistency:</strong> Ensure consistent terminology throughout\\n                </div>\\n              </div>\\n              <div class=\\\"tip-item\\\">\\n                <div class=\\\"tip-icon\\\">\\uD83C\\uDF0A</div>\\n                <div class=\\\"tip-content\\\">\\n                  <strong>Flow:</strong> Add transitional phrases for better flow\\n                </div>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n      \");}catch(error){console.error('❌ Groq API failed for rewrite suggestions:',error);throw error;}}// Generate summary\nasync generateSummary(originalText,changedText){console.log('📄 Generating summary with Groq...');const combinedText=originalText+'\\n\\n'+changedText;const messages=[{role:\"system\",content:\"You are an expert at creating concise, informative summaries. Focus on the key points and main ideas.\"},{role:\"user\",content:\"Please provide a concise summary of these texts, highlighting the main points and any key differences:\\n\\n\\\"\".concat(combinedText.substring(0,500)).concat(combinedText.length>500?'...':'',\"\\\"\\n\\nFocus on the most important information and any significant changes between versions.\")}];try{const summary=await this.callGroqAPI(messages);console.log('✅ Groq summary received');return\"\\n        <div class=\\\"ai-summary\\\">\\n          <div class=\\\"ai-header\\\">\\n            <h4>\\uD83D\\uDCDD Groq AI Summary</h4>\\n          </div>\\n          \\n          <div class=\\\"ai-section\\\">\\n            <h5 class=\\\"section-title\\\">\\uD83D\\uDCC4 Key Points Summary</h5>\\n            <div class=\\\"summary-box\\\">\\n              \".concat(this.formatAIResponse(summary),\"\\n            </div>\\n          </div>\\n          \\n          <div class=\\\"ai-section\\\">\\n            <h5 class=\\\"section-title\\\">\\uD83D\\uDCCA Document Overview</h5>\\n            <div class=\\\"overview-stats\\\">\\n              <div class=\\\"overview-item\\\">\\n                <span class=\\\"overview-label\\\">\\uD83D\\uDCCF Combined Length:</span>\\n                <span class=\\\"overview-value\\\">\").concat(combinedText.length,\" characters</span>\\n              </div>\\n              <div class=\\\"overview-item\\\">\\n                <span class=\\\"overview-label\\\">\\uD83D\\uDD0D Analysis Scope:</span>\\n                <span class=\\\"overview-value\\\">Both original and changed versions</span>\\n              </div>\\n              <div class=\\\"overview-item\\\">\\n                <span class=\\\"overview-label\\\">\\uD83C\\uDFAF Focus:</span>\\n                <span class=\\\"overview-value\\\">Main points and key differences</span>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n      \");}catch(error){console.error('❌ Groq API failed for summary:',error);throw error;}}// Generate tone analysis\nasync generateToneAnalysis(originalText,changedText){console.log('🎭 Generating tone analysis with Groq...');const messages=[{role:\"system\",content:\"You are an expert in linguistic analysis and tone assessment. Analyze the emotional tone, formality level, and overall sentiment of texts.\"},{role:\"user\",content:\"Please analyze the tone and sentiment of these texts:\\n\\nOriginal Text: \\\"\".concat(originalText.substring(0,300)).concat(originalText.length>300?'...':'',\"\\\"\\n\\nChanged Text: \\\"\").concat(changedText.substring(0,300)).concat(changedText.length>300?'...':'',\"\\\"\\n\\nAnalyze: emotional tone, formality level, sentiment, audience appropriateness, and any tone shifts between versions.\")}];try{const toneAnalysis=await this.callGroqAPI(messages);console.log('✅ Groq tone analysis received');return\"\\n        <div class=\\\"ai-tone\\\">\\n          <div class=\\\"ai-header\\\">\\n            <h4>\\uD83C\\uDFAD Groq AI Tone Analysis</h4>\\n          </div>\\n          \\n          <div class=\\\"ai-section\\\">\\n            <h5 class=\\\"section-title\\\">\\uD83C\\uDFAF Tone Assessment</h5>\\n            <div class=\\\"tone-analysis-box\\\">\\n              \".concat(this.formatAIResponse(toneAnalysis),\"\\n            </div>\\n          </div>\\n          \\n          <div class=\\\"ai-section\\\">\\n            <h5 class=\\\"section-title\\\">\\uD83D\\uDCA1 Tone Guidelines</h5>\\n            <div class=\\\"guidelines-grid\\\">\\n              <div class=\\\"guideline-item\\\">\\n                <div class=\\\"guideline-icon\\\">\\uD83C\\uDFAF</div>\\n                <div class=\\\"guideline-content\\\">\\n                  <strong>Consistency:</strong> Maintain consistent voice throughout your document\\n                </div>\\n              </div>\\n              <div class=\\\"guideline-item\\\">\\n                <div class=\\\"guideline-icon\\\">\\uD83D\\uDC65</div>\\n                <div class=\\\"guideline-content\\\">\\n                  <strong>Audience:</strong> Match tone to your purpose and audience\\n                </div>\\n              </div>\\n              <div class=\\\"guideline-item\\\">\\n                <div class=\\\"guideline-icon\\\">\\uD83C\\uDF0D</div>\\n                <div class=\\\"guideline-content\\\">\\n                  <strong>Context:</strong> Consider cultural context and expectations\\n                </div>\\n              </div>\\n              <div class=\\\"guideline-item\\\">\\n                <div class=\\\"guideline-icon\\\">\\u2696\\uFE0F</div>\\n                <div class=\\\"guideline-content\\\">\\n                  <strong>Balance:</strong> Balance professionalism with accessibility\\n                </div>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n      \");}catch(error){console.error('❌ Groq API failed for tone analysis:',error);throw error;}}// Generate cleanup analysis\nasync generateCleanupAnalysis(originalText,changedText){console.log('🧹 Generating cleanup analysis with Groq...');const combinedText=originalText+'\\n'+changedText;const messages=[{role:\"system\",content:\"You are an expert editor focused on text cleanup and formatting. Identify formatting issues, inconsistencies, and areas for improvement.\"},{role:\"user\",content:\"Please analyze this text for formatting issues, inconsistencies, and cleanup opportunities:\\n\\n\\\"\".concat(combinedText.substring(0,400)).concat(combinedText.length>400?'...':'',\"\\\"\\n\\nLook for: spacing issues, punctuation problems, inconsistent formatting, redundant phrases, and other cleanup opportunities.\")}];try{const cleanupAnalysis=await this.callGroqAPI(messages);console.log('✅ Groq cleanup analysis received');return\"\\n        <div class=\\\"ai-cleanup\\\">\\n          <div class=\\\"ai-header\\\">\\n            <h4>\\uD83E\\uDDF9 Groq AI Text Cleanup Analysis</h4>\\n          </div>\\n          \\n          <div class=\\\"ai-section\\\">\\n            <h5 class=\\\"section-title\\\">\\uD83D\\uDD0D Issues & Recommendations</h5>\\n            <div class=\\\"cleanup-analysis-box\\\">\\n              \".concat(this.formatAIResponse(cleanupAnalysis),\"\\n            </div>\\n          </div>\\n          \\n          <div class=\\\"ai-section\\\">\\n            <h5 class=\\\"section-title\\\">\\u2728 Cleanup Checklist</h5>\\n            <div class=\\\"cleanup-checklist\\\">\\n              <div class=\\\"cleanup-item\\\">\\n                <div class=\\\"cleanup-icon\\\">\\uD83D\\uDD32</div>\\n                <div class=\\\"cleanup-content\\\">Remove trailing whitespace at line ends</div>\\n              </div>\\n              <div class=\\\"cleanup-item\\\">\\n                <div class=\\\"cleanup-icon\\\">\\uD83D\\uDCCF</div>\\n                <div class=\\\"cleanup-content\\\">Standardize line break usage</div>\\n              </div>\\n              <div class=\\\"cleanup-item\\\">\\n                <div class=\\\"cleanup-icon\\\">\\uD83D\\uDCDD</div>\\n                <div class=\\\"cleanup-content\\\">Fix inconsistent punctuation</div>\\n              </div>\\n              <div class=\\\"cleanup-item\\\">\\n                <div class=\\\"cleanup-icon\\\">\\uD83D\\uDCAC</div>\\n                <div class=\\\"cleanup-content\\\">Normalize quotation marks</div>\\n              </div>\\n              <div class=\\\"cleanup-item\\\">\\n                <div class=\\\"cleanup-icon\\\">\\uD83E\\uDDFD</div>\\n                <div class=\\\"cleanup-content\\\">Remove unnecessary special characters</div>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n      \");}catch(error){console.error('❌ Groq API failed for cleanup analysis:',error);throw error;}}// Helper methods\ncalculateTextStats(originalText,changedText){return{originalLines:originalText.split('\\n').length,changedLines:changedText.split('\\n').length,originalWords:originalText.split(/\\s+/).filter(w=>w.length>0).length,changedWords:changedText.split(/\\s+/).filter(w=>w.length>0).length,originalChars:originalText.length,changedChars:changedText.length};}// Format AI response as clean bulleted list\nformatAIResponse(text){if(!text)return'';// Clean up the text\nlet cleaned=text// Remove **text** and replace with <strong>text</strong>\n.replace(/\\*\\*(.*?)\\*\\*/g,'<strong>$1</strong>')// Remove single asterisks\n.replace(/\\*(.*?)\\*/g,'$1')// Clean up multiple spaces\n.replace(/\\s+/g,' ')// Trim whitespace\n.trim();// Split into sentences and logical points\nlet points=[];// First try to split by numbered items (1., 2., 3., etc.)\nif(cleaned.match(/\\d+\\.\\s/)){points=cleaned.split(/(?=\\d+\\.\\s)/).filter(p=>p.trim());}// If no numbered items, split by periods followed by capital letters or new sections\nelse if(cleaned.match(/\\.\\s+[A-Z]/)){points=cleaned.split(/\\.\\s+(?=[A-Z])/).map(p=>p.trim()+(p.endsWith('.')?'':'.'));}// If no clear structure, split by double line breaks or long sentences\nelse{points=cleaned.split(/\\n\\s*\\n+|(?<=\\.)\\s+(?=[A-Z][^.]*:)/).filter(p=>p.trim());}// Clean up and format each point\nconst formattedPoints=points.map(point=>point.trim()).filter(point=>point.length>10)// Filter out very short fragments\n.map(point=>{// Remove leading numbers if present\npoint=point.replace(/^\\d+\\.\\s*/,'');// Ensure proper sentence ending\nif(!point.endsWith('.')&&!point.endsWith('!')&&!point.endsWith('?')){point+='.';}return point;});// If we have multiple points, format as bulleted list\nif(formattedPoints.length>1){return\"<ul>\".concat(formattedPoints.map(point=>\"<li>\".concat(point,\"</li>\")).join(''),\"</ul>\");}// If only one point or no clear structure, return as paragraph\nelse{return\"<p>\".concat(cleaned,\"</p>\");}}// Format the response into the expected structure\nformatResponse(type,content){const typeIcons={explain:'🧠',rewrite:'✨',summary:'📝',tone:'🎭',cleanup:'🧹'};const typeTitles={explain:'Groq AI Explanation',rewrite:'Groq AI Rewrite Suggestions',summary:'Groq AI Summary',tone:'Groq AI Tone Analysis',cleanup:'Groq AI Text Cleanup'};return{title:\"\".concat(typeIcons[type]||'🤖',\" \").concat(typeTitles[type]||'Groq AI Analysis'),content:content,type:type};}// Test the Groq connection\nasync testConnection(){console.log('Testing Groq connection...');console.log('API Key configured:',this.isConfigured());if(!this.isConfigured()){return{success:false,error:'API key not configured'};}try{const result=await this.callGroqAPI([{role:\"user\",content:\"Say 'Hello, Groq API is working!' in a friendly way.\"}]);console.log('API test result:',result);return{success:true,response:result};}catch(error){console.error('API test failed:',error);return{success:false,error:error.message};}}// Debug method\ndebugConfig(){console.log('=== Groq Debug Info ===');console.log('Environment API Key:',process.env.REACT_APP_GROQ_API_KEY?'Found':'Not found');console.log('Config API Key:',this.config.apiKey?'Found':'Not found');console.log('Is Configured:',this.isConfigured());console.log('Base URL:',this.config.baseUrl);console.log('Model:',this.config.model);console.log('======================');}}","map":{"version":3,"names":["GroqService","constructor","config","apiKey","process","env","REACT_APP_GROQ_API_KEY","baseUrl","model","maxTokens","temperature","loadConfig","savedConfig","localStorage","getItem","parsedConfig","JSON","parse","_objectSpread","envApiKey","error","console","isConfigured","hasKey","trim","length","isValidKey","startsWith","configured","log","envVar","hasApiKey","apiKeyLength","apiKeyPreview","concat","substring","startsWithGsk","callGroqAPI","messages","response","fetch","method","headers","body","stringify","max_tokens","status","ok","text","Error","result","json","choices","message","content","generateAnalysis","type","originalText","changedText","analysis","generateExplanation","generateRewriteSuggestions","generateSummary","generateToneAnalysis","generateCleanupAnalysis","formatResponse","stats","calculateTextStats","role","aiInsight","originalLines","originalWords","originalChars","changedLines","changedWords","changedChars","Math","abs","formatAIResponse","combinedText","suggestions","summary","toneAnalysis","cleanupAnalysis","split","filter","w","cleaned","replace","points","match","p","map","endsWith","formattedPoints","point","join","typeIcons","explain","rewrite","tone","cleanup","typeTitles","title","testConnection","success","debugConfig"],"sources":["C:/Users/Joem/quickdiff-react/src/utils/GroqService.js"],"sourcesContent":["/**\r\n * Groq API Service for QuickDiff React App\r\n * Fast, reliable, and free AI API for text analysis\r\n * Get your free API key at: https://console.groq.com/\r\n */\r\n\r\nexport class GroqService {\r\n  constructor() {\r\n    this.config = {\r\n      apiKey: process.env.REACT_APP_GROQ_API_KEY || '', // Groq API key from environment\r\n      baseUrl: 'https://api.groq.com/openai/v1/chat/completions',\r\n      model: 'llama-3.1-8b-instant', // Fast and reliable model\r\n      maxTokens: 1000,\r\n      temperature: 0.7\r\n    };\r\n    \r\n    this.loadConfig();\r\n  }\r\n\r\n  loadConfig() {\r\n    try {\r\n      const savedConfig = localStorage.getItem('quickdiff_groq_config');\r\n      if (savedConfig) {\r\n        const parsedConfig = JSON.parse(savedConfig);\r\n        delete parsedConfig.apiKey; // Don't override API key from environment\r\n        this.config = { ...this.config, ...parsedConfig };\r\n      }\r\n      \r\n      // Ensure environment variable always takes precedence\r\n      const envApiKey = process.env.REACT_APP_GROQ_API_KEY;\r\n      if (envApiKey) {\r\n        this.config.apiKey = envApiKey;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading Groq config:', error);\r\n    }\r\n  }\r\n\r\n  // Check if Groq is properly configured\r\n  isConfigured() {\r\n    const hasKey = this.config.apiKey && this.config.apiKey.trim().length > 0;\r\n    const isValidKey = this.config.apiKey && this.config.apiKey.startsWith('gsk_');\r\n    const configured = hasKey && isValidKey;\r\n    \r\n    console.log('🔍 Groq isConfigured check:', {\r\n      envVar: process.env.REACT_APP_GROQ_API_KEY ? 'Found' : 'Not found',\r\n      hasApiKey: !!this.config.apiKey,\r\n      apiKeyLength: this.config.apiKey ? this.config.apiKey.length : 0,\r\n      apiKeyPreview: this.config.apiKey ? `${this.config.apiKey.substring(0, 10)}...` : 'none',\r\n      startsWithGsk: isValidKey,\r\n      configured: configured\r\n    });\r\n    return configured;\r\n  }\r\n\r\n  // Call Groq API\r\n  async callGroqAPI(messages) {\r\n    console.log('🌐 Making Groq API call...');\r\n    console.log('🔑 Using API key:', this.config.apiKey ? `${this.config.apiKey.substring(0, 10)}...` : 'NONE');\r\n    \r\n    const response = await fetch(this.config.baseUrl, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${this.config.apiKey}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        model: this.config.model,\r\n        messages: messages,\r\n        max_tokens: this.config.maxTokens,\r\n        temperature: this.config.temperature\r\n      })\r\n    });\r\n\r\n    console.log('📥 Response status:', response.status);\r\n\r\n    if (!response.ok) {\r\n      const error = await response.text();\r\n      console.error('❌ Groq API Error Response:', error);\r\n      throw new Error(`Groq API error: ${response.status} - ${error}`);\r\n    }\r\n\r\n    const result = await response.json();\r\n    console.log('✅ Groq API Success');\r\n    return result.choices[0].message.content;\r\n  }\r\n\r\n  // Generate analysis using Groq\r\n  async generateAnalysis(type, originalText, changedText) {\r\n    console.log('🚀 generateAnalysis called with type:', type);\r\n    console.log('🔧 isConfigured():', this.isConfigured());\r\n    \r\n    if (!this.isConfigured()) {\r\n      console.log('❌ Groq API not configured, throwing error');\r\n      throw new Error('Groq API not configured. Please set up your API token.');\r\n    }\r\n\r\n    console.log('✅ Groq API configured, proceeding with analysis...');\r\n    try {\r\n      let analysis;\r\n      switch (type) {\r\n        case 'explain':\r\n          analysis = await this.generateExplanation(originalText, changedText);\r\n          break;\r\n        case 'rewrite':\r\n          analysis = await this.generateRewriteSuggestions(originalText, changedText);\r\n          break;\r\n        case 'summary':\r\n          analysis = await this.generateSummary(originalText, changedText);\r\n          break;\r\n        case 'tone':\r\n          analysis = await this.generateToneAnalysis(originalText, changedText);\r\n          break;\r\n        case 'cleanup':\r\n          analysis = await this.generateCleanupAnalysis(originalText, changedText);\r\n          break;\r\n        default:\r\n          analysis = await this.generateExplanation(originalText, changedText);\r\n      }\r\n      \r\n      console.log('✅ Analysis generated successfully');\r\n      return this.formatResponse(type, analysis);\r\n    } catch (error) {\r\n      console.error('❌ Groq API Error:', error);\r\n      throw new Error(`Failed to generate ${type} analysis: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // Generate explanation analysis\r\n  async generateExplanation(originalText, changedText) {\r\n    console.log('📝 Generating explanation with Groq...');\r\n    const stats = this.calculateTextStats(originalText, changedText);\r\n    \r\n    const messages = [\r\n      {\r\n        role: \"system\",\r\n        content: \"You are an expert text analyst. Analyze the differences between two texts and provide clear, insightful explanations.\"\r\n      },\r\n      {\r\n        role: \"user\",\r\n        content: `Compare these two texts and explain the key differences:\r\n\r\nOriginal Text: \"${originalText.substring(0, 300)}${originalText.length > 300 ? '...' : ''}\"\r\n\r\nChanged Text: \"${changedText.substring(0, 300)}${changedText.length > 300 ? '...' : ''}\"\r\n\r\nPlease provide a detailed analysis of the differences, changes in meaning, style, and content structure.`\r\n      }\r\n    ];\r\n\r\n    try {\r\n      const aiInsight = await this.callGroqAPI(messages);\r\n      console.log('✅ Groq explanation received');\r\n      \r\n      return `\r\n        <div class=\"ai-explanation\">\r\n          <div class=\"ai-header\">\r\n            <h4>📊 Groq AI Text Analysis</h4>\r\n          </div>\r\n          \r\n          <div class=\"ai-section\">\r\n            <h5 class=\"section-title\">📈 Text Statistics</h5>\r\n            <div class=\"stats-grid\">\r\n              <div class=\"stat-card\">\r\n                <div class=\"stat-label\">Original Text</div>\r\n                <div class=\"stat-value\">${stats.originalLines} lines • ${stats.originalWords} words • ${stats.originalChars} chars</div>\r\n              </div>\r\n              <div class=\"stat-card\">\r\n                <div class=\"stat-label\">Changed Text</div>\r\n                <div class=\"stat-value\">${stats.changedLines} lines • ${stats.changedWords} words • ${stats.changedChars} chars</div>\r\n              </div>\r\n              <div class=\"stat-card\">\r\n                <div class=\"stat-label\">Net Changes</div>\r\n                <div class=\"stat-value\">\r\n                  ${Math.abs(stats.changedLines - stats.originalLines)} lines • \r\n                  ${Math.abs(stats.changedWords - stats.originalWords)} words • \r\n                  ${Math.abs(stats.changedChars - stats.originalChars)} chars\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"ai-section\">\r\n            <h5 class=\"section-title\">🤖 AI Analysis</h5>\r\n            <div class=\"ai-insight-box\">\r\n              ${this.formatAIResponse(aiInsight)}\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"ai-section\">\r\n            <h5 class=\"section-title\">🔍 Key Findings</h5>\r\n            <div class=\"findings-list\">\r\n              ${stats.originalLines !== stats.changedLines ? `<div class=\"finding-item\">📄 Line count: ${stats.originalLines} → ${stats.changedLines}</div>` : ''}\r\n              ${stats.originalWords !== stats.changedWords ? `<div class=\"finding-item\">📝 Word count: ${stats.originalWords} → ${stats.changedWords}</div>` : ''}\r\n              ${originalText === changedText ? '<div class=\"finding-item\">✅ No changes detected - texts are identical</div>' : ''}\r\n              ${Math.abs(stats.changedChars - stats.originalChars) > stats.originalChars * 0.5 ? '<div class=\"finding-item\">⚠️ Significant content change detected (>50%)</div>' : ''}\r\n              ${Math.abs(stats.changedChars - stats.originalChars) < stats.originalChars * 0.1 ? '<div class=\"finding-item\">✨ Minor changes detected (<10%)</div>' : ''}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      `;\r\n    } catch (error) {\r\n      console.error('❌ Groq API failed for explanation:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Generate rewrite suggestions\r\n  async generateRewriteSuggestions(originalText, changedText) {\r\n    console.log('✨ Generating rewrite suggestions with Groq...');\r\n    const combinedText = originalText + ' ' + changedText;\r\n    \r\n    const messages = [\r\n      {\r\n        role: \"system\",\r\n        content: \"You are an expert writing coach. Provide specific, actionable suggestions to improve text clarity, style, and readability.\"\r\n      },\r\n      {\r\n        role: \"user\",\r\n        content: `Please analyze this text and provide specific rewrite suggestions to improve clarity, style, and readability:\r\n\r\n\"${combinedText.substring(0, 400)}${combinedText.length > 400 ? '...' : ''}\"\r\n\r\nProvide concrete suggestions for improvement, including specific examples where possible.`\r\n      }\r\n    ];\r\n\r\n    try {\r\n      const suggestions = await this.callGroqAPI(messages);\r\n      console.log('✅ Groq rewrite suggestions received');\r\n      \r\n      return `\r\n        <div class=\"ai-rewrite\">\r\n          <div class=\"ai-header\">\r\n            <h4>✨ Groq AI Rewrite Suggestions</h4>\r\n          </div>\r\n          \r\n          <div class=\"ai-section\">\r\n            <h5 class=\"section-title\">🎯 AI-Generated Suggestions</h5>\r\n            <div class=\"suggestions-box\">\r\n              ${this.formatAIResponse(suggestions)}\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"ai-section\">\r\n            <h5 class=\"section-title\">📝 Writing Best Practices</h5>\r\n            <div class=\"tips-grid\">\r\n              <div class=\"tip-item\">\r\n                <div class=\"tip-icon\">🎯</div>\r\n                <div class=\"tip-content\">\r\n                  <strong>Clarity:</strong> Use clear, concise language and avoid jargon\r\n                </div>\r\n              </div>\r\n              <div class=\"tip-item\">\r\n                <div class=\"tip-icon\">📏</div>\r\n                <div class=\"tip-content\">\r\n                  <strong>Structure:</strong> Break up long sentences for better readability\r\n                </div>\r\n              </div>\r\n              <div class=\"tip-item\">\r\n                <div class=\"tip-icon\">💪</div>\r\n                <div class=\"tip-content\">\r\n                  <strong>Voice:</strong> Use active voice when possible\r\n                </div>\r\n              </div>\r\n              <div class=\"tip-item\">\r\n                <div class=\"tip-icon\">🔄</div>\r\n                <div class=\"tip-content\">\r\n                  <strong>Consistency:</strong> Ensure consistent terminology throughout\r\n                </div>\r\n              </div>\r\n              <div class=\"tip-item\">\r\n                <div class=\"tip-icon\">🌊</div>\r\n                <div class=\"tip-content\">\r\n                  <strong>Flow:</strong> Add transitional phrases for better flow\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      `;\r\n    } catch (error) {\r\n      console.error('❌ Groq API failed for rewrite suggestions:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Generate summary\r\n  async generateSummary(originalText, changedText) {\r\n    console.log('📄 Generating summary with Groq...');\r\n    const combinedText = originalText + '\\n\\n' + changedText;\r\n    \r\n    const messages = [\r\n      {\r\n        role: \"system\",\r\n        content: \"You are an expert at creating concise, informative summaries. Focus on the key points and main ideas.\"\r\n      },\r\n      {\r\n        role: \"user\",\r\n        content: `Please provide a concise summary of these texts, highlighting the main points and any key differences:\r\n\r\n\"${combinedText.substring(0, 500)}${combinedText.length > 500 ? '...' : ''}\"\r\n\r\nFocus on the most important information and any significant changes between versions.`\r\n      }\r\n    ];\r\n\r\n    try {\r\n      const summary = await this.callGroqAPI(messages);\r\n      console.log('✅ Groq summary received');\r\n      \r\n      return `\r\n        <div class=\"ai-summary\">\r\n          <div class=\"ai-header\">\r\n            <h4>📝 Groq AI Summary</h4>\r\n          </div>\r\n          \r\n          <div class=\"ai-section\">\r\n            <h5 class=\"section-title\">📄 Key Points Summary</h5>\r\n            <div class=\"summary-box\">\r\n              ${this.formatAIResponse(summary)}\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"ai-section\">\r\n            <h5 class=\"section-title\">📊 Document Overview</h5>\r\n            <div class=\"overview-stats\">\r\n              <div class=\"overview-item\">\r\n                <span class=\"overview-label\">📏 Combined Length:</span>\r\n                <span class=\"overview-value\">${combinedText.length} characters</span>\r\n              </div>\r\n              <div class=\"overview-item\">\r\n                <span class=\"overview-label\">🔍 Analysis Scope:</span>\r\n                <span class=\"overview-value\">Both original and changed versions</span>\r\n              </div>\r\n              <div class=\"overview-item\">\r\n                <span class=\"overview-label\">🎯 Focus:</span>\r\n                <span class=\"overview-value\">Main points and key differences</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      `;\r\n    } catch (error) {\r\n      console.error('❌ Groq API failed for summary:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Generate tone analysis\r\n  async generateToneAnalysis(originalText, changedText) {\r\n    console.log('🎭 Generating tone analysis with Groq...');\r\n    \r\n    const messages = [\r\n      {\r\n        role: \"system\",\r\n        content: \"You are an expert in linguistic analysis and tone assessment. Analyze the emotional tone, formality level, and overall sentiment of texts.\"\r\n      },\r\n      {\r\n        role: \"user\",\r\n        content: `Please analyze the tone and sentiment of these texts:\r\n\r\nOriginal Text: \"${originalText.substring(0, 300)}${originalText.length > 300 ? '...' : ''}\"\r\n\r\nChanged Text: \"${changedText.substring(0, 300)}${changedText.length > 300 ? '...' : ''}\"\r\n\r\nAnalyze: emotional tone, formality level, sentiment, audience appropriateness, and any tone shifts between versions.`\r\n      }\r\n    ];\r\n\r\n    try {\r\n      const toneAnalysis = await this.callGroqAPI(messages);\r\n      console.log('✅ Groq tone analysis received');\r\n      \r\n      return `\r\n        <div class=\"ai-tone\">\r\n          <div class=\"ai-header\">\r\n            <h4>🎭 Groq AI Tone Analysis</h4>\r\n          </div>\r\n          \r\n          <div class=\"ai-section\">\r\n            <h5 class=\"section-title\">🎯 Tone Assessment</h5>\r\n            <div class=\"tone-analysis-box\">\r\n              ${this.formatAIResponse(toneAnalysis)}\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"ai-section\">\r\n            <h5 class=\"section-title\">💡 Tone Guidelines</h5>\r\n            <div class=\"guidelines-grid\">\r\n              <div class=\"guideline-item\">\r\n                <div class=\"guideline-icon\">🎯</div>\r\n                <div class=\"guideline-content\">\r\n                  <strong>Consistency:</strong> Maintain consistent voice throughout your document\r\n                </div>\r\n              </div>\r\n              <div class=\"guideline-item\">\r\n                <div class=\"guideline-icon\">👥</div>\r\n                <div class=\"guideline-content\">\r\n                  <strong>Audience:</strong> Match tone to your purpose and audience\r\n                </div>\r\n              </div>\r\n              <div class=\"guideline-item\">\r\n                <div class=\"guideline-icon\">🌍</div>\r\n                <div class=\"guideline-content\">\r\n                  <strong>Context:</strong> Consider cultural context and expectations\r\n                </div>\r\n              </div>\r\n              <div class=\"guideline-item\">\r\n                <div class=\"guideline-icon\">⚖️</div>\r\n                <div class=\"guideline-content\">\r\n                  <strong>Balance:</strong> Balance professionalism with accessibility\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      `;\r\n    } catch (error) {\r\n      console.error('❌ Groq API failed for tone analysis:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Generate cleanup analysis\r\n  async generateCleanupAnalysis(originalText, changedText) {\r\n    console.log('🧹 Generating cleanup analysis with Groq...');\r\n    const combinedText = originalText + '\\n' + changedText;\r\n    \r\n    const messages = [\r\n      {\r\n        role: \"system\",\r\n        content: \"You are an expert editor focused on text cleanup and formatting. Identify formatting issues, inconsistencies, and areas for improvement.\"\r\n      },\r\n      {\r\n        role: \"user\",\r\n        content: `Please analyze this text for formatting issues, inconsistencies, and cleanup opportunities:\r\n\r\n\"${combinedText.substring(0, 400)}${combinedText.length > 400 ? '...' : ''}\"\r\n\r\nLook for: spacing issues, punctuation problems, inconsistent formatting, redundant phrases, and other cleanup opportunities.`\r\n      }\r\n    ];\r\n\r\n    try {\r\n      const cleanupAnalysis = await this.callGroqAPI(messages);\r\n      console.log('✅ Groq cleanup analysis received');\r\n      \r\n      return `\r\n        <div class=\"ai-cleanup\">\r\n          <div class=\"ai-header\">\r\n            <h4>🧹 Groq AI Text Cleanup Analysis</h4>\r\n          </div>\r\n          \r\n          <div class=\"ai-section\">\r\n            <h5 class=\"section-title\">🔍 Issues & Recommendations</h5>\r\n            <div class=\"cleanup-analysis-box\">\r\n              ${this.formatAIResponse(cleanupAnalysis)}\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"ai-section\">\r\n            <h5 class=\"section-title\">✨ Cleanup Checklist</h5>\r\n            <div class=\"cleanup-checklist\">\r\n              <div class=\"cleanup-item\">\r\n                <div class=\"cleanup-icon\">🔲</div>\r\n                <div class=\"cleanup-content\">Remove trailing whitespace at line ends</div>\r\n              </div>\r\n              <div class=\"cleanup-item\">\r\n                <div class=\"cleanup-icon\">📏</div>\r\n                <div class=\"cleanup-content\">Standardize line break usage</div>\r\n              </div>\r\n              <div class=\"cleanup-item\">\r\n                <div class=\"cleanup-icon\">📝</div>\r\n                <div class=\"cleanup-content\">Fix inconsistent punctuation</div>\r\n              </div>\r\n              <div class=\"cleanup-item\">\r\n                <div class=\"cleanup-icon\">💬</div>\r\n                <div class=\"cleanup-content\">Normalize quotation marks</div>\r\n              </div>\r\n              <div class=\"cleanup-item\">\r\n                <div class=\"cleanup-icon\">🧽</div>\r\n                <div class=\"cleanup-content\">Remove unnecessary special characters</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      `;\r\n    } catch (error) {\r\n      console.error('❌ Groq API failed for cleanup analysis:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Helper methods\r\n  calculateTextStats(originalText, changedText) {\r\n    return {\r\n      originalLines: originalText.split('\\n').length,\r\n      changedLines: changedText.split('\\n').length,\r\n      originalWords: originalText.split(/\\s+/).filter(w => w.length > 0).length,\r\n      changedWords: changedText.split(/\\s+/).filter(w => w.length > 0).length,\r\n      originalChars: originalText.length,\r\n      changedChars: changedText.length\r\n    };\r\n  }\r\n\r\n  // Format AI response as clean bulleted list\r\n  formatAIResponse(text) {\r\n    if (!text) return '';\r\n    \r\n    // Clean up the text\r\n    let cleaned = text\r\n      // Remove **text** and replace with <strong>text</strong>\r\n      .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\r\n      // Remove single asterisks\r\n      .replace(/\\*(.*?)\\*/g, '$1')\r\n      // Clean up multiple spaces\r\n      .replace(/\\s+/g, ' ')\r\n      // Trim whitespace\r\n      .trim();\r\n    \r\n    // Split into sentences and logical points\r\n    let points = [];\r\n    \r\n    // First try to split by numbered items (1., 2., 3., etc.)\r\n    if (cleaned.match(/\\d+\\.\\s/)) {\r\n      points = cleaned.split(/(?=\\d+\\.\\s)/).filter(p => p.trim());\r\n    }\r\n    // If no numbered items, split by periods followed by capital letters or new sections\r\n    else if (cleaned.match(/\\.\\s+[A-Z]/)) {\r\n      points = cleaned.split(/\\.\\s+(?=[A-Z])/).map(p => p.trim() + (p.endsWith('.') ? '' : '.'));\r\n    }\r\n    // If no clear structure, split by double line breaks or long sentences\r\n    else {\r\n      points = cleaned.split(/\\n\\s*\\n+|(?<=\\.)\\s+(?=[A-Z][^.]*:)/).filter(p => p.trim());\r\n    }\r\n    \r\n    // Clean up and format each point\r\n    const formattedPoints = points\r\n      .map(point => point.trim())\r\n      .filter(point => point.length > 10) // Filter out very short fragments\r\n      .map(point => {\r\n        // Remove leading numbers if present\r\n        point = point.replace(/^\\d+\\.\\s*/, '');\r\n        // Ensure proper sentence ending\r\n        if (!point.endsWith('.') && !point.endsWith('!') && !point.endsWith('?')) {\r\n          point += '.';\r\n        }\r\n        return point;\r\n      });\r\n    \r\n    // If we have multiple points, format as bulleted list\r\n    if (formattedPoints.length > 1) {\r\n      return `<ul>${formattedPoints.map(point => `<li>${point}</li>`).join('')}</ul>`;\r\n    }\r\n    // If only one point or no clear structure, return as paragraph\r\n    else {\r\n      return `<p>${cleaned}</p>`;\r\n    }\r\n  }\r\n\r\n  // Format the response into the expected structure\r\n  formatResponse(type, content) {\r\n    const typeIcons = {\r\n      explain: '🧠',\r\n      rewrite: '✨',\r\n      summary: '📝',\r\n      tone: '🎭',\r\n      cleanup: '🧹'\r\n    };\r\n\r\n    const typeTitles = {\r\n      explain: 'Groq AI Explanation',\r\n      rewrite: 'Groq AI Rewrite Suggestions',\r\n      summary: 'Groq AI Summary',\r\n      tone: 'Groq AI Tone Analysis',\r\n      cleanup: 'Groq AI Text Cleanup'\r\n    };\r\n\r\n    return {\r\n      title: `${typeIcons[type] || '🤖'} ${typeTitles[type] || 'Groq AI Analysis'}`,\r\n      content: content,\r\n      type: type\r\n    };\r\n  }\r\n\r\n  // Test the Groq connection\r\n  async testConnection() {\r\n    console.log('Testing Groq connection...');\r\n    console.log('API Key configured:', this.isConfigured());\r\n    \r\n    if (!this.isConfigured()) {\r\n      return { success: false, error: 'API key not configured' };\r\n    }\r\n    \r\n    try {\r\n      const result = await this.callGroqAPI([\r\n        { role: \"user\", content: \"Say 'Hello, Groq API is working!' in a friendly way.\" }\r\n      ]);\r\n      console.log('API test result:', result);\r\n      return { success: true, response: result };\r\n    } catch (error) {\r\n      console.error('API test failed:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n\r\n  // Debug method\r\n  debugConfig() {\r\n    console.log('=== Groq Debug Info ===');\r\n    console.log('Environment API Key:', process.env.REACT_APP_GROQ_API_KEY ? 'Found' : 'Not found');\r\n    console.log('Config API Key:', this.config.apiKey ? 'Found' : 'Not found');\r\n    console.log('Is Configured:', this.isConfigured());\r\n    console.log('Base URL:', this.config.baseUrl);\r\n    console.log('Model:', this.config.model);\r\n    console.log('======================');\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}