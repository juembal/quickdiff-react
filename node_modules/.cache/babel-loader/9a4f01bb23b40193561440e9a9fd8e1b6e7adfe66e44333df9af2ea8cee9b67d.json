{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joem\\\\quickdiff-react\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport './App.css';\nimport './user-guide.css';\nimport Header from './components/Header';\nimport SettingsPanel from './components/SettingsPanel';\nimport InputSection from './components/InputSection';\nimport Controls from './components/Controls';\nimport Legend from './components/Legend';\nimport Results from './components/Results';\nimport ReactUserGuide from './user-guide.js';\nimport { DiffEngine } from './utils/DiffEngine';\nimport { ExportUtils } from './utils/ExportUtils';\nimport { GroqService } from './utils/GroqService';\nimport { LanguageDetector } from './utils/LanguageDetector';\nimport PDFTextExtractor from './utils/PDFTextExtractor';\nimport { NotificationProvider, useNotification } from './components/NotificationProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuickDiffApp() {\n  _s();\n  // State management\n  const [originalText, setOriginalText] = useState('');\n  const [changedText, setChangedText] = useState('');\n  const [diffResult, setDiffResult] = useState(null);\n  const [showResults, setShowResults] = useState(false);\n  const [theme, setTheme] = useState('light');\n  const [contrast, setContrast] = useState('normal');\n\n  // Track last compared texts to prevent AI analysis on uncompared content\n  const [lastComparedOriginal, setLastComparedOriginal] = useState('');\n  const [lastComparedChanged, setLastComparedChanged] = useState('');\n\n  // Settings state\n  const [settings, setSettings] = useState({\n    diffMode: 'line',\n    viewMode: 'side-by-side',\n    language: 'plaintext',\n    autoDetectLanguage: true,\n    ignoreCase: false,\n    ignoreWhitespace: false,\n    ignorePunctuation: false,\n    livePreview: false\n  });\n\n  // Language detection state\n  const [detectedLanguage, setDetectedLanguage] = useState({\n    language: 'plaintext',\n    confidence: 'low',\n    method: 'default'\n  });\n\n  // AI state\n  const [aiResults, setAiResults] = useState([]);\n  const [showAiResults, setShowAiResults] = useState(false);\n  const [isGeneratingAI, setIsGeneratingAI] = useState(false);\n\n  // Navigation state removed (map functionality)\n\n  // Initialize user guide\n  useEffect(() => {\n    if (!window.userGuideInitialized) {\n      userGuide.current = new ReactUserGuide();\n      window.userGuideInitialized = true;\n    }\n\n    // Cleanup function\n    return () => {\n      if (userGuide.current) {\n        userGuide.current.destroy();\n        userGuide.current = null;\n      }\n    };\n  }, []);\n\n  // Refs\n  const debounceTimer = useRef(null);\n  const diffEngine = useRef(new DiffEngine());\n  const exportUtils = useRef(new ExportUtils());\n  const groqService = useRef(new GroqService());\n  const languageDetector = useRef(new LanguageDetector());\n  const pdfExtractor = useRef(new PDFTextExtractor());\n  const userGuide = useRef(null);\n  const {\n    showNotification\n  } = useNotification();\n\n  // Settings management functions (defined early to avoid hoisting issues)\n  const loadSettings = () => {\n    try {\n      const savedSettings = localStorage.getItem('quickdiff_react_settings');\n      if (savedSettings) {\n        setSettings(prev => ({\n          ...prev,\n          ...JSON.parse(savedSettings)\n        }));\n      }\n    } catch (error) {\n      console.error('Error loading settings:', error);\n    }\n  };\n  const saveSettings = useCallback(() => {\n    try {\n      localStorage.setItem('quickdiff_react_settings', JSON.stringify(settings));\n    } catch (error) {\n      console.error('Error saving settings:', error);\n    }\n  }, [settings]);\n  const loadTheme = () => {\n    const savedTheme = localStorage.getItem('quickdiff_theme') || 'light';\n    const savedContrast = localStorage.getItem('quickdiff_contrast') || 'normal';\n    setTheme(savedTheme);\n    setContrast(savedContrast);\n    document.documentElement.setAttribute('data-theme', savedTheme);\n    document.documentElement.setAttribute('data-contrast', savedContrast);\n  };\n\n  // Load settings and theme on mount\n  useEffect(() => {\n    loadSettings();\n    loadTheme();\n\n    // Debug AI API configurations\n    console.log('=== QuickDiff App Debug ===');\n    console.log('Environment variables check:');\n    console.log('REACT_APP_GROQ_API_KEY:', process.env.REACT_APP_GROQ_API_KEY ? 'Found' : 'Not found');\n    if (groqService.current) {\n      groqService.current.debugConfig();\n\n      // Make Groq service available globally for testing\n      window.testGroq = async () => {\n        console.log('üß™ Testing Groq API...');\n        try {\n          const result = await groqService.current.testConnection();\n          console.log('üß™ Test result:', result);\n          return result;\n        } catch (error) {\n          console.error('üß™ Test failed:', error);\n          return {\n            success: false,\n            error: error.message\n          };\n        }\n      };\n      console.log('üí° You can test Groq API by running: testGroq() in console');\n    }\n    console.log('========================');\n  }, []);\n\n  // Auto-save settings when they change\n  useEffect(() => {\n    saveSettings();\n  }, [settings, saveSettings]);\n\n  // Map-related change collection removed\n\n  // Main comparison function (defined early to avoid hoisting issues)\n  const performComparison = useCallback(() => {\n    // Check if both text areas are empty\n    if (!originalText.trim() && !changedText.trim()) {\n      showNotification('‚ùå Please enter text in both areas to compare');\n      return;\n    }\n\n    // Check if only one text area has content\n    if (!originalText.trim() || !changedText.trim()) {\n      showNotification('‚ùå Please provide text in both Original and Changed areas for comparison');\n      return;\n    }\n    try {\n      const result = diffEngine.current.performComparison(originalText, changedText, settings);\n      console.log('Diff Result:', result); // Debug log\n      setDiffResult(result);\n      setShowResults(true);\n\n      // Store the texts that were just compared\n      setLastComparedOriginal(originalText.trim());\n      setLastComparedChanged(changedText.trim());\n\n      // Auto-generate AI analysis is disabled to prevent duplicate results\n      // Users can manually trigger AI analysis using the AI buttons\n\n      // Auto-scroll to results only if live preview is disabled\n      if (!settings.livePreview) {\n        setTimeout(() => {\n          const resultsElement = document.getElementById('results-section');\n          if (resultsElement) {\n            resultsElement.scrollIntoView({\n              behavior: 'smooth',\n              block: 'start'\n            });\n          }\n        }, 100);\n      }\n      showNotification('Comparison completed');\n    } catch (error) {\n      console.error('Comparison error:', error);\n      showNotification('Error performing comparison');\n    }\n  }, [originalText, changedText, settings, showNotification, collectChanges]);\n\n  // NEW: Simple file loader - size check already done in InputSection.js\n  const handleFileLoad = async (file, target) => {\n    console.log(`üîç Loading file: ${file.name} (${(file.size / 1024 / 1024).toFixed(1)}MB)`);\n\n    // Basic validation\n    if (!file) {\n      showNotification('‚ùå No file selected');\n      return;\n    }\n    if (file.size === 0) {\n      showNotification(`‚ùå File is empty: ${file.name}`, 'error', 5000);\n      return;\n    }\n\n    // File type check\n    const isPDF = file.name.toLowerCase().endsWith('.pdf');\n    const isText = file.type.startsWith('text/') || ['.txt', '.md', '.json', '.js', '.html', '.css', '.xml', '.csv'].some(ext => file.name.toLowerCase().endsWith(ext));\n    if (!isPDF && !isText) {\n      showNotification(`‚ùå Unsupported file type: ${file.name}`, 'error', 5000);\n      return;\n    }\n\n    // Show loading notification\n    showNotification(`üìÅ Loading ${file.name}...`);\n    try {\n      let content = '';\n      if (isPDF) {\n        console.log(`üìÑ Starting PDF extraction for ${file.name}...`);\n        showNotification(`üìÑ Extracting text from PDF: ${file.name}...`);\n        const result = await pdfExtractor.current.extractTextFromPDF(file);\n        if (result.success) {\n          content = result.text;\n          showNotification(`‚úÖ PDF extracted successfully: ${file.name}`);\n          console.log(`‚úÖ PDF extraction completed: ${result.message}`);\n        } else {\n          showNotification(`‚ùå PDF extraction failed: ${result.error}`, 'error', 6000);\n          console.error(`‚ùå PDF extraction error:`, result.error);\n          throw new Error(result.error);\n        }\n      } else {\n        // Handle text files\n        console.log(`üìÑ Reading text file: ${file.name}...`);\n        showNotification(`üìÑ Reading text file: ${file.name}...`);\n        try {\n          content = await new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.onload = e => {\n              console.log(`‚úÖ Text file read successfully`);\n              resolve(e.target.result);\n            };\n            reader.onerror = e => {\n              console.error(`‚ùå FileReader error:`, e);\n              reject(new Error('Failed to read file - file may be corrupted or in an unsupported format'));\n            };\n            reader.readAsText(file, 'UTF-8'); // Specify UTF-8 encoding\n          });\n          showNotification(`‚úÖ Text file loaded: ${file.name}`);\n        } catch (readError) {\n          console.error('Text file reading error:', readError);\n          showNotification(`‚ùå Failed to read file: ${readError.message}`, 'error', 6000);\n          throw readError;\n        }\n      }\n\n      // Validate extracted content\n      if (!content || content.trim().length === 0) {\n        const emptyMessage = `File appears to be empty or contains no readable text: ${file.name}`;\n        showNotification(`‚ö†Ô∏è ${emptyMessage}`, 'warning', 6000);\n        console.log(`‚ö†Ô∏è Empty content warning: ${emptyMessage}`);\n        throw new Error('Empty file content');\n      }\n\n      // Check content size after extraction\n      const contentSizeKB = (content.length / 1024).toFixed(1);\n      console.log(`üìä Extracted content size: ${contentSizeKB}KB`);\n\n      // Set the content to the appropriate text area\n      if (target === 'original') {\n        setOriginalText(content);\n        console.log(`‚úÖ Content set to original text area`);\n      } else {\n        setChangedText(content);\n        console.log(`‚úÖ Content set to changed text area`);\n      }\n\n      // Auto-detect language from filename if enabled\n      if (settings.autoDetectLanguage) {\n        try {\n          const detection = languageDetector.current.autoDetect(content, file.name);\n          setDetectedLanguage(detection);\n          if (detection.language !== 'plaintext') {\n            setSettings(prev => ({\n              ...prev,\n              language: detection.language\n            }));\n            console.log(`üîç Language detected: ${detection.language} (${detection.confidence})`);\n          }\n        } catch (langError) {\n          console.error('Language detection error:', langError);\n          // Don't show notification for language detection errors - not critical\n        }\n      }\n\n      // Trigger live preview if enabled\n      if (settings.livePreview && originalText.trim() && changedText.trim()) {\n        performComparison();\n      }\n\n      // Final success notification\n      const finalMessage = isPDF ? `‚úÖ PDF processed: ${file.name} (${contentSizeKB}KB text extracted)` : `‚úÖ File loaded: ${file.name} (${contentSizeKB}KB)`;\n      showNotification(finalMessage);\n      console.log(`üéâ File processing completed successfully: ${file.name}`);\n      return true;\n    } catch (error) {\n      console.error('File processing error:', error);\n      const errorMessage = `Failed to process file: ${file.name}`;\n      showNotification(`‚ùå ${errorMessage} - ${error.message}`, 'error', 8000);\n      throw error;\n    }\n  };\n\n  // Theme management\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n    localStorage.setItem('quickdiff_theme', newTheme);\n    document.documentElement.setAttribute('data-theme', newTheme);\n    showNotification(`Switched to ${newTheme} theme`);\n  };\n  const toggleContrast = () => {\n    const newContrast = contrast === 'normal' ? 'high' : 'normal';\n    setContrast(newContrast);\n    localStorage.setItem('quickdiff_contrast', newContrast);\n    document.documentElement.setAttribute('data-contrast', newContrast);\n    showNotification(`${newContrast === 'high' ? 'Enabled' : 'Disabled'} high contrast mode`);\n  };\n\n  // Text manipulation functions\n  const clearAll = () => {\n    setOriginalText('');\n    setChangedText('');\n    setShowResults(false);\n    setDiffResult(null);\n    setAiResults([]);\n    setShowAiResults(false);\n\n    // Clear last compared texts\n    setLastComparedOriginal('');\n    setLastComparedChanged('');\n    showNotification('All content cleared');\n  };\n  const swapTexts = () => {\n    const temp = originalText;\n    setOriginalText(changedText);\n    setChangedText(temp);\n    showNotification('Texts swapped');\n    if (settings.livePreview && originalText.trim() && changedText.trim()) {\n      performComparison();\n    }\n  };\n\n  // Export functions\n  const copyResults = () => {\n    exportUtils.current.copyResults(originalText, changedText, aiResults).then(() => showNotification('Results copied to clipboard')).catch(() => showNotification('Failed to copy results'));\n  };\n  const exportToTxt = () => {\n    exportUtils.current.exportToTxt(originalText, changedText, diffResult, aiResults);\n    showNotification('Exported as TXT file');\n  };\n  const exportToHtml = () => {\n    exportUtils.current.exportToHtml(originalText, changedText, diffResult, aiResults);\n    showNotification('Exported as HTML file');\n  };\n  const exportToMarkdown = () => {\n    exportUtils.current.exportToMarkdown(originalText, changedText, diffResult, aiResults);\n    showNotification('Exported as Markdown file');\n  };\n  const exportToPdf = () => {\n    exportUtils.current.exportToPdf(originalText, changedText, diffResult, aiResults);\n    showNotification('Exported as PDF file');\n  };\n\n  // AI functions\n  const generateAIAnalysis = async type => {\n    // Check if both text areas are empty\n    if (!originalText.trim() && !changedText.trim()) {\n      showNotification('‚ùå Please enter text in both areas to analyze');\n      return;\n    }\n\n    // Check if only one text area has content\n    if (!originalText.trim() || !changedText.trim()) {\n      showNotification('‚ùå Please provide text in both Original and Changed areas for AI analysis');\n      return;\n    }\n\n    // Check if texts have been compared first\n    // Ensure current texts match what was last compared\n    if (!showResults || !diffResult || originalText.trim() !== lastComparedOriginal || changedText.trim() !== lastComparedChanged) {\n      showNotification('‚ùå Please compare the current texts first before running AI analysis (Ctrl+Enter)');\n      return;\n    }\n\n    // Check if this analysis type already exists\n    const existingAnalysisIndex = aiResults.findIndex(result => result.type === type);\n    const isRefreshingExisting = existingAnalysisIndex !== -1;\n    setIsGeneratingAI(true);\n    try {\n      if (groqService.current.isConfigured()) {\n        // Use Groq API when configured\n        if (isRefreshingExisting) {\n          showNotification(`üîÑ Refreshing ${type} analysis with Groq...`);\n        } else {\n          showNotification('Generating AI analysis with Groq...');\n        }\n        const analysis = await groqService.current.generateAnalysis(type, originalText, changedText);\n        if (isRefreshingExisting) {\n          // Replace existing analysis\n          setAiResults(prev => prev.map((result, index) => index === existingAnalysisIndex ? analysis : result));\n          showNotification(`‚úÖ ${type} analysis refreshed`);\n        } else {\n          // Add new analysis\n          setAiResults(prev => [...prev, analysis]);\n          showNotification('‚úÖ Groq AI analysis completed');\n        }\n        setShowAiResults(true);\n\n        // Auto-scroll to the latest AI result card\n        setTimeout(() => {\n          const aiCards = document.querySelectorAll('.ai-analysis-card');\n          if (aiCards.length > 0) {\n            // Scroll to the last (newest) AI card\n            const latestCard = aiCards[aiCards.length - 1];\n            latestCard.scrollIntoView({\n              behavior: 'smooth',\n              block: 'start',\n              inline: 'nearest'\n            });\n          }\n        }, 200);\n      } else {\n        // No API configured\n        showNotification('‚ùå Groq API not configured. Please set up your API key.');\n        return;\n      }\n    } catch (error) {\n      console.error('AI Analysis Error:', error);\n      showNotification(`‚ùå Analysis failed: ${error.message}`);\n    } finally {\n      setIsGeneratingAI(false);\n    }\n  };\n  const clearAIResults = () => {\n    setAiResults([]);\n    setShowAiResults(false);\n    showNotification('AI results cleared');\n  };\n  const removeAICard = index => {\n    setAiResults(prev => prev.filter((_, i) => i !== index));\n    showNotification('AI analysis removed');\n\n    // Hide AI results section if no cards left\n    if (aiResults.length <= 1) {\n      setShowAiResults(false);\n    }\n  };\n\n  // Map navigation functions removed\n\n  // Auto-detect language when text changes\n  useEffect(() => {\n    if (settings.autoDetectLanguage && (originalText.trim() || changedText.trim())) {\n      const combinedText = originalText + '\\n' + changedText;\n      const detection = languageDetector.current.autoDetect(combinedText);\n      setDetectedLanguage(detection);\n\n      // Auto-update language setting for ANY detection (including plaintext)\n      if (detection.language !== settings.language) {\n        setSettings(prev => ({\n          ...prev,\n          language: detection.language\n        }));\n\n        // Show notification for language changes\n        if (detection.language === 'plaintext') {\n          console.log('üîç Auto-detected: Plain text');\n        } else {\n          console.log(`üîç Auto-detected: ${detection.language} (${detection.confidence} confidence)`);\n        }\n      }\n    } else if (!settings.autoDetectLanguage) {\n      // Reset to default when auto-detect is disabled\n      setDetectedLanguage({\n        language: 'plaintext',\n        confidence: 'low',\n        method: 'default'\n      });\n    } else if (!originalText.trim() && !changedText.trim()) {\n      // Reset to plaintext when both text areas are empty\n      setDetectedLanguage({\n        language: 'plaintext',\n        confidence: 'high',\n        method: 'empty'\n      });\n      if (settings.language !== 'plaintext') {\n        setSettings(prev => ({\n          ...prev,\n          language: 'plaintext'\n        }));\n      }\n    }\n  }, [originalText, changedText, settings.autoDetectLanguage, settings.language]);\n\n  // Live preview with debouncing\n  useEffect(() => {\n    if (settings.livePreview && originalText.trim() && changedText.trim()) {\n      clearTimeout(debounceTimer.current);\n      debounceTimer.current = setTimeout(() => {\n        performComparison();\n      }, 500);\n    }\n    return () => clearTimeout(debounceTimer.current);\n  }, [originalText, changedText, settings.livePreview, settings.diffMode, settings.ignoreCase, settings.ignoreWhitespace, settings.ignorePunctuation, performComparison]);\n\n  // Keyboard shortcuts\n  useEffect(() => {\n    const handleKeyDown = e => {\n      const isInTextArea = e.target.tagName === 'TEXTAREA' || e.target.tagName === 'INPUT';\n      if (e.ctrlKey || e.metaKey) {\n        switch (e.key.toLowerCase()) {\n          case 'enter':\n            // Always allow Ctrl+Enter for comparison, even in text areas\n            e.preventDefault();\n            performComparison();\n            showNotification('‚å®Ô∏è Ctrl+Enter: Comparison started');\n            break;\n          case 'k':\n            // Always allow Ctrl+K for clear all, even in text areas\n            e.preventDefault();\n            clearAll();\n            showNotification('‚å®Ô∏è Ctrl+K: All content cleared');\n            break;\n          case 's':\n            // Always allow Ctrl+S for swap, even in text areas\n            e.preventDefault();\n            swapTexts();\n            showNotification('‚å®Ô∏è Ctrl+S: Texts swapped');\n            break;\n          case 'c':\n            // Only prevent default for copy results if we have results and not in text area\n            // This allows normal Ctrl+C copy in text areas while still enabling results copy\n            if (showResults && !isInTextArea) {\n              e.preventDefault();\n              copyResults();\n              showNotification('‚å®Ô∏è Ctrl+C: Results copied');\n            }\n            break;\n          case 'd':\n            // Always allow theme toggle, even in text areas\n            e.preventDefault();\n            toggleTheme();\n            showNotification('‚å®Ô∏è Ctrl+D: Theme toggled');\n            break;\n          case 'h':\n            // Always allow contrast toggle, even in text areas\n            e.preventDefault();\n            toggleContrast();\n            showNotification('‚å®Ô∏è Ctrl+H: Contrast toggled');\n            break;\n          case 'm':\n            // Always allow minimap toggle, even in text areas\n            e.preventDefault();\n            toggleMinimap();\n            showNotification('‚å®Ô∏è Ctrl+M: Minimap toggled');\n            break;\n          default:\n            break;\n        }\n      }\n\n      // Handle Alt shortcuts for AI tools\n      if (e.altKey) {\n        switch (e.key) {\n          case '1':\n            // Alt+1 - Explain\n            e.preventDefault();\n            generateAIAnalysis('explain');\n            showNotification('‚å®Ô∏è Alt+1: AI Explain started');\n            break;\n          case '2':\n            // Alt+2 - Rewrite\n            e.preventDefault();\n            generateAIAnalysis('rewrite');\n            showNotification('‚å®Ô∏è Alt+2: AI Rewrite started');\n            break;\n          case '3':\n            // Alt+3 - Summary\n            e.preventDefault();\n            generateAIAnalysis('summary');\n            showNotification('‚å®Ô∏è Alt+3: AI Summary started');\n            break;\n          case '4':\n            // Alt+4 - Tone\n            e.preventDefault();\n            generateAIAnalysis('tone');\n            showNotification('‚å®Ô∏è Alt+4: AI Tone analysis started');\n            break;\n          case '5':\n            // Alt+5 - Cleanup\n            e.preventDefault();\n            generateAIAnalysis('cleanup');\n            showNotification('‚å®Ô∏è Alt+5: AI Cleanup started');\n            break;\n          default:\n            break;\n        }\n      }\n\n      // Handle other shortcuts\n      switch (e.key) {\n        case 'Escape':\n          // Always allow Escape to clear AI results\n          if (showAiResults) {\n            clearAIResults();\n            showNotification('‚å®Ô∏è Escape: AI results cleared');\n          }\n          break;\n        case 'ArrowUp':\n          // Only allow navigation shortcuts when not typing in text areas\n          if (e.ctrlKey && !isInTextArea) {\n            e.preventDefault();\n            navigateToPreviousChange();\n          }\n          break;\n        case 'ArrowDown':\n          // Only allow navigation shortcuts when not typing in text areas\n          if (e.ctrlKey && !isInTextArea) {\n            e.preventDefault();\n            navigateToNextChange();\n          }\n          break;\n        case 'F1':\n          // Always allow F1 for help, even in text areas\n          e.preventDefault();\n          if (userGuide.current) {\n            userGuide.current.showQuickGuide();\n            showNotification('‚å®Ô∏è F1: Quick guide opened');\n          }\n          break;\n        default:\n          break;\n      }\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [showResults, showAiResults, performComparison, clearAll, swapTexts, copyResults, toggleTheme, toggleContrast, toggleMinimap, clearAIResults, navigateToPreviousChange, navigateToNextChange, generateAIAnalysis, showNotification]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quickdiff-app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        onThemeToggle: toggleTheme,\n        onContrastToggle: toggleContrast\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 702,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SettingsPanel, {\n        settings: settings,\n        onSettingsChange: setSettings,\n        detectedLanguage: detectedLanguage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 707,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSection, {\n        originalText: originalText,\n        changedText: changedText,\n        onOriginalTextChange: setOriginalText,\n        onChangedTextChange: setChangedText,\n        onFileLoad: handleFileLoad,\n        showNotification: showNotification\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 713,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {\n        onCompare: performComparison,\n        onClear: clearAll,\n        onSwap: swapTexts,\n        onCopy: copyResults,\n        onExportTxt: exportToTxt,\n        onExportHtml: exportToHtml,\n        onExportMd: exportToMarkdown,\n        onExportPdf: exportToPdf,\n        onAIAnalysis: generateAIAnalysis,\n        hasResults: showResults,\n        isGeneratingAI: isGeneratingAI,\n        groqConfigured: groqService.current.isConfigured()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 722,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 737,\n        columnNumber: 9\n      }, this), showResults && /*#__PURE__*/_jsxDEV(Results, {\n        diffResult: diffResult,\n        settings: settings,\n        aiResults: aiResults,\n        showAiResults: showAiResults,\n        onClearAIResults: clearAIResults,\n        onRemoveAICard: removeAICard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 740,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 701,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 700,\n    columnNumber: 5\n  }, this);\n}\n_s(QuickDiffApp, \"XC1hjsUF87ZBF/49lrQg5+v5C5E=\", false, function () {\n  return [useNotification];\n});\n_c = QuickDiffApp;\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(NotificationProvider, {\n    children: /*#__PURE__*/_jsxDEV(QuickDiffApp, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 757,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 756,\n    columnNumber: 5\n  }, this);\n}\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"QuickDiffApp\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","Header","SettingsPanel","InputSection","Controls","Legend","Results","ReactUserGuide","DiffEngine","ExportUtils","GroqService","LanguageDetector","PDFTextExtractor","NotificationProvider","useNotification","jsxDEV","_jsxDEV","QuickDiffApp","_s","originalText","setOriginalText","changedText","setChangedText","diffResult","setDiffResult","showResults","setShowResults","theme","setTheme","contrast","setContrast","lastComparedOriginal","setLastComparedOriginal","lastComparedChanged","setLastComparedChanged","settings","setSettings","diffMode","viewMode","language","autoDetectLanguage","ignoreCase","ignoreWhitespace","ignorePunctuation","livePreview","detectedLanguage","setDetectedLanguage","confidence","method","aiResults","setAiResults","showAiResults","setShowAiResults","isGeneratingAI","setIsGeneratingAI","window","userGuideInitialized","userGuide","current","destroy","debounceTimer","diffEngine","exportUtils","groqService","languageDetector","pdfExtractor","showNotification","loadSettings","savedSettings","localStorage","getItem","prev","JSON","parse","error","console","saveSettings","setItem","stringify","loadTheme","savedTheme","savedContrast","document","documentElement","setAttribute","log","process","env","REACT_APP_GROQ_API_KEY","debugConfig","testGroq","result","testConnection","success","message","performComparison","trim","setTimeout","resultsElement","getElementById","scrollIntoView","behavior","block","collectChanges","handleFileLoad","file","target","name","size","toFixed","isPDF","toLowerCase","endsWith","isText","type","startsWith","some","ext","content","extractTextFromPDF","text","Error","Promise","resolve","reject","reader","FileReader","onload","e","onerror","readAsText","readError","length","emptyMessage","contentSizeKB","detection","autoDetect","langError","finalMessage","errorMessage","toggleTheme","newTheme","toggleContrast","newContrast","clearAll","swapTexts","temp","copyResults","then","catch","exportToTxt","exportToHtml","exportToMarkdown","exportToPdf","generateAIAnalysis","existingAnalysisIndex","findIndex","isRefreshingExisting","isConfigured","analysis","generateAnalysis","map","index","aiCards","querySelectorAll","latestCard","inline","clearAIResults","removeAICard","filter","_","i","combinedText","clearTimeout","handleKeyDown","isInTextArea","tagName","ctrlKey","metaKey","key","preventDefault","toggleMinimap","altKey","navigateToPreviousChange","navigateToNextChange","showQuickGuide","addEventListener","removeEventListener","className","children","onThemeToggle","onContrastToggle","fileName","_jsxFileName","lineNumber","columnNumber","onSettingsChange","onOriginalTextChange","onChangedTextChange","onFileLoad","onCompare","onClear","onSwap","onCopy","onExportTxt","onExportHtml","onExportMd","onExportPdf","onAIAnalysis","hasResults","groqConfigured","onClearAIResults","onRemoveAICard","_c","App","_c2","$RefreshReg$"],"sources":["C:/Users/Joem/quickdiff-react/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport './App.css';\r\nimport './user-guide.css';\r\nimport Header from './components/Header';\r\nimport SettingsPanel from './components/SettingsPanel';\r\nimport InputSection from './components/InputSection';\r\nimport Controls from './components/Controls';\r\nimport Legend from './components/Legend';\r\nimport Results from './components/Results';\r\nimport ReactUserGuide from './user-guide.js';\r\nimport { DiffEngine } from './utils/DiffEngine';\r\nimport { ExportUtils } from './utils/ExportUtils';\r\nimport { GroqService } from './utils/GroqService';\r\nimport { LanguageDetector } from './utils/LanguageDetector';\r\nimport PDFTextExtractor from './utils/PDFTextExtractor';\r\nimport { NotificationProvider, useNotification } from './components/NotificationProvider';\r\n\r\nfunction QuickDiffApp() {\r\n  // State management\r\n  const [originalText, setOriginalText] = useState('');\r\n  const [changedText, setChangedText] = useState('');\r\n  const [diffResult, setDiffResult] = useState(null);\r\n  const [showResults, setShowResults] = useState(false);\r\n  const [theme, setTheme] = useState('light');\r\n  const [contrast, setContrast] = useState('normal');\r\n  \r\n  // Track last compared texts to prevent AI analysis on uncompared content\r\n  const [lastComparedOriginal, setLastComparedOriginal] = useState('');\r\n  const [lastComparedChanged, setLastComparedChanged] = useState('');\r\n  \r\n  // Settings state\r\n  const [settings, setSettings] = useState({\r\n    diffMode: 'line',\r\n    viewMode: 'side-by-side',\r\n    language: 'plaintext',\r\n    autoDetectLanguage: true,\r\n    ignoreCase: false,\r\n    ignoreWhitespace: false,\r\n    ignorePunctuation: false,\r\n    livePreview: false\r\n  });\r\n\r\n  // Language detection state\r\n  const [detectedLanguage, setDetectedLanguage] = useState({\r\n    language: 'plaintext',\r\n    confidence: 'low',\r\n    method: 'default'\r\n  });\r\n\r\n  // AI state\r\n  const [aiResults, setAiResults] = useState([]);\r\n  const [showAiResults, setShowAiResults] = useState(false);\r\n  const [isGeneratingAI, setIsGeneratingAI] = useState(false);\r\n\r\n  // Navigation state removed (map functionality)\r\n  \r\n  // Initialize user guide\r\n  useEffect(() => {\r\n    if (!window.userGuideInitialized) {\r\n      userGuide.current = new ReactUserGuide();\r\n      window.userGuideInitialized = true;\r\n    }\r\n    \r\n    // Cleanup function\r\n    return () => {\r\n      if (userGuide.current) {\r\n        userGuide.current.destroy();\r\n        userGuide.current = null;\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Refs\r\n  const debounceTimer = useRef(null);\r\n  const diffEngine = useRef(new DiffEngine());\r\n  const exportUtils = useRef(new ExportUtils());\r\n  const groqService = useRef(new GroqService());\r\n  const languageDetector = useRef(new LanguageDetector());\r\n  const pdfExtractor = useRef(new PDFTextExtractor());\r\n  const userGuide = useRef(null);\r\n  \r\n  const { showNotification } = useNotification();\r\n\r\n  // Settings management functions (defined early to avoid hoisting issues)\r\n  const loadSettings = () => {\r\n    try {\r\n      const savedSettings = localStorage.getItem('quickdiff_react_settings');\r\n      if (savedSettings) {\r\n        setSettings(prev => ({ ...prev, ...JSON.parse(savedSettings) }));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading settings:', error);\r\n    }\r\n  };\r\n\r\n  const saveSettings = useCallback(() => {\r\n    try {\r\n      localStorage.setItem('quickdiff_react_settings', JSON.stringify(settings));\r\n    } catch (error) {\r\n      console.error('Error saving settings:', error);\r\n    }\r\n  }, [settings]);\r\n\r\n  const loadTheme = () => {\r\n    const savedTheme = localStorage.getItem('quickdiff_theme') || 'light';\r\n    const savedContrast = localStorage.getItem('quickdiff_contrast') || 'normal';\r\n    setTheme(savedTheme);\r\n    setContrast(savedContrast);\r\n    document.documentElement.setAttribute('data-theme', savedTheme);\r\n    document.documentElement.setAttribute('data-contrast', savedContrast);\r\n  };\r\n\r\n  // Load settings and theme on mount\r\n  useEffect(() => {\r\n    loadSettings();\r\n    loadTheme();\r\n    \r\n    // Debug AI API configurations\r\n    console.log('=== QuickDiff App Debug ===');\r\n    console.log('Environment variables check:');\r\n    console.log('REACT_APP_GROQ_API_KEY:', process.env.REACT_APP_GROQ_API_KEY ? 'Found' : 'Not found');\r\n    \r\n    if (groqService.current) {\r\n      groqService.current.debugConfig();\r\n      \r\n      // Make Groq service available globally for testing\r\n      window.testGroq = async () => {\r\n        console.log('üß™ Testing Groq API...');\r\n        try {\r\n          const result = await groqService.current.testConnection();\r\n          console.log('üß™ Test result:', result);\r\n          return result;\r\n        } catch (error) {\r\n          console.error('üß™ Test failed:', error);\r\n          return { success: false, error: error.message };\r\n        }\r\n      };\r\n      \r\n      console.log('üí° You can test Groq API by running: testGroq() in console');\r\n    }\r\n    console.log('========================');\r\n  }, []);\r\n\r\n  // Auto-save settings when they change\r\n  useEffect(() => {\r\n    saveSettings();\r\n  }, [settings, saveSettings]);\r\n\r\n  // Map-related change collection removed\r\n\r\n  // Main comparison function (defined early to avoid hoisting issues)\r\n  const performComparison = useCallback(() => {\r\n    // Check if both text areas are empty\r\n    if (!originalText.trim() && !changedText.trim()) {\r\n      showNotification('‚ùå Please enter text in both areas to compare');\r\n      return;\r\n    }\r\n    \r\n    // Check if only one text area has content\r\n    if (!originalText.trim() || !changedText.trim()) {\r\n      showNotification('‚ùå Please provide text in both Original and Changed areas for comparison');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const result = diffEngine.current.performComparison(\r\n        originalText,\r\n        changedText,\r\n        settings\r\n      );\r\n\r\n      console.log('Diff Result:', result); // Debug log\r\n      setDiffResult(result);\r\n      setShowResults(true);\r\n      \r\n      // Store the texts that were just compared\r\n      setLastComparedOriginal(originalText.trim());\r\n      setLastComparedChanged(changedText.trim());\r\n      \r\n      // Auto-generate AI analysis is disabled to prevent duplicate results\r\n      // Users can manually trigger AI analysis using the AI buttons\r\n      \r\n      // Auto-scroll to results only if live preview is disabled\r\n      if (!settings.livePreview) {\r\n        setTimeout(() => {\r\n          const resultsElement = document.getElementById('results-section');\r\n          if (resultsElement) {\r\n            resultsElement.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n          }\r\n        }, 100);\r\n      }\r\n\r\n      showNotification('Comparison completed');\r\n    } catch (error) {\r\n      console.error('Comparison error:', error);\r\n      showNotification('Error performing comparison');\r\n    }\r\n  }, [originalText, changedText, settings, showNotification, collectChanges]);\r\n\r\n\r\n  // NEW: Simple file loader - size check already done in InputSection.js\r\nconst handleFileLoad = async (file, target) => {\r\n  console.log(`üîç Loading file: ${file.name} (${(file.size / 1024 / 1024).toFixed(1)}MB)`);\r\n  \r\n  // Basic validation\r\n  if (!file) {\r\n    showNotification('‚ùå No file selected');\r\n    return;\r\n  }\r\n  \r\n  if (file.size === 0) {\r\n    showNotification(`‚ùå File is empty: ${file.name}`, 'error', 5000);\r\n    return;\r\n  }\r\n  \r\n  // File type check\r\n  const isPDF = file.name.toLowerCase().endsWith('.pdf');\r\n  const isText = file.type.startsWith('text/') || \r\n                 ['.txt', '.md', '.json', '.js', '.html', '.css', '.xml', '.csv'].some(ext => \r\n                   file.name.toLowerCase().endsWith(ext));\r\n  \r\n  if (!isPDF && !isText) {\r\n    showNotification(`‚ùå Unsupported file type: ${file.name}`, 'error', 5000);\r\n    return;\r\n  }\r\n  \r\n  // Show loading notification\r\n  showNotification(`üìÅ Loading ${file.name}...`);\r\n  \r\n  try {\r\n    let content = '';\r\n    \r\n    if (isPDF) {\r\n      console.log(`üìÑ Starting PDF extraction for ${file.name}...`);\r\n      showNotification(`üìÑ Extracting text from PDF: ${file.name}...`);\r\n      \r\n      const result = await pdfExtractor.current.extractTextFromPDF(file);\r\n      \r\n      if (result.success) {\r\n        content = result.text;\r\n        showNotification(`‚úÖ PDF extracted successfully: ${file.name}`);\r\n        console.log(`‚úÖ PDF extraction completed: ${result.message}`);\r\n      } else {\r\n        showNotification(`‚ùå PDF extraction failed: ${result.error}`, 'error', 6000);\r\n        console.error(`‚ùå PDF extraction error:`, result.error);\r\n        throw new Error(result.error);\r\n      }\r\n    } else {\r\n      // Handle text files\r\n      console.log(`üìÑ Reading text file: ${file.name}...`);\r\n      showNotification(`üìÑ Reading text file: ${file.name}...`);\r\n      \r\n      try {\r\n        content = await new Promise((resolve, reject) => {\r\n          const reader = new FileReader();\r\n          reader.onload = (e) => {\r\n            console.log(`‚úÖ Text file read successfully`);\r\n            resolve(e.target.result);\r\n          };\r\n          reader.onerror = (e) => {\r\n            console.error(`‚ùå FileReader error:`, e);\r\n            reject(new Error('Failed to read file - file may be corrupted or in an unsupported format'));\r\n          };\r\n          reader.readAsText(file, 'UTF-8'); // Specify UTF-8 encoding\r\n        });\r\n        \r\n        showNotification(`‚úÖ Text file loaded: ${file.name}`);\r\n      } catch (readError) {\r\n        console.error('Text file reading error:', readError);\r\n        showNotification(`‚ùå Failed to read file: ${readError.message}`, 'error', 6000);\r\n        throw readError;\r\n      }\r\n    }\r\n    \r\n    // Validate extracted content\r\n    if (!content || content.trim().length === 0) {\r\n      const emptyMessage = `File appears to be empty or contains no readable text: ${file.name}`;\r\n      showNotification(`‚ö†Ô∏è ${emptyMessage}`, 'warning', 6000);\r\n      console.log(`‚ö†Ô∏è Empty content warning: ${emptyMessage}`);\r\n      throw new Error('Empty file content');\r\n    }\r\n    \r\n    // Check content size after extraction\r\n    const contentSizeKB = (content.length / 1024).toFixed(1);\r\n    console.log(`üìä Extracted content size: ${contentSizeKB}KB`);\r\n    \r\n    // Set the content to the appropriate text area\r\n    if (target === 'original') {\r\n      setOriginalText(content);\r\n      console.log(`‚úÖ Content set to original text area`);\r\n    } else {\r\n      setChangedText(content);\r\n      console.log(`‚úÖ Content set to changed text area`);\r\n    }\r\n    \r\n    // Auto-detect language from filename if enabled\r\n    if (settings.autoDetectLanguage) {\r\n      try {\r\n        const detection = languageDetector.current.autoDetect(content, file.name);\r\n        setDetectedLanguage(detection);\r\n        \r\n        if (detection.language !== 'plaintext') {\r\n          setSettings(prev => ({\r\n            ...prev,\r\n            language: detection.language\r\n          }));\r\n          console.log(`üîç Language detected: ${detection.language} (${detection.confidence})`);\r\n        }\r\n      } catch (langError) {\r\n        console.error('Language detection error:', langError);\r\n        // Don't show notification for language detection errors - not critical\r\n      }\r\n    }\r\n    \r\n    // Trigger live preview if enabled\r\n    if (settings.livePreview && originalText.trim() && changedText.trim()) {\r\n      performComparison();\r\n    }\r\n    \r\n    // Final success notification\r\n    const finalMessage = isPDF \r\n      ? `‚úÖ PDF processed: ${file.name} (${contentSizeKB}KB text extracted)`\r\n      : `‚úÖ File loaded: ${file.name} (${contentSizeKB}KB)`;\r\n    \r\n    showNotification(finalMessage);\r\n    console.log(`üéâ File processing completed successfully: ${file.name}`);\r\n    \r\n    return true;\r\n    \r\n  } catch (error) {\r\n    console.error('File processing error:', error);\r\n    const errorMessage = `Failed to process file: ${file.name}`;\r\n    showNotification(`‚ùå ${errorMessage} - ${error.message}`, 'error', 8000);\r\n    throw error;\r\n  }\r\n};\r\n\r\n  // Theme management\r\n  const toggleTheme = () => {\r\n    const newTheme = theme === 'light' ? 'dark' : 'light';\r\n    setTheme(newTheme);\r\n    localStorage.setItem('quickdiff_theme', newTheme);\r\n    document.documentElement.setAttribute('data-theme', newTheme);\r\n    showNotification(`Switched to ${newTheme} theme`);\r\n  };\r\n\r\n  const toggleContrast = () => {\r\n    const newContrast = contrast === 'normal' ? 'high' : 'normal';\r\n    setContrast(newContrast);\r\n    localStorage.setItem('quickdiff_contrast', newContrast);\r\n    document.documentElement.setAttribute('data-contrast', newContrast);\r\n    showNotification(`${newContrast === 'high' ? 'Enabled' : 'Disabled'} high contrast mode`);\r\n  };\r\n\r\n  // Text manipulation functions\r\n  const clearAll = () => {\r\n    setOriginalText('');\r\n    setChangedText('');\r\n    setShowResults(false);\r\n    setDiffResult(null);\r\n    setAiResults([]);\r\n    setShowAiResults(false);\r\n    \r\n    // Clear last compared texts\r\n    setLastComparedOriginal('');\r\n    setLastComparedChanged('');\r\n    \r\n    showNotification('All content cleared');\r\n  };\r\n\r\n  const swapTexts = () => {\r\n    const temp = originalText;\r\n    setOriginalText(changedText);\r\n    setChangedText(temp);\r\n    showNotification('Texts swapped');\r\n    \r\n    if (settings.livePreview && originalText.trim() && changedText.trim()) {\r\n      performComparison();\r\n    }\r\n  };\r\n\r\n  // Export functions\r\n  const copyResults = () => {\r\n    exportUtils.current.copyResults(originalText, changedText, aiResults)\r\n      .then(() => showNotification('Results copied to clipboard'))\r\n      .catch(() => showNotification('Failed to copy results'));\r\n  };\r\n\r\n  const exportToTxt = () => {\r\n    exportUtils.current.exportToTxt(originalText, changedText, diffResult, aiResults);\r\n    showNotification('Exported as TXT file');\r\n  };\r\n\r\n  const exportToHtml = () => {\r\n    exportUtils.current.exportToHtml(originalText, changedText, diffResult, aiResults);\r\n    showNotification('Exported as HTML file');\r\n  };\r\n\r\n  const exportToMarkdown = () => {\r\n    exportUtils.current.exportToMarkdown(originalText, changedText, diffResult, aiResults);\r\n    showNotification('Exported as Markdown file');\r\n  };\r\n\r\n  const exportToPdf = () => {\r\n    exportUtils.current.exportToPdf(originalText, changedText, diffResult, aiResults);\r\n    showNotification('Exported as PDF file');\r\n  };\r\n\r\n  // AI functions\r\n  const generateAIAnalysis = async (type) => {\r\n    // Check if both text areas are empty\r\n    if (!originalText.trim() && !changedText.trim()) {\r\n      showNotification('‚ùå Please enter text in both areas to analyze');\r\n      return;\r\n    }\r\n    \r\n    // Check if only one text area has content\r\n    if (!originalText.trim() || !changedText.trim()) {\r\n      showNotification('‚ùå Please provide text in both Original and Changed areas for AI analysis');\r\n      return;\r\n    }\r\n\r\n    // Check if texts have been compared first\r\n    // Ensure current texts match what was last compared\r\n    if (!showResults || !diffResult || \r\n        originalText.trim() !== lastComparedOriginal || \r\n        changedText.trim() !== lastComparedChanged) {\r\n      showNotification('‚ùå Please compare the current texts first before running AI analysis (Ctrl+Enter)');\r\n      return;\r\n    }\r\n\r\n    // Check if this analysis type already exists\r\n    const existingAnalysisIndex = aiResults.findIndex(result => result.type === type);\r\n    const isRefreshingExisting = existingAnalysisIndex !== -1;\r\n\r\n    setIsGeneratingAI(true);\r\n    try {\r\n      if (groqService.current.isConfigured()) {\r\n        // Use Groq API when configured\r\n        if (isRefreshingExisting) {\r\n          showNotification(`üîÑ Refreshing ${type} analysis with Groq...`);\r\n        } else {\r\n          showNotification('Generating AI analysis with Groq...');\r\n        }\r\n        \r\n        const analysis = await groqService.current.generateAnalysis(type, originalText, changedText);\r\n        \r\n        if (isRefreshingExisting) {\r\n          // Replace existing analysis\r\n          setAiResults(prev => prev.map((result, index) => \r\n            index === existingAnalysisIndex ? analysis : result\r\n          ));\r\n          showNotification(`‚úÖ ${type} analysis refreshed`);\r\n        } else {\r\n          // Add new analysis\r\n          setAiResults(prev => [...prev, analysis]);\r\n          showNotification('‚úÖ Groq AI analysis completed');\r\n        }\r\n        \r\n        setShowAiResults(true);\r\n        \r\n        // Auto-scroll to the latest AI result card\r\n        setTimeout(() => {\r\n          const aiCards = document.querySelectorAll('.ai-analysis-card');\r\n          if (aiCards.length > 0) {\r\n            // Scroll to the last (newest) AI card\r\n            const latestCard = aiCards[aiCards.length - 1];\r\n            latestCard.scrollIntoView({ \r\n              behavior: 'smooth', \r\n              block: 'start',\r\n              inline: 'nearest'\r\n            });\r\n          }\r\n        }, 200);\r\n        \r\n      } else {\r\n        // No API configured\r\n        showNotification('‚ùå Groq API not configured. Please set up your API key.');\r\n        return;\r\n      }\r\n    } catch (error) {\r\n      console.error('AI Analysis Error:', error);\r\n      showNotification(`‚ùå Analysis failed: ${error.message}`);\r\n    } finally {\r\n      setIsGeneratingAI(false);\r\n    }\r\n  };\r\n\r\n  const clearAIResults = () => {\r\n    setAiResults([]);\r\n    setShowAiResults(false);\r\n    showNotification('AI results cleared');\r\n  };\r\n\r\n  const removeAICard = (index) => {\r\n    setAiResults(prev => prev.filter((_, i) => i !== index));\r\n    showNotification('AI analysis removed');\r\n    \r\n    // Hide AI results section if no cards left\r\n    if (aiResults.length <= 1) {\r\n      setShowAiResults(false);\r\n    }\r\n  };\r\n\r\n  // Map navigation functions removed\r\n\r\n  // Auto-detect language when text changes\r\n  useEffect(() => {\r\n    if (settings.autoDetectLanguage && (originalText.trim() || changedText.trim())) {\r\n      const combinedText = originalText + '\\n' + changedText;\r\n      const detection = languageDetector.current.autoDetect(combinedText);\r\n      \r\n      setDetectedLanguage(detection);\r\n      \r\n      // Auto-update language setting for ANY detection (including plaintext)\r\n      if (detection.language !== settings.language) {\r\n        setSettings(prev => ({\r\n          ...prev,\r\n          language: detection.language\r\n        }));\r\n        \r\n        // Show notification for language changes\r\n        if (detection.language === 'plaintext') {\r\n          console.log('üîç Auto-detected: Plain text');\r\n        } else {\r\n          console.log(`üîç Auto-detected: ${detection.language} (${detection.confidence} confidence)`);\r\n        }\r\n      }\r\n    } else if (!settings.autoDetectLanguage) {\r\n      // Reset to default when auto-detect is disabled\r\n      setDetectedLanguage({\r\n        language: 'plaintext',\r\n        confidence: 'low',\r\n        method: 'default'\r\n      });\r\n    } else if (!originalText.trim() && !changedText.trim()) {\r\n      // Reset to plaintext when both text areas are empty\r\n      setDetectedLanguage({\r\n        language: 'plaintext',\r\n        confidence: 'high',\r\n        method: 'empty'\r\n      });\r\n      if (settings.language !== 'plaintext') {\r\n        setSettings(prev => ({\r\n          ...prev,\r\n          language: 'plaintext'\r\n        }));\r\n      }\r\n    }\r\n  }, [originalText, changedText, settings.autoDetectLanguage, settings.language]);\r\n\r\n  // Live preview with debouncing\r\n  useEffect(() => {\r\n    if (settings.livePreview && originalText.trim() && changedText.trim()) {\r\n      clearTimeout(debounceTimer.current);\r\n      debounceTimer.current = setTimeout(() => {\r\n        performComparison();\r\n      }, 500);\r\n    }\r\n    \r\n    return () => clearTimeout(debounceTimer.current);\r\n  }, [originalText, changedText, settings.livePreview, settings.diffMode, settings.ignoreCase, settings.ignoreWhitespace, settings.ignorePunctuation, performComparison]);\r\n\r\n  // Keyboard shortcuts\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      const isInTextArea = e.target.tagName === 'TEXTAREA' || e.target.tagName === 'INPUT';\r\n      \r\n      if (e.ctrlKey || e.metaKey) {\r\n        switch (e.key.toLowerCase()) {\r\n          case 'enter':\r\n            // Always allow Ctrl+Enter for comparison, even in text areas\r\n            e.preventDefault();\r\n            performComparison();\r\n            showNotification('‚å®Ô∏è Ctrl+Enter: Comparison started');\r\n            break;\r\n          case 'k':\r\n            // Always allow Ctrl+K for clear all, even in text areas\r\n            e.preventDefault();\r\n            clearAll();\r\n            showNotification('‚å®Ô∏è Ctrl+K: All content cleared');\r\n            break;\r\n          case 's':\r\n            // Always allow Ctrl+S for swap, even in text areas\r\n            e.preventDefault();\r\n            swapTexts();\r\n            showNotification('‚å®Ô∏è Ctrl+S: Texts swapped');\r\n            break;\r\n          case 'c':\r\n            // Only prevent default for copy results if we have results and not in text area\r\n            // This allows normal Ctrl+C copy in text areas while still enabling results copy\r\n            if (showResults && !isInTextArea) {\r\n              e.preventDefault();\r\n              copyResults();\r\n              showNotification('‚å®Ô∏è Ctrl+C: Results copied');\r\n            }\r\n            break;\r\n          case 'd':\r\n            // Always allow theme toggle, even in text areas\r\n            e.preventDefault();\r\n            toggleTheme();\r\n            showNotification('‚å®Ô∏è Ctrl+D: Theme toggled');\r\n            break;\r\n          case 'h':\r\n            // Always allow contrast toggle, even in text areas\r\n            e.preventDefault();\r\n            toggleContrast();\r\n            showNotification('‚å®Ô∏è Ctrl+H: Contrast toggled');\r\n            break;\r\n          case 'm':\r\n            // Always allow minimap toggle, even in text areas\r\n            e.preventDefault();\r\n            toggleMinimap();\r\n            showNotification('‚å®Ô∏è Ctrl+M: Minimap toggled');\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n      \r\n      // Handle Alt shortcuts for AI tools\r\n      if (e.altKey) {\r\n        switch (e.key) {\r\n          case '1':\r\n            // Alt+1 - Explain\r\n            e.preventDefault();\r\n            generateAIAnalysis('explain');\r\n            showNotification('‚å®Ô∏è Alt+1: AI Explain started');\r\n            break;\r\n          case '2':\r\n            // Alt+2 - Rewrite\r\n            e.preventDefault();\r\n            generateAIAnalysis('rewrite');\r\n            showNotification('‚å®Ô∏è Alt+2: AI Rewrite started');\r\n            break;\r\n          case '3':\r\n            // Alt+3 - Summary\r\n            e.preventDefault();\r\n            generateAIAnalysis('summary');\r\n            showNotification('‚å®Ô∏è Alt+3: AI Summary started');\r\n            break;\r\n          case '4':\r\n            // Alt+4 - Tone\r\n            e.preventDefault();\r\n            generateAIAnalysis('tone');\r\n            showNotification('‚å®Ô∏è Alt+4: AI Tone analysis started');\r\n            break;\r\n          case '5':\r\n            // Alt+5 - Cleanup\r\n            e.preventDefault();\r\n            generateAIAnalysis('cleanup');\r\n            showNotification('‚å®Ô∏è Alt+5: AI Cleanup started');\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n      \r\n      // Handle other shortcuts\r\n      switch (e.key) {\r\n        case 'Escape':\r\n          // Always allow Escape to clear AI results\r\n          if (showAiResults) {\r\n            clearAIResults();\r\n            showNotification('‚å®Ô∏è Escape: AI results cleared');\r\n          }\r\n          break;\r\n        case 'ArrowUp':\r\n          // Only allow navigation shortcuts when not typing in text areas\r\n          if (e.ctrlKey && !isInTextArea) {\r\n            e.preventDefault();\r\n            navigateToPreviousChange();\r\n          }\r\n          break;\r\n        case 'ArrowDown':\r\n          // Only allow navigation shortcuts when not typing in text areas\r\n          if (e.ctrlKey && !isInTextArea) {\r\n            e.preventDefault();\r\n            navigateToNextChange();\r\n          }\r\n          break;\r\n        case 'F1':\r\n          // Always allow F1 for help, even in text areas\r\n          e.preventDefault();\r\n          if (userGuide.current) {\r\n            userGuide.current.showQuickGuide();\r\n            showNotification('‚å®Ô∏è F1: Quick guide opened');\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', handleKeyDown);\r\n    return () => document.removeEventListener('keydown', handleKeyDown);\r\n  }, [showResults, showAiResults, performComparison, clearAll, swapTexts, copyResults, toggleTheme, toggleContrast, toggleMinimap, clearAIResults, navigateToPreviousChange, navigateToNextChange, generateAIAnalysis, showNotification]);\r\n\r\n  return (\r\n    <div className=\"quickdiff-app\">\r\n      <div className=\"container\">\r\n        <Header \r\n          onThemeToggle={toggleTheme}\r\n          onContrastToggle={toggleContrast}\r\n        />\r\n        \r\n        <SettingsPanel \r\n          settings={settings}\r\n          onSettingsChange={setSettings}\r\n          detectedLanguage={detectedLanguage}\r\n        />\r\n        \r\n        <InputSection\r\n          originalText={originalText}\r\n          changedText={changedText}\r\n          onOriginalTextChange={setOriginalText}\r\n          onChangedTextChange={setChangedText}\r\n          onFileLoad={handleFileLoad}\r\n          showNotification={showNotification}\r\n        />\r\n        \r\n        <Controls\r\n          onCompare={performComparison}\r\n          onClear={clearAll}\r\n          onSwap={swapTexts}\r\n          onCopy={copyResults}\r\n          onExportTxt={exportToTxt}\r\n          onExportHtml={exportToHtml}\r\n          onExportMd={exportToMarkdown}\r\n          onExportPdf={exportToPdf}\r\n          onAIAnalysis={generateAIAnalysis}\r\n          hasResults={showResults}\r\n          isGeneratingAI={isGeneratingAI}\r\n          groqConfigured={groqService.current.isConfigured()}\r\n        />\r\n        \r\n        <Legend />\r\n        \r\n        {showResults && (\r\n          <Results\r\n            diffResult={diffResult}\r\n            settings={settings}\r\n            aiResults={aiResults}\r\n            showAiResults={showAiResults}\r\n            onClearAIResults={clearAIResults}\r\n            onRemoveAICard={removeAICard}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <NotificationProvider>\r\n      <QuickDiffApp />\r\n    </NotificationProvider>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}