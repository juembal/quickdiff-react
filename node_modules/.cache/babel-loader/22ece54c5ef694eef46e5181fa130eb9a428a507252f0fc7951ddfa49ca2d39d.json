{"ast":null,"code":"/**\r\n * Groq API Service for QuickDiff React App\r\n * Fast, reliable, and free AI API for text analysis\r\n * Get your free API key at: https://console.groq.com/\r\n */\n\nexport class GroqService {\n  constructor() {\n    this.config = {\n      apiKey: process.env.REACT_APP_GROQ_API_KEY || '',\n      // Groq API key from environment\n      baseUrl: 'https://api.groq.com/openai/v1/chat/completions',\n      model: 'llama-3.1-8b-instant',\n      // Fast and reliable model\n      maxTokens: 1000,\n      temperature: 0.7\n    };\n    this.loadConfig();\n  }\n  loadConfig() {\n    try {\n      const savedConfig = localStorage.getItem('quickdiff_groq_config');\n      if (savedConfig) {\n        const parsedConfig = JSON.parse(savedConfig);\n        delete parsedConfig.apiKey; // Don't override API key from environment\n        this.config = {\n          ...this.config,\n          ...parsedConfig\n        };\n      }\n\n      // Ensure environment variable always takes precedence\n      const envApiKey = process.env.REACT_APP_GROQ_API_KEY;\n      if (envApiKey) {\n        this.config.apiKey = envApiKey;\n      }\n    } catch (error) {\n      console.error('Error loading Groq config:', error);\n    }\n  }\n\n  // Check if Groq is properly configured\n  isConfigured() {\n    const hasKey = this.config.apiKey && this.config.apiKey.trim().length > 0;\n    const isValidKey = this.config.apiKey && this.config.apiKey.startsWith('gsk_');\n    const configured = hasKey && isValidKey;\n    console.log('🔍 Groq isConfigured check:', {\n      envVar: process.env.REACT_APP_GROQ_API_KEY ? 'Found' : 'Not found',\n      hasApiKey: !!this.config.apiKey,\n      apiKeyLength: this.config.apiKey ? this.config.apiKey.length : 0,\n      apiKeyPreview: this.config.apiKey ? `${this.config.apiKey.substring(0, 10)}...` : 'none',\n      startsWithGsk: isValidKey,\n      configured: configured\n    });\n    return configured;\n  }\n\n  // Call Groq API\n  async callGroqAPI(messages) {\n    console.log('🌐 Making Groq API call...');\n    console.log('🔑 Using API key:', this.config.apiKey ? `${this.config.apiKey.substring(0, 10)}...` : 'NONE');\n    const response = await fetch(this.config.baseUrl, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${this.config.apiKey}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        model: this.config.model,\n        messages: messages,\n        max_tokens: this.config.maxTokens,\n        temperature: this.config.temperature\n      })\n    });\n    console.log('📥 Response status:', response.status);\n    if (!response.ok) {\n      const error = await response.text();\n      console.error('❌ Groq API Error Response:', error);\n      throw new Error(`Groq API error: ${response.status} - ${error}`);\n    }\n    const result = await response.json();\n    console.log('✅ Groq API Success');\n    return result.choices[0].message.content;\n  }\n\n  // Generate analysis using Groq\n  async generateAnalysis(type, originalText, changedText) {\n    console.log('🚀 generateAnalysis called with type:', type);\n    console.log('🔧 isConfigured():', this.isConfigured());\n    if (!this.isConfigured()) {\n      console.log('❌ Groq API not configured, throwing error');\n      throw new Error('Groq API not configured. Please set up your API token.');\n    }\n    console.log('✅ Groq API configured, proceeding with analysis...');\n    try {\n      let analysis;\n      switch (type) {\n        case 'explain':\n          analysis = await this.generateExplanation(originalText, changedText);\n          break;\n        case 'rewrite':\n          analysis = await this.generateRewriteSuggestions(originalText, changedText);\n          break;\n        case 'summary':\n          analysis = await this.generateSummary(originalText, changedText);\n          break;\n        case 'tone':\n          analysis = await this.generateToneAnalysis(originalText, changedText);\n          break;\n        case 'cleanup':\n          analysis = await this.generateCleanupAnalysis(originalText, changedText);\n          break;\n        default:\n          analysis = await this.generateExplanation(originalText, changedText);\n      }\n      console.log('✅ Analysis generated successfully');\n      return this.formatResponse(type, analysis);\n    } catch (error) {\n      console.error('❌ Groq API Error:', error);\n      throw new Error(`Failed to generate ${type} analysis: ${error.message}`);\n    }\n  }\n\n  // Generate explanation analysis\n  async generateExplanation(originalText, changedText) {\n    console.log('📝 Generating explanation with Groq...');\n    const stats = this.calculateTextStats(originalText, changedText);\n    const messages = [{\n      role: \"system\",\n      content: \"You are an expert text analyst. Analyze the differences between two texts and provide clear, insightful explanations.\"\n    }, {\n      role: \"user\",\n      content: `Compare these two texts and explain the key differences:\n\nOriginal Text: \"${originalText.substring(0, 300)}${originalText.length > 300 ? '...' : ''}\"\n\nChanged Text: \"${changedText.substring(0, 300)}${changedText.length > 300 ? '...' : ''}\"\n\nPlease provide a detailed analysis of the differences, changes in meaning, style, and content structure.`\n    }];\n    try {\n      const aiInsight = await this.callGroqAPI(messages);\n      console.log('✅ Groq explanation received');\n      return `\n        <div class=\"ai-explanation\">\n          <div class=\"ai-header\">\n            <h4>📊 Groq AI Text Analysis</h4>\n          </div>\n          \n          <div class=\"ai-section\">\n            <h5 class=\"section-title\">📈 Text Statistics</h5>\n            <div class=\"stats-grid\">\n              <div class=\"stat-card\">\n                <div class=\"stat-label\">Original Text</div>\n                <div class=\"stat-value\">${stats.originalLines} lines • ${stats.originalWords} words • ${stats.originalChars} chars</div>\n              </div>\n              <div class=\"stat-card\">\n                <div class=\"stat-label\">Changed Text</div>\n                <div class=\"stat-value\">${stats.changedLines} lines • ${stats.changedWords} words • ${stats.changedChars} chars</div>\n              </div>\n              <div class=\"stat-card\">\n                <div class=\"stat-label\">Net Changes</div>\n                <div class=\"stat-value\">\n                  ${Math.abs(stats.changedLines - stats.originalLines)} lines • \n                  ${Math.abs(stats.changedWords - stats.originalWords)} words • \n                  ${Math.abs(stats.changedChars - stats.originalChars)} chars\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <div class=\"ai-section\">\n            <h5 class=\"section-title\">🤖 AI Analysis</h5>\n            <div class=\"ai-insight-box\">\n              ${this.formatAIResponse(aiInsight)}\n            </div>\n          </div>\n          \n          <div class=\"ai-section\">\n            <h5 class=\"section-title\">🔍 Key Findings</h5>\n            <div class=\"findings-list\">\n              ${stats.originalLines !== stats.changedLines ? `<div class=\"finding-item\">📄 Line count: ${stats.originalLines} → ${stats.changedLines}</div>` : ''}\n              ${stats.originalWords !== stats.changedWords ? `<div class=\"finding-item\">📝 Word count: ${stats.originalWords} → ${stats.changedWords}</div>` : ''}\n              ${originalText === changedText ? '<div class=\"finding-item\">✅ No changes detected - texts are identical</div>' : ''}\n              ${Math.abs(stats.changedChars - stats.originalChars) > stats.originalChars * 0.5 ? '<div class=\"finding-item\">⚠️ Significant content change detected (>50%)</div>' : ''}\n              ${Math.abs(stats.changedChars - stats.originalChars) < stats.originalChars * 0.1 ? '<div class=\"finding-item\">✨ Minor changes detected (<10%)</div>' : ''}\n            </div>\n          </div>\n        </div>\n      `;\n    } catch (error) {\n      console.error('❌ Groq API failed for explanation:', error);\n      throw error;\n    }\n  }\n\n  // Generate rewrite suggestions\n  async generateRewriteSuggestions(originalText, changedText) {\n    console.log('✨ Generating rewrite suggestions with Groq...');\n    const combinedText = originalText + ' ' + changedText;\n    const messages = [{\n      role: \"system\",\n      content: \"You are an expert writing coach. Provide specific, actionable suggestions to improve text clarity, style, and readability.\"\n    }, {\n      role: \"user\",\n      content: `Please analyze this text and provide specific rewrite suggestions to improve clarity, style, and readability:\n\n\"${combinedText.substring(0, 400)}${combinedText.length > 400 ? '...' : ''}\"\n\nProvide concrete suggestions for improvement, including specific examples where possible.`\n    }];\n    try {\n      const suggestions = await this.callGroqAPI(messages);\n      console.log('✅ Groq rewrite suggestions received');\n      return `\n        <div class=\"ai-rewrite\">\n          <div class=\"ai-header\">\n            <h4>✨ Groq AI Rewrite Suggestions</h4>\n          </div>\n          \n          <div class=\"ai-section\">\n            <h5 class=\"section-title\">🎯 AI-Generated Suggestions</h5>\n            <div class=\"suggestions-box\">\n              ${this.formatAIResponse(suggestions)}\n            </div>\n          </div>\n          \n          <div class=\"ai-section\">\n            <h5 class=\"section-title\">📝 Writing Best Practices</h5>\n            <div class=\"tips-grid\">\n              <div class=\"tip-item\">\n                <div class=\"tip-icon\">🎯</div>\n                <div class=\"tip-content\">\n                  <strong>Clarity:</strong> Use clear, concise language and avoid jargon\n                </div>\n              </div>\n              <div class=\"tip-item\">\n                <div class=\"tip-icon\">📏</div>\n                <div class=\"tip-content\">\n                  <strong>Structure:</strong> Break up long sentences for better readability\n                </div>\n              </div>\n              <div class=\"tip-item\">\n                <div class=\"tip-icon\">💪</div>\n                <div class=\"tip-content\">\n                  <strong>Voice:</strong> Use active voice when possible\n                </div>\n              </div>\n              <div class=\"tip-item\">\n                <div class=\"tip-icon\">🔄</div>\n                <div class=\"tip-content\">\n                  <strong>Consistency:</strong> Ensure consistent terminology throughout\n                </div>\n              </div>\n              <div class=\"tip-item\">\n                <div class=\"tip-icon\">🌊</div>\n                <div class=\"tip-content\">\n                  <strong>Flow:</strong> Add transitional phrases for better flow\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      `;\n    } catch (error) {\n      console.error('❌ Groq API failed for rewrite suggestions:', error);\n      throw error;\n    }\n  }\n\n  // Generate summary\n  async generateSummary(originalText, changedText) {\n    console.log('📄 Generating summary with Groq...');\n    const combinedText = originalText + '\\n\\n' + changedText;\n    const messages = [{\n      role: \"system\",\n      content: \"You are an expert at creating concise, informative summaries. Focus on the key points and main ideas.\"\n    }, {\n      role: \"user\",\n      content: `Please provide a concise summary of these texts, highlighting the main points and any key differences:\n\n\"${combinedText.substring(0, 500)}${combinedText.length > 500 ? '...' : ''}\"\n\nFocus on the most important information and any significant changes between versions.`\n    }];\n    try {\n      const summary = await this.callGroqAPI(messages);\n      console.log('✅ Groq summary received');\n      return `\n        <div class=\"ai-summary\">\n          <div class=\"ai-header\">\n            <h4>📝 Groq AI Summary</h4>\n          </div>\n          \n          <div class=\"ai-section\">\n            <h5 class=\"section-title\">📄 Key Points Summary</h5>\n            <div class=\"summary-box\">\n              ${this.formatAIResponse(summary, 'summary')}\n            </div>\n          </div>\n          \n          <div class=\"ai-section\">\n            <h5 class=\"section-title\">📊 Document Overview</h5>\n            <div class=\"overview-stats\">\n              <div class=\"overview-item\">\n                <span class=\"overview-label\">📏 Combined Length:</span>\n                <span class=\"overview-value\">${combinedText.length} characters</span>\n              </div>\n              <div class=\"overview-item\">\n                <span class=\"overview-label\">🔍 Analysis Scope:</span>\n                <span class=\"overview-value\">Both original and changed versions</span>\n              </div>\n              <div class=\"overview-item\">\n                <span class=\"overview-label\">🎯 Focus:</span>\n                <span class=\"overview-value\">Main points and key differences</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      `;\n    } catch (error) {\n      console.error('❌ Groq API failed for summary:', error);\n      throw error;\n    }\n  }\n\n  // Generate tone analysis\n  async generateToneAnalysis(originalText, changedText) {\n    console.log('🎭 Generating tone analysis with Groq...');\n    const messages = [{\n      role: \"system\",\n      content: \"You are an expert in linguistic analysis and tone assessment. Analyze the emotional tone, formality level, and overall sentiment of texts.\"\n    }, {\n      role: \"user\",\n      content: `Please analyze the tone and sentiment of these texts:\n\nOriginal Text: \"${originalText.substring(0, 300)}${originalText.length > 300 ? '...' : ''}\"\n\nChanged Text: \"${changedText.substring(0, 300)}${changedText.length > 300 ? '...' : ''}\"\n\nAnalyze: emotional tone, formality level, sentiment, audience appropriateness, and any tone shifts between versions.`\n    }];\n    try {\n      const toneAnalysis = await this.callGroqAPI(messages);\n      console.log('✅ Groq tone analysis received');\n      return `\n        <div class=\"ai-tone\">\n          <div class=\"ai-header\">\n            <h4>🎭 Groq AI Tone Analysis</h4>\n          </div>\n          \n          <div class=\"ai-section\">\n            <h5 class=\"section-title\">🎯 Tone Assessment</h5>\n            <div class=\"tone-analysis-box\">\n              ${this.formatAIResponse(toneAnalysis)}\n            </div>\n          </div>\n          \n          <div class=\"ai-section\">\n            <h5 class=\"section-title\">💡 Tone Guidelines</h5>\n            <div class=\"guidelines-grid\">\n              <div class=\"guideline-item\">\n                <div class=\"guideline-icon\">🎯</div>\n                <div class=\"guideline-content\">\n                  <strong>Consistency:</strong> Maintain consistent voice throughout your document\n                </div>\n              </div>\n              <div class=\"guideline-item\">\n                <div class=\"guideline-icon\">👥</div>\n                <div class=\"guideline-content\">\n                  <strong>Audience:</strong> Match tone to your purpose and audience\n                </div>\n              </div>\n              <div class=\"guideline-item\">\n                <div class=\"guideline-icon\">🌍</div>\n                <div class=\"guideline-content\">\n                  <strong>Context:</strong> Consider cultural context and expectations\n                </div>\n              </div>\n              <div class=\"guideline-item\">\n                <div class=\"guideline-icon\">⚖️</div>\n                <div class=\"guideline-content\">\n                  <strong>Balance:</strong> Balance professionalism with accessibility\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      `;\n    } catch (error) {\n      console.error('❌ Groq API failed for tone analysis:', error);\n      throw error;\n    }\n  }\n\n  // Generate cleanup analysis\n  async generateCleanupAnalysis(originalText, changedText) {\n    console.log('🧹 Generating cleanup analysis with Groq...');\n    const combinedText = originalText + '\\n' + changedText;\n    const messages = [{\n      role: \"system\",\n      content: \"You are an expert editor focused on text cleanup and formatting. Identify formatting issues, inconsistencies, and areas for improvement.\"\n    }, {\n      role: \"user\",\n      content: `Please analyze this text for formatting issues, inconsistencies, and cleanup opportunities:\n\n\"${combinedText.substring(0, 400)}${combinedText.length > 400 ? '...' : ''}\"\n\nLook for: spacing issues, punctuation problems, inconsistent formatting, redundant phrases, and other cleanup opportunities.`\n    }];\n    try {\n      const cleanupAnalysis = await this.callGroqAPI(messages);\n      console.log('✅ Groq cleanup analysis received');\n      return `\n        <div class=\"ai-cleanup\">\n          <div class=\"ai-header\">\n            <h4>🧹 Groq AI Text Cleanup Analysis</h4>\n          </div>\n          \n          <div class=\"ai-section\">\n            <h5 class=\"section-title\">🔍 Issues & Recommendations</h5>\n            <div class=\"cleanup-analysis-box\">\n              ${this.formatAIResponse(cleanupAnalysis)}\n            </div>\n          </div>\n          \n          <div class=\"ai-section\">\n            <h5 class=\"section-title\">✨ Cleanup Checklist</h5>\n            <div class=\"cleanup-checklist\">\n              <div class=\"cleanup-item\">\n                <div class=\"cleanup-icon\">🔲</div>\n                <div class=\"cleanup-content\">Remove trailing whitespace at line ends</div>\n              </div>\n              <div class=\"cleanup-item\">\n                <div class=\"cleanup-icon\">📏</div>\n                <div class=\"cleanup-content\">Standardize line break usage</div>\n              </div>\n              <div class=\"cleanup-item\">\n                <div class=\"cleanup-icon\">📝</div>\n                <div class=\"cleanup-content\">Fix inconsistent punctuation</div>\n              </div>\n              <div class=\"cleanup-item\">\n                <div class=\"cleanup-icon\">💬</div>\n                <div class=\"cleanup-content\">Normalize quotation marks</div>\n              </div>\n              <div class=\"cleanup-item\">\n                <div class=\"cleanup-icon\">🧽</div>\n                <div class=\"cleanup-content\">Remove unnecessary special characters</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      `;\n    } catch (error) {\n      console.error('❌ Groq API failed for cleanup analysis:', error);\n      throw error;\n    }\n  }\n\n  // Helper methods\n  calculateTextStats(originalText, changedText) {\n    return {\n      originalLines: originalText.split('\\n').length,\n      changedLines: changedText.split('\\n').length,\n      originalWords: originalText.split(/\\s+/).filter(w => w.length > 0).length,\n      changedWords: changedText.split(/\\s+/).filter(w => w.length > 0).length,\n      originalChars: originalText.length,\n      changedChars: changedText.length\n    };\n  }\n\n  // Format AI response - bullets for analysis, paragraphs for summaries\n  formatAIResponse(text, type = 'default') {\n    if (!text) return '';\n\n    // Clean up the text\n    let cleaned = text\n    // Remove **text** and replace with <strong>text</strong>\n    .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n    // Remove single asterisks\n    .replace(/\\*(.*?)\\*/g, '$1')\n    // Clean up multiple spaces\n    .replace(/\\s+/g, ' ')\n    // Trim whitespace\n    .trim();\n\n    // For summaries, use paragraph format for better flow\n    if (type === 'summary') {\n      // Split into logical paragraphs\n      const paragraphs = cleaned.split(/\\n\\s*\\n+/).map(p => p.trim()).filter(p => p.length > 20); // Filter out very short fragments\n\n      // If we have multiple paragraphs, format them nicely\n      if (paragraphs.length > 1) {\n        return paragraphs.map(paragraph => `<p style=\"margin-bottom: 16px; line-height: 1.6;\">${paragraph}</p>`).join('');\n      }\n      // Single paragraph - split by sentences for better readability\n      else {\n        const sentences = cleaned.split(/(?<=\\.)\\s+(?=[A-Z])/).filter(s => s.trim().length > 10);\n        if (sentences.length > 2) {\n          // Group sentences into logical paragraphs (2-3 sentences each)\n          const groupedParagraphs = [];\n          for (let i = 0; i < sentences.length; i += 2) {\n            const group = sentences.slice(i, i + 2).join(' ').trim();\n            if (group) groupedParagraphs.push(group);\n          }\n          return groupedParagraphs.map(paragraph => `<p style=\"margin-bottom: 16px; line-height: 1.6;\">${paragraph}</p>`).join('');\n        }\n        return `<p style=\"line-height: 1.6;\">${cleaned}</p>`;\n      }\n    }\n\n    // For other types (explain, rewrite, tone, cleanup), use bullet format\n    let points = [];\n\n    // First try to split by numbered items (1., 2., 3., etc.)\n    if (cleaned.match(/\\d+\\.\\s/)) {\n      points = cleaned.split(/(?=\\d+\\.\\s)/).filter(p => p.trim());\n    }\n    // If no numbered items, split by periods followed by capital letters or new sections\n    else if (cleaned.match(/\\.\\s+[A-Z]/)) {\n      points = cleaned.split(/\\.\\s+(?=[A-Z])/).map(p => p.trim() + (p.endsWith('.') ? '' : '.'));\n    }\n    // If no clear structure, split by double line breaks or long sentences\n    else {\n      points = cleaned.split(/\\n\\s*\\n+|(?<=\\.)\\s+(?=[A-Z][^.]*:)/).filter(p => p.trim());\n    }\n\n    // Clean up and format each point\n    const formattedPoints = points.map(point => point.trim()).filter(point => point.length > 10) // Filter out very short fragments\n    .map(point => {\n      // Remove leading numbers if present\n      point = point.replace(/^\\d+\\.\\s*/, '');\n      // Ensure proper sentence ending\n      if (!point.endsWith('.') && !point.endsWith('!') && !point.endsWith('?')) {\n        point += '.';\n      }\n      return point;\n    });\n\n    // If we have multiple points, format as bulleted list\n    if (formattedPoints.length > 1) {\n      return `<ul style=\"line-height: 1.6; margin: 12px 0;\">${formattedPoints.map(point => `<li style=\"margin-bottom: 8px;\">${point}</li>`).join('')}</ul>`;\n    }\n    // If only one point or no clear structure, return as paragraph\n    else {\n      return `<p style=\"line-height: 1.6;\">${cleaned}</p>`;\n    }\n  }\n\n  // Format the response into the expected structure\n  formatResponse(type, content) {\n    const typeIcons = {\n      explain: '🧠',\n      rewrite: '✨',\n      summary: '📝',\n      tone: '🎭',\n      cleanup: '🧹'\n    };\n    const typeTitles = {\n      explain: 'Groq AI Explanation',\n      rewrite: 'Groq AI Rewrite Suggestions',\n      summary: 'Groq AI Summary',\n      tone: 'Groq AI Tone Analysis',\n      cleanup: 'Groq AI Text Cleanup'\n    };\n    return {\n      title: `${typeIcons[type] || '🤖'} ${typeTitles[type] || 'Groq AI Analysis'}`,\n      content: content,\n      type: type\n    };\n  }\n\n  // Test the Groq connection\n  async testConnection() {\n    console.log('Testing Groq connection...');\n    console.log('API Key configured:', this.isConfigured());\n    if (!this.isConfigured()) {\n      return {\n        success: false,\n        error: 'API key not configured'\n      };\n    }\n    try {\n      const result = await this.callGroqAPI([{\n        role: \"user\",\n        content: \"Say 'Hello, Groq API is working!' in a friendly way.\"\n      }]);\n      console.log('API test result:', result);\n      return {\n        success: true,\n        response: result\n      };\n    } catch (error) {\n      console.error('API test failed:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Debug method\n  debugConfig() {\n    console.log('=== Groq Debug Info ===');\n    console.log('Environment API Key:', process.env.REACT_APP_GROQ_API_KEY ? 'Found' : 'Not found');\n    console.log('Config API Key:', this.config.apiKey ? 'Found' : 'Not found');\n    console.log('Is Configured:', this.isConfigured());\n    console.log('Base URL:', this.config.baseUrl);\n    console.log('Model:', this.config.model);\n    console.log('======================');\n  }\n}","map":{"version":3,"names":["GroqService","constructor","config","apiKey","process","env","REACT_APP_GROQ_API_KEY","baseUrl","model","maxTokens","temperature","loadConfig","savedConfig","localStorage","getItem","parsedConfig","JSON","parse","envApiKey","error","console","isConfigured","hasKey","trim","length","isValidKey","startsWith","configured","log","envVar","hasApiKey","apiKeyLength","apiKeyPreview","substring","startsWithGsk","callGroqAPI","messages","response","fetch","method","headers","body","stringify","max_tokens","status","ok","text","Error","result","json","choices","message","content","generateAnalysis","type","originalText","changedText","analysis","generateExplanation","generateRewriteSuggestions","generateSummary","generateToneAnalysis","generateCleanupAnalysis","formatResponse","stats","calculateTextStats","role","aiInsight","originalLines","originalWords","originalChars","changedLines","changedWords","changedChars","Math","abs","formatAIResponse","combinedText","suggestions","summary","toneAnalysis","cleanupAnalysis","split","filter","w","cleaned","replace","paragraphs","map","p","paragraph","join","sentences","s","groupedParagraphs","i","group","slice","push","points","match","endsWith","formattedPoints","point","typeIcons","explain","rewrite","tone","cleanup","typeTitles","title","testConnection","success","debugConfig"],"sources":["C:/Users/Joem/quickdiff-react/src/utils/GroqService.js"],"sourcesContent":["/**\r\n * Groq API Service for QuickDiff React App\r\n * Fast, reliable, and free AI API for text analysis\r\n * Get your free API key at: https://console.groq.com/\r\n */\r\n\r\nexport class GroqService {\r\n  constructor() {\r\n    this.config = {\r\n      apiKey: process.env.REACT_APP_GROQ_API_KEY || '', // Groq API key from environment\r\n      baseUrl: 'https://api.groq.com/openai/v1/chat/completions',\r\n      model: 'llama-3.1-8b-instant', // Fast and reliable model\r\n      maxTokens: 1000,\r\n      temperature: 0.7\r\n    };\r\n    \r\n    this.loadConfig();\r\n  }\r\n\r\n  loadConfig() {\r\n    try {\r\n      const savedConfig = localStorage.getItem('quickdiff_groq_config');\r\n      if (savedConfig) {\r\n        const parsedConfig = JSON.parse(savedConfig);\r\n        delete parsedConfig.apiKey; // Don't override API key from environment\r\n        this.config = { ...this.config, ...parsedConfig };\r\n      }\r\n      \r\n      // Ensure environment variable always takes precedence\r\n      const envApiKey = process.env.REACT_APP_GROQ_API_KEY;\r\n      if (envApiKey) {\r\n        this.config.apiKey = envApiKey;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading Groq config:', error);\r\n    }\r\n  }\r\n\r\n  // Check if Groq is properly configured\r\n  isConfigured() {\r\n    const hasKey = this.config.apiKey && this.config.apiKey.trim().length > 0;\r\n    const isValidKey = this.config.apiKey && this.config.apiKey.startsWith('gsk_');\r\n    const configured = hasKey && isValidKey;\r\n    \r\n    console.log('🔍 Groq isConfigured check:', {\r\n      envVar: process.env.REACT_APP_GROQ_API_KEY ? 'Found' : 'Not found',\r\n      hasApiKey: !!this.config.apiKey,\r\n      apiKeyLength: this.config.apiKey ? this.config.apiKey.length : 0,\r\n      apiKeyPreview: this.config.apiKey ? `${this.config.apiKey.substring(0, 10)}...` : 'none',\r\n      startsWithGsk: isValidKey,\r\n      configured: configured\r\n    });\r\n    return configured;\r\n  }\r\n\r\n  // Call Groq API\r\n  async callGroqAPI(messages) {\r\n    console.log('🌐 Making Groq API call...');\r\n    console.log('🔑 Using API key:', this.config.apiKey ? `${this.config.apiKey.substring(0, 10)}...` : 'NONE');\r\n    \r\n    const response = await fetch(this.config.baseUrl, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${this.config.apiKey}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        model: this.config.model,\r\n        messages: messages,\r\n        max_tokens: this.config.maxTokens,\r\n        temperature: this.config.temperature\r\n      })\r\n    });\r\n\r\n    console.log('📥 Response status:', response.status);\r\n\r\n    if (!response.ok) {\r\n      const error = await response.text();\r\n      console.error('❌ Groq API Error Response:', error);\r\n      throw new Error(`Groq API error: ${response.status} - ${error}`);\r\n    }\r\n\r\n    const result = await response.json();\r\n    console.log('✅ Groq API Success');\r\n    return result.choices[0].message.content;\r\n  }\r\n\r\n  // Generate analysis using Groq\r\n  async generateAnalysis(type, originalText, changedText) {\r\n    console.log('🚀 generateAnalysis called with type:', type);\r\n    console.log('🔧 isConfigured():', this.isConfigured());\r\n    \r\n    if (!this.isConfigured()) {\r\n      console.log('❌ Groq API not configured, throwing error');\r\n      throw new Error('Groq API not configured. Please set up your API token.');\r\n    }\r\n\r\n    console.log('✅ Groq API configured, proceeding with analysis...');\r\n    try {\r\n      let analysis;\r\n      switch (type) {\r\n        case 'explain':\r\n          analysis = await this.generateExplanation(originalText, changedText);\r\n          break;\r\n        case 'rewrite':\r\n          analysis = await this.generateRewriteSuggestions(originalText, changedText);\r\n          break;\r\n        case 'summary':\r\n          analysis = await this.generateSummary(originalText, changedText);\r\n          break;\r\n        case 'tone':\r\n          analysis = await this.generateToneAnalysis(originalText, changedText);\r\n          break;\r\n        case 'cleanup':\r\n          analysis = await this.generateCleanupAnalysis(originalText, changedText);\r\n          break;\r\n        default:\r\n          analysis = await this.generateExplanation(originalText, changedText);\r\n      }\r\n      \r\n      console.log('✅ Analysis generated successfully');\r\n      return this.formatResponse(type, analysis);\r\n    } catch (error) {\r\n      console.error('❌ Groq API Error:', error);\r\n      throw new Error(`Failed to generate ${type} analysis: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // Generate explanation analysis\r\n  async generateExplanation(originalText, changedText) {\r\n    console.log('📝 Generating explanation with Groq...');\r\n    const stats = this.calculateTextStats(originalText, changedText);\r\n    \r\n    const messages = [\r\n      {\r\n        role: \"system\",\r\n        content: \"You are an expert text analyst. Analyze the differences between two texts and provide clear, insightful explanations.\"\r\n      },\r\n      {\r\n        role: \"user\",\r\n        content: `Compare these two texts and explain the key differences:\r\n\r\nOriginal Text: \"${originalText.substring(0, 300)}${originalText.length > 300 ? '...' : ''}\"\r\n\r\nChanged Text: \"${changedText.substring(0, 300)}${changedText.length > 300 ? '...' : ''}\"\r\n\r\nPlease provide a detailed analysis of the differences, changes in meaning, style, and content structure.`\r\n      }\r\n    ];\r\n\r\n    try {\r\n      const aiInsight = await this.callGroqAPI(messages);\r\n      console.log('✅ Groq explanation received');\r\n      \r\n      return `\r\n        <div class=\"ai-explanation\">\r\n          <div class=\"ai-header\">\r\n            <h4>📊 Groq AI Text Analysis</h4>\r\n          </div>\r\n          \r\n          <div class=\"ai-section\">\r\n            <h5 class=\"section-title\">📈 Text Statistics</h5>\r\n            <div class=\"stats-grid\">\r\n              <div class=\"stat-card\">\r\n                <div class=\"stat-label\">Original Text</div>\r\n                <div class=\"stat-value\">${stats.originalLines} lines • ${stats.originalWords} words • ${stats.originalChars} chars</div>\r\n              </div>\r\n              <div class=\"stat-card\">\r\n                <div class=\"stat-label\">Changed Text</div>\r\n                <div class=\"stat-value\">${stats.changedLines} lines • ${stats.changedWords} words • ${stats.changedChars} chars</div>\r\n              </div>\r\n              <div class=\"stat-card\">\r\n                <div class=\"stat-label\">Net Changes</div>\r\n                <div class=\"stat-value\">\r\n                  ${Math.abs(stats.changedLines - stats.originalLines)} lines • \r\n                  ${Math.abs(stats.changedWords - stats.originalWords)} words • \r\n                  ${Math.abs(stats.changedChars - stats.originalChars)} chars\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"ai-section\">\r\n            <h5 class=\"section-title\">🤖 AI Analysis</h5>\r\n            <div class=\"ai-insight-box\">\r\n              ${this.formatAIResponse(aiInsight)}\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"ai-section\">\r\n            <h5 class=\"section-title\">🔍 Key Findings</h5>\r\n            <div class=\"findings-list\">\r\n              ${stats.originalLines !== stats.changedLines ? `<div class=\"finding-item\">📄 Line count: ${stats.originalLines} → ${stats.changedLines}</div>` : ''}\r\n              ${stats.originalWords !== stats.changedWords ? `<div class=\"finding-item\">📝 Word count: ${stats.originalWords} → ${stats.changedWords}</div>` : ''}\r\n              ${originalText === changedText ? '<div class=\"finding-item\">✅ No changes detected - texts are identical</div>' : ''}\r\n              ${Math.abs(stats.changedChars - stats.originalChars) > stats.originalChars * 0.5 ? '<div class=\"finding-item\">⚠️ Significant content change detected (>50%)</div>' : ''}\r\n              ${Math.abs(stats.changedChars - stats.originalChars) < stats.originalChars * 0.1 ? '<div class=\"finding-item\">✨ Minor changes detected (<10%)</div>' : ''}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      `;\r\n    } catch (error) {\r\n      console.error('❌ Groq API failed for explanation:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Generate rewrite suggestions\r\n  async generateRewriteSuggestions(originalText, changedText) {\r\n    console.log('✨ Generating rewrite suggestions with Groq...');\r\n    const combinedText = originalText + ' ' + changedText;\r\n    \r\n    const messages = [\r\n      {\r\n        role: \"system\",\r\n        content: \"You are an expert writing coach. Provide specific, actionable suggestions to improve text clarity, style, and readability.\"\r\n      },\r\n      {\r\n        role: \"user\",\r\n        content: `Please analyze this text and provide specific rewrite suggestions to improve clarity, style, and readability:\r\n\r\n\"${combinedText.substring(0, 400)}${combinedText.length > 400 ? '...' : ''}\"\r\n\r\nProvide concrete suggestions for improvement, including specific examples where possible.`\r\n      }\r\n    ];\r\n\r\n    try {\r\n      const suggestions = await this.callGroqAPI(messages);\r\n      console.log('✅ Groq rewrite suggestions received');\r\n      \r\n      return `\r\n        <div class=\"ai-rewrite\">\r\n          <div class=\"ai-header\">\r\n            <h4>✨ Groq AI Rewrite Suggestions</h4>\r\n          </div>\r\n          \r\n          <div class=\"ai-section\">\r\n            <h5 class=\"section-title\">🎯 AI-Generated Suggestions</h5>\r\n            <div class=\"suggestions-box\">\r\n              ${this.formatAIResponse(suggestions)}\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"ai-section\">\r\n            <h5 class=\"section-title\">📝 Writing Best Practices</h5>\r\n            <div class=\"tips-grid\">\r\n              <div class=\"tip-item\">\r\n                <div class=\"tip-icon\">🎯</div>\r\n                <div class=\"tip-content\">\r\n                  <strong>Clarity:</strong> Use clear, concise language and avoid jargon\r\n                </div>\r\n              </div>\r\n              <div class=\"tip-item\">\r\n                <div class=\"tip-icon\">📏</div>\r\n                <div class=\"tip-content\">\r\n                  <strong>Structure:</strong> Break up long sentences for better readability\r\n                </div>\r\n              </div>\r\n              <div class=\"tip-item\">\r\n                <div class=\"tip-icon\">💪</div>\r\n                <div class=\"tip-content\">\r\n                  <strong>Voice:</strong> Use active voice when possible\r\n                </div>\r\n              </div>\r\n              <div class=\"tip-item\">\r\n                <div class=\"tip-icon\">🔄</div>\r\n                <div class=\"tip-content\">\r\n                  <strong>Consistency:</strong> Ensure consistent terminology throughout\r\n                </div>\r\n              </div>\r\n              <div class=\"tip-item\">\r\n                <div class=\"tip-icon\">🌊</div>\r\n                <div class=\"tip-content\">\r\n                  <strong>Flow:</strong> Add transitional phrases for better flow\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      `;\r\n    } catch (error) {\r\n      console.error('❌ Groq API failed for rewrite suggestions:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Generate summary\r\n  async generateSummary(originalText, changedText) {\r\n    console.log('📄 Generating summary with Groq...');\r\n    const combinedText = originalText + '\\n\\n' + changedText;\r\n    \r\n    const messages = [\r\n      {\r\n        role: \"system\",\r\n        content: \"You are an expert at creating concise, informative summaries. Focus on the key points and main ideas.\"\r\n      },\r\n      {\r\n        role: \"user\",\r\n        content: `Please provide a concise summary of these texts, highlighting the main points and any key differences:\r\n\r\n\"${combinedText.substring(0, 500)}${combinedText.length > 500 ? '...' : ''}\"\r\n\r\nFocus on the most important information and any significant changes between versions.`\r\n      }\r\n    ];\r\n\r\n    try {\r\n      const summary = await this.callGroqAPI(messages);\r\n      console.log('✅ Groq summary received');\r\n      \r\n      return `\r\n        <div class=\"ai-summary\">\r\n          <div class=\"ai-header\">\r\n            <h4>📝 Groq AI Summary</h4>\r\n          </div>\r\n          \r\n          <div class=\"ai-section\">\r\n            <h5 class=\"section-title\">📄 Key Points Summary</h5>\r\n            <div class=\"summary-box\">\r\n              ${this.formatAIResponse(summary, 'summary')}\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"ai-section\">\r\n            <h5 class=\"section-title\">📊 Document Overview</h5>\r\n            <div class=\"overview-stats\">\r\n              <div class=\"overview-item\">\r\n                <span class=\"overview-label\">📏 Combined Length:</span>\r\n                <span class=\"overview-value\">${combinedText.length} characters</span>\r\n              </div>\r\n              <div class=\"overview-item\">\r\n                <span class=\"overview-label\">🔍 Analysis Scope:</span>\r\n                <span class=\"overview-value\">Both original and changed versions</span>\r\n              </div>\r\n              <div class=\"overview-item\">\r\n                <span class=\"overview-label\">🎯 Focus:</span>\r\n                <span class=\"overview-value\">Main points and key differences</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      `;\r\n    } catch (error) {\r\n      console.error('❌ Groq API failed for summary:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Generate tone analysis\r\n  async generateToneAnalysis(originalText, changedText) {\r\n    console.log('🎭 Generating tone analysis with Groq...');\r\n    \r\n    const messages = [\r\n      {\r\n        role: \"system\",\r\n        content: \"You are an expert in linguistic analysis and tone assessment. Analyze the emotional tone, formality level, and overall sentiment of texts.\"\r\n      },\r\n      {\r\n        role: \"user\",\r\n        content: `Please analyze the tone and sentiment of these texts:\r\n\r\nOriginal Text: \"${originalText.substring(0, 300)}${originalText.length > 300 ? '...' : ''}\"\r\n\r\nChanged Text: \"${changedText.substring(0, 300)}${changedText.length > 300 ? '...' : ''}\"\r\n\r\nAnalyze: emotional tone, formality level, sentiment, audience appropriateness, and any tone shifts between versions.`\r\n      }\r\n    ];\r\n\r\n    try {\r\n      const toneAnalysis = await this.callGroqAPI(messages);\r\n      console.log('✅ Groq tone analysis received');\r\n      \r\n      return `\r\n        <div class=\"ai-tone\">\r\n          <div class=\"ai-header\">\r\n            <h4>🎭 Groq AI Tone Analysis</h4>\r\n          </div>\r\n          \r\n          <div class=\"ai-section\">\r\n            <h5 class=\"section-title\">🎯 Tone Assessment</h5>\r\n            <div class=\"tone-analysis-box\">\r\n              ${this.formatAIResponse(toneAnalysis)}\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"ai-section\">\r\n            <h5 class=\"section-title\">💡 Tone Guidelines</h5>\r\n            <div class=\"guidelines-grid\">\r\n              <div class=\"guideline-item\">\r\n                <div class=\"guideline-icon\">🎯</div>\r\n                <div class=\"guideline-content\">\r\n                  <strong>Consistency:</strong> Maintain consistent voice throughout your document\r\n                </div>\r\n              </div>\r\n              <div class=\"guideline-item\">\r\n                <div class=\"guideline-icon\">👥</div>\r\n                <div class=\"guideline-content\">\r\n                  <strong>Audience:</strong> Match tone to your purpose and audience\r\n                </div>\r\n              </div>\r\n              <div class=\"guideline-item\">\r\n                <div class=\"guideline-icon\">🌍</div>\r\n                <div class=\"guideline-content\">\r\n                  <strong>Context:</strong> Consider cultural context and expectations\r\n                </div>\r\n              </div>\r\n              <div class=\"guideline-item\">\r\n                <div class=\"guideline-icon\">⚖️</div>\r\n                <div class=\"guideline-content\">\r\n                  <strong>Balance:</strong> Balance professionalism with accessibility\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      `;\r\n    } catch (error) {\r\n      console.error('❌ Groq API failed for tone analysis:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Generate cleanup analysis\r\n  async generateCleanupAnalysis(originalText, changedText) {\r\n    console.log('🧹 Generating cleanup analysis with Groq...');\r\n    const combinedText = originalText + '\\n' + changedText;\r\n    \r\n    const messages = [\r\n      {\r\n        role: \"system\",\r\n        content: \"You are an expert editor focused on text cleanup and formatting. Identify formatting issues, inconsistencies, and areas for improvement.\"\r\n      },\r\n      {\r\n        role: \"user\",\r\n        content: `Please analyze this text for formatting issues, inconsistencies, and cleanup opportunities:\r\n\r\n\"${combinedText.substring(0, 400)}${combinedText.length > 400 ? '...' : ''}\"\r\n\r\nLook for: spacing issues, punctuation problems, inconsistent formatting, redundant phrases, and other cleanup opportunities.`\r\n      }\r\n    ];\r\n\r\n    try {\r\n      const cleanupAnalysis = await this.callGroqAPI(messages);\r\n      console.log('✅ Groq cleanup analysis received');\r\n      \r\n      return `\r\n        <div class=\"ai-cleanup\">\r\n          <div class=\"ai-header\">\r\n            <h4>🧹 Groq AI Text Cleanup Analysis</h4>\r\n          </div>\r\n          \r\n          <div class=\"ai-section\">\r\n            <h5 class=\"section-title\">🔍 Issues & Recommendations</h5>\r\n            <div class=\"cleanup-analysis-box\">\r\n              ${this.formatAIResponse(cleanupAnalysis)}\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"ai-section\">\r\n            <h5 class=\"section-title\">✨ Cleanup Checklist</h5>\r\n            <div class=\"cleanup-checklist\">\r\n              <div class=\"cleanup-item\">\r\n                <div class=\"cleanup-icon\">🔲</div>\r\n                <div class=\"cleanup-content\">Remove trailing whitespace at line ends</div>\r\n              </div>\r\n              <div class=\"cleanup-item\">\r\n                <div class=\"cleanup-icon\">📏</div>\r\n                <div class=\"cleanup-content\">Standardize line break usage</div>\r\n              </div>\r\n              <div class=\"cleanup-item\">\r\n                <div class=\"cleanup-icon\">📝</div>\r\n                <div class=\"cleanup-content\">Fix inconsistent punctuation</div>\r\n              </div>\r\n              <div class=\"cleanup-item\">\r\n                <div class=\"cleanup-icon\">💬</div>\r\n                <div class=\"cleanup-content\">Normalize quotation marks</div>\r\n              </div>\r\n              <div class=\"cleanup-item\">\r\n                <div class=\"cleanup-icon\">🧽</div>\r\n                <div class=\"cleanup-content\">Remove unnecessary special characters</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      `;\r\n    } catch (error) {\r\n      console.error('❌ Groq API failed for cleanup analysis:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Helper methods\r\n  calculateTextStats(originalText, changedText) {\r\n    return {\r\n      originalLines: originalText.split('\\n').length,\r\n      changedLines: changedText.split('\\n').length,\r\n      originalWords: originalText.split(/\\s+/).filter(w => w.length > 0).length,\r\n      changedWords: changedText.split(/\\s+/).filter(w => w.length > 0).length,\r\n      originalChars: originalText.length,\r\n      changedChars: changedText.length\r\n    };\r\n  }\r\n\r\n  // Format AI response - bullets for analysis, paragraphs for summaries\r\n  formatAIResponse(text, type = 'default') {\r\n    if (!text) return '';\r\n    \r\n    // Clean up the text\r\n    let cleaned = text\r\n      // Remove **text** and replace with <strong>text</strong>\r\n      .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\r\n      // Remove single asterisks\r\n      .replace(/\\*(.*?)\\*/g, '$1')\r\n      // Clean up multiple spaces\r\n      .replace(/\\s+/g, ' ')\r\n      // Trim whitespace\r\n      .trim();\r\n    \r\n    // For summaries, use paragraph format for better flow\r\n    if (type === 'summary') {\r\n      // Split into logical paragraphs\r\n      const paragraphs = cleaned\r\n        .split(/\\n\\s*\\n+/)\r\n        .map(p => p.trim())\r\n        .filter(p => p.length > 20); // Filter out very short fragments\r\n      \r\n      // If we have multiple paragraphs, format them nicely\r\n      if (paragraphs.length > 1) {\r\n        return paragraphs.map(paragraph => `<p style=\"margin-bottom: 16px; line-height: 1.6;\">${paragraph}</p>`).join('');\r\n      }\r\n      // Single paragraph - split by sentences for better readability\r\n      else {\r\n        const sentences = cleaned.split(/(?<=\\.)\\s+(?=[A-Z])/).filter(s => s.trim().length > 10);\r\n        if (sentences.length > 2) {\r\n          // Group sentences into logical paragraphs (2-3 sentences each)\r\n          const groupedParagraphs = [];\r\n          for (let i = 0; i < sentences.length; i += 2) {\r\n            const group = sentences.slice(i, i + 2).join(' ').trim();\r\n            if (group) groupedParagraphs.push(group);\r\n          }\r\n          return groupedParagraphs.map(paragraph => `<p style=\"margin-bottom: 16px; line-height: 1.6;\">${paragraph}</p>`).join('');\r\n        }\r\n        return `<p style=\"line-height: 1.6;\">${cleaned}</p>`;\r\n      }\r\n    }\r\n    \r\n    // For other types (explain, rewrite, tone, cleanup), use bullet format\r\n    let points = [];\r\n    \r\n    // First try to split by numbered items (1., 2., 3., etc.)\r\n    if (cleaned.match(/\\d+\\.\\s/)) {\r\n      points = cleaned.split(/(?=\\d+\\.\\s)/).filter(p => p.trim());\r\n    }\r\n    // If no numbered items, split by periods followed by capital letters or new sections\r\n    else if (cleaned.match(/\\.\\s+[A-Z]/)) {\r\n      points = cleaned.split(/\\.\\s+(?=[A-Z])/).map(p => p.trim() + (p.endsWith('.') ? '' : '.'));\r\n    }\r\n    // If no clear structure, split by double line breaks or long sentences\r\n    else {\r\n      points = cleaned.split(/\\n\\s*\\n+|(?<=\\.)\\s+(?=[A-Z][^.]*:)/).filter(p => p.trim());\r\n    }\r\n    \r\n    // Clean up and format each point\r\n    const formattedPoints = points\r\n      .map(point => point.trim())\r\n      .filter(point => point.length > 10) // Filter out very short fragments\r\n      .map(point => {\r\n        // Remove leading numbers if present\r\n        point = point.replace(/^\\d+\\.\\s*/, '');\r\n        // Ensure proper sentence ending\r\n        if (!point.endsWith('.') && !point.endsWith('!') && !point.endsWith('?')) {\r\n          point += '.';\r\n        }\r\n        return point;\r\n      });\r\n    \r\n    // If we have multiple points, format as bulleted list\r\n    if (formattedPoints.length > 1) {\r\n      return `<ul style=\"line-height: 1.6; margin: 12px 0;\">${formattedPoints.map(point => `<li style=\"margin-bottom: 8px;\">${point}</li>`).join('')}</ul>`;\r\n    }\r\n    // If only one point or no clear structure, return as paragraph\r\n    else {\r\n      return `<p style=\"line-height: 1.6;\">${cleaned}</p>`;\r\n    }\r\n  }\r\n\r\n  // Format the response into the expected structure\r\n  formatResponse(type, content) {\r\n    const typeIcons = {\r\n      explain: '🧠',\r\n      rewrite: '✨',\r\n      summary: '📝',\r\n      tone: '🎭',\r\n      cleanup: '🧹'\r\n    };\r\n\r\n    const typeTitles = {\r\n      explain: 'Groq AI Explanation',\r\n      rewrite: 'Groq AI Rewrite Suggestions',\r\n      summary: 'Groq AI Summary',\r\n      tone: 'Groq AI Tone Analysis',\r\n      cleanup: 'Groq AI Text Cleanup'\r\n    };\r\n\r\n    return {\r\n      title: `${typeIcons[type] || '🤖'} ${typeTitles[type] || 'Groq AI Analysis'}`,\r\n      content: content,\r\n      type: type\r\n    };\r\n  }\r\n\r\n  // Test the Groq connection\r\n  async testConnection() {\r\n    console.log('Testing Groq connection...');\r\n    console.log('API Key configured:', this.isConfigured());\r\n    \r\n    if (!this.isConfigured()) {\r\n      return { success: false, error: 'API key not configured' };\r\n    }\r\n    \r\n    try {\r\n      const result = await this.callGroqAPI([\r\n        { role: \"user\", content: \"Say 'Hello, Groq API is working!' in a friendly way.\" }\r\n      ]);\r\n      console.log('API test result:', result);\r\n      return { success: true, response: result };\r\n    } catch (error) {\r\n      console.error('API test failed:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n\r\n  // Debug method\r\n  debugConfig() {\r\n    console.log('=== Groq Debug Info ===');\r\n    console.log('Environment API Key:', process.env.REACT_APP_GROQ_API_KEY ? 'Found' : 'Not found');\r\n    console.log('Config API Key:', this.config.apiKey ? 'Found' : 'Not found');\r\n    console.log('Is Configured:', this.isConfigured());\r\n    console.log('Base URL:', this.config.baseUrl);\r\n    console.log('Model:', this.config.model);\r\n    console.log('======================');\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}