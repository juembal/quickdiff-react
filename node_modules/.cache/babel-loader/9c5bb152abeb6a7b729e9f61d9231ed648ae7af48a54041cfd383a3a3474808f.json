{"ast":null,"code":"/**\r\n * PDF Text Extraction Utility\r\n * Handles extracting text content from PDF files for comparison\r\n */\n\nclass PDFTextExtractor {\n  constructor() {\n    this.pdfjs = null;\n    this.isLoaded = false;\n  }\n  async loadPDFJS() {\n    if (this.isLoaded) return;\n    try {\n      // Load PDF.js from CDN\n      if (!window.pdfjsLib) {\n        await this.loadScript('https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js');\n\n        // Configure PDF.js worker\n        window.pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';\n      }\n      this.pdfjs = window.pdfjsLib;\n      this.isLoaded = true;\n      console.log('PDF.js loaded successfully');\n    } catch (error) {\n      console.error('Failed to load PDF.js:', error);\n      throw new Error('PDF processing library failed to load');\n    }\n  }\n  loadScript(src) {\n    return new Promise((resolve, reject) => {\n      const script = document.createElement('script');\n      script.src = src;\n      script.onload = resolve;\n      script.onerror = reject;\n      document.head.appendChild(script);\n    });\n  }\n  async extractTextFromPDF(file) {\n    try {\n      await this.loadPDFJS();\n\n      // Convert file to ArrayBuffer\n      const arrayBuffer = await this.fileToArrayBuffer(file);\n\n      // Load PDF document\n      const pdf = await this.pdfjs.getDocument({\n        data: arrayBuffer\n      }).promise;\n      let fullText = '';\n      const totalPages = pdf.numPages;\n      console.log(`Processing PDF with ${totalPages} pages...`);\n\n      // Extract text from each page\n      for (let pageNum = 1; pageNum <= totalPages; pageNum++) {\n        try {\n          const page = await pdf.getPage(pageNum);\n          const textContent = await page.getTextContent();\n\n          // Combine text items from the page\n          const pageText = textContent.items.map(item => item.str).join(' ').trim();\n          if (pageText) {\n            fullText += `\\n--- Page ${pageNum} ---\\n${pageText}\\n`;\n          }\n        } catch (pageError) {\n          console.warn(`Error processing page ${pageNum}:`, pageError);\n          fullText += `\\n--- Page ${pageNum} (Error reading content) ---\\n`;\n        }\n      }\n      if (!fullText.trim()) {\n        throw new Error('No text content found in PDF');\n      }\n      return {\n        success: true,\n        text: fullText.trim(),\n        pages: totalPages,\n        message: `Successfully extracted text from ${totalPages} page(s)`\n      };\n    } catch (error) {\n      console.error('PDF text extraction failed:', error);\n      return {\n        success: false,\n        text: '',\n        error: error.message || 'Failed to extract text from PDF',\n        message: 'PDF text extraction failed'\n      };\n    }\n  }\n  fileToArrayBuffer(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = e => resolve(e.target.result);\n      reader.onerror = e => reject(new Error('Failed to read file'));\n      reader.readAsArrayBuffer(file);\n    });\n  }\n\n  // Check if a file is a PDF\n  isPDFFile(file) {\n    return file.type === 'application/pdf' || file.name.toLowerCase().endsWith('.pdf');\n  }\n\n  // Get supported file types\n  getSupportedTypes() {\n    return {\n      text: ['.txt', '.md', '.json', '.html', '.js', '.py', '.css', '.xml', '.csv', '.log'],\n      pdf: ['.pdf'],\n      all: ['.txt', '.md', '.json', '.html', '.js', '.py', '.css', '.xml', '.csv', '.log', '.pdf']\n    };\n  }\n\n  // Get accept attribute for file input\n  getAcceptAttribute() {\n    const types = this.getSupportedTypes();\n    return [...types.text, ...types.pdf].join(',');\n  }\n}\nexport default PDFTextExtractor;","map":{"version":3,"names":["PDFTextExtractor","constructor","pdfjs","isLoaded","loadPDFJS","window","pdfjsLib","loadScript","GlobalWorkerOptions","workerSrc","console","log","error","Error","src","Promise","resolve","reject","script","document","createElement","onload","onerror","head","appendChild","extractTextFromPDF","file","arrayBuffer","fileToArrayBuffer","pdf","getDocument","data","promise","fullText","totalPages","numPages","pageNum","page","getPage","textContent","getTextContent","pageText","items","map","item","str","join","trim","pageError","warn","success","text","pages","message","reader","FileReader","e","target","result","readAsArrayBuffer","isPDFFile","type","name","toLowerCase","endsWith","getSupportedTypes","all","getAcceptAttribute","types"],"sources":["C:/Users/Joem/quickdiff-react/src/utils/PDFTextExtractor.js"],"sourcesContent":["/**\r\n * PDF Text Extraction Utility\r\n * Handles extracting text content from PDF files for comparison\r\n */\r\n\r\nclass PDFTextExtractor {\r\n  constructor() {\r\n    this.pdfjs = null;\r\n    this.isLoaded = false;\r\n  }\r\n\r\n  async loadPDFJS() {\r\n    if (this.isLoaded) return;\r\n\r\n    try {\r\n      // Load PDF.js from CDN\r\n      if (!window.pdfjsLib) {\r\n        await this.loadScript('https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js');\r\n        \r\n        // Configure PDF.js worker\r\n        window.pdfjsLib.GlobalWorkerOptions.workerSrc = \r\n          'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';\r\n      }\r\n      \r\n      this.pdfjs = window.pdfjsLib;\r\n      this.isLoaded = true;\r\n      console.log('PDF.js loaded successfully');\r\n    } catch (error) {\r\n      console.error('Failed to load PDF.js:', error);\r\n      throw new Error('PDF processing library failed to load');\r\n    }\r\n  }\r\n\r\n  loadScript(src) {\r\n    return new Promise((resolve, reject) => {\r\n      const script = document.createElement('script');\r\n      script.src = src;\r\n      script.onload = resolve;\r\n      script.onerror = reject;\r\n      document.head.appendChild(script);\r\n    });\r\n  }\r\n\r\n  async extractTextFromPDF(file) {\r\n    try {\r\n      await this.loadPDFJS();\r\n\r\n      // Convert file to ArrayBuffer\r\n      const arrayBuffer = await this.fileToArrayBuffer(file);\r\n      \r\n      // Load PDF document\r\n      const pdf = await this.pdfjs.getDocument({ data: arrayBuffer }).promise;\r\n      \r\n      let fullText = '';\r\n      const totalPages = pdf.numPages;\r\n      \r\n      console.log(`Processing PDF with ${totalPages} pages...`);\r\n\r\n      // Extract text from each page\r\n      for (let pageNum = 1; pageNum <= totalPages; pageNum++) {\r\n        try {\r\n          const page = await pdf.getPage(pageNum);\r\n          const textContent = await page.getTextContent();\r\n          \r\n          // Combine text items from the page\r\n          const pageText = textContent.items\r\n            .map(item => item.str)\r\n            .join(' ')\r\n            .trim();\r\n          \r\n          if (pageText) {\r\n            fullText += `\\n--- Page ${pageNum} ---\\n${pageText}\\n`;\r\n          }\r\n        } catch (pageError) {\r\n          console.warn(`Error processing page ${pageNum}:`, pageError);\r\n          fullText += `\\n--- Page ${pageNum} (Error reading content) ---\\n`;\r\n        }\r\n      }\r\n\r\n      if (!fullText.trim()) {\r\n        throw new Error('No text content found in PDF');\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        text: fullText.trim(),\r\n        pages: totalPages,\r\n        message: `Successfully extracted text from ${totalPages} page(s)`\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('PDF text extraction failed:', error);\r\n      return {\r\n        success: false,\r\n        text: '',\r\n        error: error.message || 'Failed to extract text from PDF',\r\n        message: 'PDF text extraction failed'\r\n      };\r\n    }\r\n  }\r\n\r\n  fileToArrayBuffer(file) {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => resolve(e.target.result);\r\n      reader.onerror = (e) => reject(new Error('Failed to read file'));\r\n      reader.readAsArrayBuffer(file);\r\n    });\r\n  }\r\n\r\n  // Check if a file is a PDF\r\n  isPDFFile(file) {\r\n    return file.type === 'application/pdf' || \r\n           file.name.toLowerCase().endsWith('.pdf');\r\n  }\r\n\r\n  // Get supported file types\r\n  getSupportedTypes() {\r\n    return {\r\n      text: ['.txt', '.md', '.json', '.html', '.js', '.py', '.css', '.xml', '.csv', '.log'],\r\n      pdf: ['.pdf'],\r\n      all: ['.txt', '.md', '.json', '.html', '.js', '.py', '.css', '.xml', '.csv', '.log', '.pdf']\r\n    };\r\n  }\r\n\r\n  // Get accept attribute for file input\r\n  getAcceptAttribute() {\r\n    const types = this.getSupportedTypes();\r\n    return [...types.text, ...types.pdf].join(',');\r\n  }\r\n}\r\n\r\nexport default PDFTextExtractor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}