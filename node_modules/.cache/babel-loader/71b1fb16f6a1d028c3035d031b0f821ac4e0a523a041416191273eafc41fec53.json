{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joem\\\\quickdiff-react\\\\src\\\\components\\\\AIResults.js\";\nimport React from 'react';\n\n// Function to format AI content like ChatGPT - clean and readable\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatAIContent = content => {\n  if (!content) return '';\n\n  // If content is already properly formatted HTML, clean it up\n  if (content.includes('<div class=\"ai-') || content.includes('<h4>') || content.includes('<h5>')) {\n    // Strip out complex HTML and reformat as simple text\n    let cleaned = content.replace(/<[^>]*>/g, ' ') // Remove all HTML tags\n    .replace(/\\s+/g, ' ') // Clean up spaces\n    .trim();\n    return formatPlainText(cleaned);\n  }\n  return formatPlainText(content);\n};\n\n// Format plain text content like ChatGPT\nconst formatPlainText = text => {\n  if (!text) return '';\n\n  // Clean up the text first\n  let cleaned = text.replace(/\\*+/g, '') // Remove asterisks\n  .replace(/\\s+/g, ' ') // Clean up spaces\n  .trim();\n\n  // Split into paragraphs by double line breaks or clear section breaks\n  let paragraphs = cleaned.split(/\\n\\s*\\n+/).filter(p => p.trim());\n\n  // If no clear paragraph breaks, try to split by sentence patterns\n  if (paragraphs.length === 1) {\n    // Look for numbered items (1., 2., 3., etc.)\n    if (cleaned.match(/\\d+\\.\\s/)) {\n      paragraphs = cleaned.split(/(?=\\d+\\.\\s)/).filter(p => p.trim());\n    }\n    // Look for bullet points or dashes\n    else if (cleaned.match(/[-â€¢]\\s/)) {\n      paragraphs = cleaned.split(/(?=[-â€¢]\\s)/).filter(p => p.trim());\n    }\n    // Split by periods followed by capital letters (but be careful with abbreviations)\n    else if (cleaned.length > 200) {\n      const sentences = cleaned.split(/(?<=\\.)\\s+(?=[A-Z][a-z])/);\n      paragraphs = [];\n      let currentParagraph = '';\n      for (const sentence of sentences) {\n        if (currentParagraph.length + sentence.length > 150) {\n          if (currentParagraph) paragraphs.push(currentParagraph.trim());\n          currentParagraph = sentence;\n        } else {\n          currentParagraph += (currentParagraph ? ' ' : '') + sentence;\n        }\n      }\n      if (currentParagraph) paragraphs.push(currentParagraph.trim());\n    }\n  }\n\n  // Format each paragraph\n  return paragraphs.map(paragraph => {\n    const trimmed = paragraph.trim();\n    if (!trimmed) return '';\n\n    // Check if it's a numbered item or bullet point\n    if (trimmed.match(/^\\d+\\.\\s/) || trimmed.match(/^[-â€¢]\\s/)) {\n      return `<div style=\"margin: 8px 0; padding-left: 16px; line-height: 1.6;\">${trimmed}</div>`;\n    }\n\n    // Regular paragraph\n    return `<p style=\"margin: 12px 0; line-height: 1.6; color: var(--text-color);\">${trimmed}</p>`;\n  }).join('');\n};\nconst AIResults = ({\n  results,\n  onClear,\n  onRemoveCard\n}) => {\n  if (!results || results.length === 0) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ai-results-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ai-results-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD83E\\uDDE0 AI Analysis Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"ai-clear-all btn btn-secondary\",\n        onClick: onClear,\n        children: \"Clear All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ai-cards-container\",\n      children: results.map((result, index) => /*#__PURE__*/_jsxDEV(AICard, {\n        result: result,\n        index: index,\n        onRemove: onRemoveCard\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_c = AIResults;\nconst AICard = ({\n  result,\n  index,\n  onRemove\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ai-analysis-card\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ai-card-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"ai-card-title\",\n        children: result.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"ai-card-close\",\n        onClick: () => onRemove && onRemove(index),\n        title: \"Remove this analysis\",\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ai-card-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ai-content-wrapper\",\n        dangerouslySetInnerHTML: {\n          __html: formatAIContent(result.content)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_c2 = AICard;\nexport default AIResults;\nvar _c, _c2;\n$RefreshReg$(_c, \"AIResults\");\n$RefreshReg$(_c2, \"AICard\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","formatAIContent","content","includes","cleaned","replace","trim","formatPlainText","text","paragraphs","split","filter","p","length","match","sentences","currentParagraph","sentence","push","map","paragraph","trimmed","join","AIResults","results","onClear","onRemoveCard","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","result","index","AICard","onRemove","_c","title","dangerouslySetInnerHTML","__html","_c2","$RefreshReg$"],"sources":["C:/Users/Joem/quickdiff-react/src/components/AIResults.js"],"sourcesContent":["import React from 'react';\r\n\r\n// Function to format AI content like ChatGPT - clean and readable\r\nconst formatAIContent = (content) => {\r\n  if (!content) return '';\r\n  \r\n  // If content is already properly formatted HTML, clean it up\r\n  if (content.includes('<div class=\"ai-') || content.includes('<h4>') || content.includes('<h5>')) {\r\n    // Strip out complex HTML and reformat as simple text\r\n    let cleaned = content\r\n      .replace(/<[^>]*>/g, ' ') // Remove all HTML tags\r\n      .replace(/\\s+/g, ' ') // Clean up spaces\r\n      .trim();\r\n    return formatPlainText(cleaned);\r\n  }\r\n  \r\n  return formatPlainText(content);\r\n};\r\n\r\n// Format plain text content like ChatGPT\r\nconst formatPlainText = (text) => {\r\n  if (!text) return '';\r\n  \r\n  // Clean up the text first\r\n  let cleaned = text\r\n    .replace(/\\*+/g, '') // Remove asterisks\r\n    .replace(/\\s+/g, ' ') // Clean up spaces\r\n    .trim();\r\n  \r\n  // Split into paragraphs by double line breaks or clear section breaks\r\n  let paragraphs = cleaned.split(/\\n\\s*\\n+/).filter(p => p.trim());\r\n  \r\n  // If no clear paragraph breaks, try to split by sentence patterns\r\n  if (paragraphs.length === 1) {\r\n    // Look for numbered items (1., 2., 3., etc.)\r\n    if (cleaned.match(/\\d+\\.\\s/)) {\r\n      paragraphs = cleaned.split(/(?=\\d+\\.\\s)/).filter(p => p.trim());\r\n    }\r\n    // Look for bullet points or dashes\r\n    else if (cleaned.match(/[-â€¢]\\s/)) {\r\n      paragraphs = cleaned.split(/(?=[-â€¢]\\s)/).filter(p => p.trim());\r\n    }\r\n    // Split by periods followed by capital letters (but be careful with abbreviations)\r\n    else if (cleaned.length > 200) {\r\n      const sentences = cleaned.split(/(?<=\\.)\\s+(?=[A-Z][a-z])/);\r\n      paragraphs = [];\r\n      let currentParagraph = '';\r\n      \r\n      for (const sentence of sentences) {\r\n        if (currentParagraph.length + sentence.length > 150) {\r\n          if (currentParagraph) paragraphs.push(currentParagraph.trim());\r\n          currentParagraph = sentence;\r\n        } else {\r\n          currentParagraph += (currentParagraph ? ' ' : '') + sentence;\r\n        }\r\n      }\r\n      if (currentParagraph) paragraphs.push(currentParagraph.trim());\r\n    }\r\n  }\r\n  \r\n  // Format each paragraph\r\n  return paragraphs.map(paragraph => {\r\n    const trimmed = paragraph.trim();\r\n    if (!trimmed) return '';\r\n    \r\n    // Check if it's a numbered item or bullet point\r\n    if (trimmed.match(/^\\d+\\.\\s/) || trimmed.match(/^[-â€¢]\\s/)) {\r\n      return `<div style=\"margin: 8px 0; padding-left: 16px; line-height: 1.6;\">${trimmed}</div>`;\r\n    }\r\n    \r\n    // Regular paragraph\r\n    return `<p style=\"margin: 12px 0; line-height: 1.6; color: var(--text-color);\">${trimmed}</p>`;\r\n  }).join('');\r\n};\r\n\r\nconst AIResults = ({ results, onClear, onRemoveCard }) => {\r\n  if (!results || results.length === 0) return null;\r\n\r\n  return (\r\n    <div className=\"ai-results-section\">\r\n      <div className=\"ai-results-header\">\r\n        <h2>ðŸ§  AI Analysis Results</h2>\r\n        <button className=\"ai-clear-all btn btn-secondary\" onClick={onClear}>\r\n          Clear All\r\n        </button>\r\n      </div>\r\n      <div className=\"ai-cards-container\">\r\n        {results.map((result, index) => (\r\n          <AICard \r\n            key={index} \r\n            result={result} \r\n            index={index}\r\n            onRemove={onRemoveCard}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst AICard = ({ result, index, onRemove }) => {\r\n  return (\r\n    <div className=\"ai-analysis-card\">\r\n      <div className=\"ai-card-header\">\r\n        <h3 className=\"ai-card-title\">{result.title}</h3>\r\n        <button \r\n          className=\"ai-card-close\"\r\n          onClick={() => onRemove && onRemove(index)}\r\n          title=\"Remove this analysis\"\r\n        >\r\n          Ã—\r\n        </button>\r\n      </div>\r\n      <div className=\"ai-card-content\">\r\n        <div className=\"ai-content-wrapper\" dangerouslySetInnerHTML={{ __html: formatAIContent(result.content) }} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AIResults;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}