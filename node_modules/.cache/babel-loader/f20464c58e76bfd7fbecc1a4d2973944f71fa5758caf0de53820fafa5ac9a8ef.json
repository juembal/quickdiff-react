{"ast":null,"code":"export class DiffEngine {\n  performComparison(originalText, changedText, settings) {\n    const {\n      diffMode,\n      ignoreCase,\n      ignoreWhitespace,\n      ignorePunctuation\n    } = settings;\n\n    // Preprocess texts based on ignore options\n    const processedOriginal = this.preprocessText(originalText, {\n      ignoreCase,\n      ignoreWhitespace,\n      ignorePunctuation\n    });\n    const processedChanged = this.preprocessText(changedText, {\n      ignoreCase,\n      ignoreWhitespace,\n      ignorePunctuation\n    });\n    switch (diffMode) {\n      case 'word':\n        return this.performWordComparison(processedOriginal, processedChanged);\n      case 'char':\n        return this.performCharComparison(processedOriginal, processedChanged);\n      default:\n        return this.performLineComparison(processedOriginal, processedChanged);\n    }\n  }\n  preprocessText(text, options) {\n    let processed = text;\n    if (options.ignoreCase) {\n      processed = processed.toLowerCase();\n    }\n    if (options.ignoreWhitespace) {\n      processed = processed.replace(/\\s+/g, ' ').trim();\n    }\n    if (options.ignorePunctuation) {\n      processed = processed.replace(/[^\\w\\s]/g, '');\n    }\n    return processed;\n  }\n  performLineComparison(originalText, changedText) {\n    const originalLines = originalText.split(/\\r?\\n/);\n    const changedLines = changedText.split(/\\r?\\n/);\n    const diff = this.computeLineDiff(originalLines, changedLines);\n    const stats = {\n      linesAdded: 0,\n      linesRemoved: 0,\n      linesModified: 0\n    };\n    const originalResult = [];\n    const changedResult = [];\n\n    // Process original lines\n    diff.original.forEach((lineInfo, index) => {\n      const lineObj = {\n        content: this.escapeHtml(lineInfo.content),\n        type: lineInfo.type,\n        lineNumber: index + 1\n      };\n      if (lineInfo.type === 'removed') stats.linesRemoved++;\n      if (lineInfo.type === 'modified') stats.linesModified++;\n      originalResult.push(lineObj);\n    });\n\n    // Process changed lines\n    diff.changed.forEach((lineInfo, index) => {\n      const lineObj = {\n        content: this.escapeHtml(lineInfo.content),\n        type: lineInfo.type,\n        lineNumber: index + 1\n      };\n      if (lineInfo.type === 'added') stats.linesAdded++;\n      changedResult.push(lineObj);\n    });\n    return {\n      originalLines: originalResult,\n      changedLines: changedResult,\n      stats\n    };\n  }\n  performWordComparison(originalText, changedText) {\n    const originalWords = this.splitIntoWords(originalText);\n    const changedWords = this.splitIntoWords(changedText);\n    const wordDiff = this.computeImprovedWordDiff(originalWords, changedWords);\n    const stats = {\n      wordsAdded: 0,\n      wordsRemoved: 0,\n      wordsModified: 0,\n      totalChanges: 0\n    };\n    let originalHtml = '';\n    let changedHtml = '';\n\n    // Process original words with better counting\n    wordDiff.original.forEach(item => {\n      if (item.type === 'removed') {\n        // Only count actual words, not whitespace\n        if (item.content.trim() && /\\S/.test(item.content)) {\n          stats.wordsRemoved++;\n        }\n        originalHtml += `<span class=\"word-removed\">${this.escapeHtml(item.content)}</span>`;\n      } else if (item.type === 'modified') {\n        if (item.content.trim() && /\\S/.test(item.content)) {\n          stats.wordsModified++;\n        }\n        originalHtml += `<span class=\"word-modified\">${this.escapeHtml(item.content)}</span>`;\n      } else {\n        originalHtml += this.escapeHtml(item.content);\n      }\n    });\n\n    // Process changed words with better counting\n    wordDiff.changed.forEach(item => {\n      if (item.type === 'added') {\n        // Only count actual words, not whitespace\n        if (item.content.trim() && /\\S/.test(item.content)) {\n          stats.wordsAdded++;\n        }\n        changedHtml += `<span class=\"word-added\">${this.escapeHtml(item.content)}</span>`;\n      } else if (item.type === 'modified') {\n        if (item.content.trim() && /\\S/.test(item.content)) {\n          // Don't double count modified words\n        }\n        changedHtml += `<span class=\"word-modified\">${this.escapeHtml(item.content)}</span>`;\n      } else {\n        changedHtml += this.escapeHtml(item.content);\n      }\n    });\n\n    // Calculate total changes more accurately\n    stats.totalChanges = stats.wordsAdded + stats.wordsRemoved + stats.wordsModified;\n    return {\n      originalLines: [{\n        content: originalHtml,\n        type: '',\n        lineNumber: 1\n      }],\n      changedLines: [{\n        content: changedHtml,\n        type: '',\n        lineNumber: 1\n      }],\n      stats\n    };\n  }\n  performCharComparison(originalText, changedText) {\n    const charDiff = this.computeImprovedCharDiff(originalText, changedText);\n    const stats = {\n      charactersAdded: 0,\n      charactersRemoved: 0,\n      charactersModified: 0,\n      totalChanges: 0\n    };\n    let originalHtml = '';\n    let changedHtml = '';\n\n    // Process original characters with grouping for better visualization\n    charDiff.original.forEach(item => {\n      if (item.type === 'removed') {\n        stats.charactersRemoved++;\n        originalHtml += `<span class=\"char-removed\">${this.escapeHtml(item.content)}</span>`;\n      } else if (item.type === 'modified') {\n        stats.charactersModified++;\n        originalHtml += `<span class=\"char-modified\">${this.escapeHtml(item.content)}</span>`;\n      } else {\n        originalHtml += this.escapeHtml(item.content);\n      }\n    });\n\n    // Process changed characters with grouping\n    charDiff.changed.forEach(item => {\n      if (item.type === 'added') {\n        stats.charactersAdded++;\n        changedHtml += `<span class=\"char-added\">${this.escapeHtml(item.content)}</span>`;\n      } else if (item.type === 'modified') {\n        // Don't double count modified characters\n        changedHtml += `<span class=\"char-modified\">${this.escapeHtml(item.content)}</span>`;\n      } else {\n        changedHtml += this.escapeHtml(item.content);\n      }\n    });\n\n    // Calculate total changes\n    stats.totalChanges = stats.charactersAdded + stats.charactersRemoved + stats.charactersModified;\n    return {\n      originalLines: [{\n        content: originalHtml,\n        type: '',\n        lineNumber: 1\n      }],\n      changedLines: [{\n        content: changedHtml,\n        type: '',\n        lineNumber: 1\n      }],\n      stats\n    };\n  }\n  computeLineDiff(originalLines, changedLines) {\n    const m = originalLines.length;\n    const n = changedLines.length;\n\n    // Create DP table for LCS\n    const dp = Array(m + 1).fill(null).map(() => Array(n + 1).fill(0));\n\n    // Fill the DP table\n    for (let i = 1; i <= m; i++) {\n      for (let j = 1; j <= n; j++) {\n        if (originalLines[i - 1] === changedLines[j - 1]) {\n          dp[i][j] = dp[i - 1][j - 1] + 1;\n        } else {\n          dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n        }\n      }\n    }\n\n    // Backtrack to build the diff\n    const result = {\n      original: [],\n      changed: []\n    };\n    let i = m,\n      j = n;\n    while (i > 0 || j > 0) {\n      if (i > 0 && j > 0 && originalLines[i - 1] === changedLines[j - 1]) {\n        result.original.unshift({\n          content: originalLines[i - 1],\n          type: 'unchanged'\n        });\n        result.changed.unshift({\n          content: changedLines[j - 1],\n          type: 'unchanged'\n        });\n        i--;\n        j--;\n      } else if (i > 0 && (j === 0 || dp[i - 1][j] >= dp[i][j - 1])) {\n        result.original.unshift({\n          content: originalLines[i - 1],\n          type: 'removed'\n        });\n        i--;\n      } else {\n        result.changed.unshift({\n          content: changedLines[j - 1],\n          type: 'added'\n        });\n        j--;\n      }\n    }\n    return result;\n  }\n  splitIntoWords(text) {\n    const regex = /(\\S+|\\s+)/g;\n    return text.match(regex) || [];\n  }\n  computeWordDiff(originalWords, changedWords) {\n    const m = originalWords.length;\n    const n = changedWords.length;\n    const dp = Array(m + 1).fill(null).map(() => Array(n + 1).fill(0));\n    for (let i = 1; i <= m; i++) {\n      for (let j = 1; j <= n; j++) {\n        if (originalWords[i - 1] === changedWords[j - 1]) {\n          dp[i][j] = dp[i - 1][j - 1] + 1;\n        } else {\n          dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n        }\n      }\n    }\n    const result = {\n      original: [],\n      changed: []\n    };\n    let i = m,\n      j = n;\n    while (i > 0 || j > 0) {\n      if (i > 0 && j > 0 && originalWords[i - 1] === changedWords[j - 1]) {\n        result.original.unshift({\n          content: originalWords[i - 1],\n          type: 'unchanged'\n        });\n        result.changed.unshift({\n          content: changedWords[j - 1],\n          type: 'unchanged'\n        });\n        i--;\n        j--;\n      } else if (i > 0 && (j === 0 || dp[i - 1][j] >= dp[i][j - 1])) {\n        result.original.unshift({\n          content: originalWords[i - 1],\n          type: 'removed'\n        });\n        i--;\n      } else {\n        result.changed.unshift({\n          content: changedWords[j - 1],\n          type: 'added'\n        });\n        j--;\n      }\n    }\n    return result;\n  }\n  computeCharDiff(originalText, changedText) {\n    const originalChars = Array.from(originalText);\n    const changedChars = Array.from(changedText);\n    const m = originalChars.length;\n    const n = changedChars.length;\n    const dp = Array(m + 1).fill(null).map(() => Array(n + 1).fill(0));\n    for (let i = 1; i <= m; i++) {\n      for (let j = 1; j <= n; j++) {\n        if (originalChars[i - 1] === changedChars[j - 1]) {\n          dp[i][j] = dp[i - 1][j - 1] + 1;\n        } else {\n          dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n        }\n      }\n    }\n    const result = {\n      original: [],\n      changed: []\n    };\n    let i = m,\n      j = n;\n    while (i > 0 || j > 0) {\n      if (i > 0 && j > 0 && originalChars[i - 1] === changedChars[j - 1]) {\n        result.original.unshift({\n          content: originalChars[i - 1],\n          type: 'unchanged'\n        });\n        result.changed.unshift({\n          content: changedChars[j - 1],\n          type: 'unchanged'\n        });\n        i--;\n        j--;\n      } else if (i > 0 && (j === 0 || dp[i - 1][j] >= dp[i][j - 1])) {\n        result.original.unshift({\n          content: originalChars[i - 1],\n          type: 'removed'\n        });\n        i--;\n      } else {\n        result.changed.unshift({\n          content: changedChars[j - 1],\n          type: 'added'\n        });\n        j--;\n      }\n    }\n    return result;\n  }\n  escapeHtml(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n  }\n}","map":{"version":3,"names":["DiffEngine","performComparison","originalText","changedText","settings","diffMode","ignoreCase","ignoreWhitespace","ignorePunctuation","processedOriginal","preprocessText","processedChanged","performWordComparison","performCharComparison","performLineComparison","text","options","processed","toLowerCase","replace","trim","originalLines","split","changedLines","diff","computeLineDiff","stats","linesAdded","linesRemoved","linesModified","originalResult","changedResult","original","forEach","lineInfo","index","lineObj","content","escapeHtml","type","lineNumber","push","changed","originalWords","splitIntoWords","changedWords","wordDiff","computeImprovedWordDiff","wordsAdded","wordsRemoved","wordsModified","totalChanges","originalHtml","changedHtml","item","test","charDiff","computeImprovedCharDiff","charactersAdded","charactersRemoved","charactersModified","m","length","n","dp","Array","fill","map","i","j","Math","max","result","unshift","regex","match","computeWordDiff","computeCharDiff","originalChars","from","changedChars","div","document","createElement","textContent","innerHTML"],"sources":["C:/Users/Joem/quickdiff-react/src/utils/DiffEngine.js"],"sourcesContent":["export class DiffEngine {\r\n  performComparison(originalText, changedText, settings) {\r\n    const { diffMode, ignoreCase, ignoreWhitespace, ignorePunctuation } = settings;\r\n    \r\n    // Preprocess texts based on ignore options\r\n    const processedOriginal = this.preprocessText(originalText, { ignoreCase, ignoreWhitespace, ignorePunctuation });\r\n    const processedChanged = this.preprocessText(changedText, { ignoreCase, ignoreWhitespace, ignorePunctuation });\r\n    \r\n    switch (diffMode) {\r\n      case 'word':\r\n        return this.performWordComparison(processedOriginal, processedChanged);\r\n      case 'char':\r\n        return this.performCharComparison(processedOriginal, processedChanged);\r\n      default:\r\n        return this.performLineComparison(processedOriginal, processedChanged);\r\n    }\r\n  }\r\n\r\n  preprocessText(text, options) {\r\n    let processed = text;\r\n    \r\n    if (options.ignoreCase) {\r\n      processed = processed.toLowerCase();\r\n    }\r\n    \r\n    if (options.ignoreWhitespace) {\r\n      processed = processed.replace(/\\s+/g, ' ').trim();\r\n    }\r\n    \r\n    if (options.ignorePunctuation) {\r\n      processed = processed.replace(/[^\\w\\s]/g, '');\r\n    }\r\n    \r\n    return processed;\r\n  }\r\n\r\n  performLineComparison(originalText, changedText) {\r\n    const originalLines = originalText.split(/\\r?\\n/);\r\n    const changedLines = changedText.split(/\\r?\\n/);\r\n    \r\n    const diff = this.computeLineDiff(originalLines, changedLines);\r\n    \r\n    const stats = {\r\n      linesAdded: 0,\r\n      linesRemoved: 0,\r\n      linesModified: 0\r\n    };\r\n    \r\n    const originalResult = [];\r\n    const changedResult = [];\r\n    \r\n    // Process original lines\r\n    diff.original.forEach((lineInfo, index) => {\r\n      const lineObj = {\r\n        content: this.escapeHtml(lineInfo.content),\r\n        type: lineInfo.type,\r\n        lineNumber: index + 1\r\n      };\r\n      \r\n      if (lineInfo.type === 'removed') stats.linesRemoved++;\r\n      if (lineInfo.type === 'modified') stats.linesModified++;\r\n      \r\n      originalResult.push(lineObj);\r\n    });\r\n    \r\n    // Process changed lines\r\n    diff.changed.forEach((lineInfo, index) => {\r\n      const lineObj = {\r\n        content: this.escapeHtml(lineInfo.content),\r\n        type: lineInfo.type,\r\n        lineNumber: index + 1\r\n      };\r\n      \r\n      if (lineInfo.type === 'added') stats.linesAdded++;\r\n      \r\n      changedResult.push(lineObj);\r\n    });\r\n    \r\n    return {\r\n      originalLines: originalResult,\r\n      changedLines: changedResult,\r\n      stats\r\n    };\r\n  }\r\n\r\n  performWordComparison(originalText, changedText) {\r\n    const originalWords = this.splitIntoWords(originalText);\r\n    const changedWords = this.splitIntoWords(changedText);\r\n    \r\n    const wordDiff = this.computeImprovedWordDiff(originalWords, changedWords);\r\n    \r\n    const stats = {\r\n      wordsAdded: 0,\r\n      wordsRemoved: 0,\r\n      wordsModified: 0,\r\n      totalChanges: 0\r\n    };\r\n    \r\n    let originalHtml = '';\r\n    let changedHtml = '';\r\n    \r\n    // Process original words with better counting\r\n    wordDiff.original.forEach(item => {\r\n      if (item.type === 'removed') {\r\n        // Only count actual words, not whitespace\r\n        if (item.content.trim() && /\\S/.test(item.content)) {\r\n          stats.wordsRemoved++;\r\n        }\r\n        originalHtml += `<span class=\"word-removed\">${this.escapeHtml(item.content)}</span>`;\r\n      } else if (item.type === 'modified') {\r\n        if (item.content.trim() && /\\S/.test(item.content)) {\r\n          stats.wordsModified++;\r\n        }\r\n        originalHtml += `<span class=\"word-modified\">${this.escapeHtml(item.content)}</span>`;\r\n      } else {\r\n        originalHtml += this.escapeHtml(item.content);\r\n      }\r\n    });\r\n    \r\n    // Process changed words with better counting\r\n    wordDiff.changed.forEach(item => {\r\n      if (item.type === 'added') {\r\n        // Only count actual words, not whitespace\r\n        if (item.content.trim() && /\\S/.test(item.content)) {\r\n          stats.wordsAdded++;\r\n        }\r\n        changedHtml += `<span class=\"word-added\">${this.escapeHtml(item.content)}</span>`;\r\n      } else if (item.type === 'modified') {\r\n        if (item.content.trim() && /\\S/.test(item.content)) {\r\n          // Don't double count modified words\r\n        }\r\n        changedHtml += `<span class=\"word-modified\">${this.escapeHtml(item.content)}</span>`;\r\n      } else {\r\n        changedHtml += this.escapeHtml(item.content);\r\n      }\r\n    });\r\n    \r\n    // Calculate total changes more accurately\r\n    stats.totalChanges = stats.wordsAdded + stats.wordsRemoved + stats.wordsModified;\r\n    \r\n    return {\r\n      originalLines: [{ content: originalHtml, type: '', lineNumber: 1 }],\r\n      changedLines: [{ content: changedHtml, type: '', lineNumber: 1 }],\r\n      stats\r\n    };\r\n  }\r\n\r\n  performCharComparison(originalText, changedText) {\r\n    const charDiff = this.computeImprovedCharDiff(originalText, changedText);\r\n    \r\n    const stats = {\r\n      charactersAdded: 0,\r\n      charactersRemoved: 0,\r\n      charactersModified: 0,\r\n      totalChanges: 0\r\n    };\r\n    \r\n    let originalHtml = '';\r\n    let changedHtml = '';\r\n    \r\n    // Process original characters with grouping for better visualization\r\n    charDiff.original.forEach(item => {\r\n      if (item.type === 'removed') {\r\n        stats.charactersRemoved++;\r\n        originalHtml += `<span class=\"char-removed\">${this.escapeHtml(item.content)}</span>`;\r\n      } else if (item.type === 'modified') {\r\n        stats.charactersModified++;\r\n        originalHtml += `<span class=\"char-modified\">${this.escapeHtml(item.content)}</span>`;\r\n      } else {\r\n        originalHtml += this.escapeHtml(item.content);\r\n      }\r\n    });\r\n    \r\n    // Process changed characters with grouping\r\n    charDiff.changed.forEach(item => {\r\n      if (item.type === 'added') {\r\n        stats.charactersAdded++;\r\n        changedHtml += `<span class=\"char-added\">${this.escapeHtml(item.content)}</span>`;\r\n      } else if (item.type === 'modified') {\r\n        // Don't double count modified characters\r\n        changedHtml += `<span class=\"char-modified\">${this.escapeHtml(item.content)}</span>`;\r\n      } else {\r\n        changedHtml += this.escapeHtml(item.content);\r\n      }\r\n    });\r\n    \r\n    // Calculate total changes\r\n    stats.totalChanges = stats.charactersAdded + stats.charactersRemoved + stats.charactersModified;\r\n    \r\n    return {\r\n      originalLines: [{ content: originalHtml, type: '', lineNumber: 1 }],\r\n      changedLines: [{ content: changedHtml, type: '', lineNumber: 1 }],\r\n      stats\r\n    };\r\n  }\r\n\r\n  computeLineDiff(originalLines, changedLines) {\r\n    const m = originalLines.length;\r\n    const n = changedLines.length;\r\n    \r\n    // Create DP table for LCS\r\n    const dp = Array(m + 1).fill(null).map(() => Array(n + 1).fill(0));\r\n    \r\n    // Fill the DP table\r\n    for (let i = 1; i <= m; i++) {\r\n      for (let j = 1; j <= n; j++) {\r\n        if (originalLines[i - 1] === changedLines[j - 1]) {\r\n          dp[i][j] = dp[i - 1][j - 1] + 1;\r\n        } else {\r\n          dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Backtrack to build the diff\r\n    const result = { original: [], changed: [] };\r\n    let i = m, j = n;\r\n    \r\n    while (i > 0 || j > 0) {\r\n      if (i > 0 && j > 0 && originalLines[i - 1] === changedLines[j - 1]) {\r\n        result.original.unshift({\r\n          content: originalLines[i - 1],\r\n          type: 'unchanged'\r\n        });\r\n        result.changed.unshift({\r\n          content: changedLines[j - 1],\r\n          type: 'unchanged'\r\n        });\r\n        i--; j--;\r\n      } else if (i > 0 && (j === 0 || dp[i - 1][j] >= dp[i][j - 1])) {\r\n        result.original.unshift({\r\n          content: originalLines[i - 1],\r\n          type: 'removed'\r\n        });\r\n        i--;\r\n      } else {\r\n        result.changed.unshift({\r\n          content: changedLines[j - 1],\r\n          type: 'added'\r\n        });\r\n        j--;\r\n      }\r\n    }\r\n    \r\n    return result;\r\n  }\r\n\r\n  splitIntoWords(text) {\r\n    const regex = /(\\S+|\\s+)/g;\r\n    return text.match(regex) || [];\r\n  }\r\n\r\n  computeWordDiff(originalWords, changedWords) {\r\n    const m = originalWords.length;\r\n    const n = changedWords.length;\r\n    \r\n    const dp = Array(m + 1).fill(null).map(() => Array(n + 1).fill(0));\r\n    \r\n    for (let i = 1; i <= m; i++) {\r\n      for (let j = 1; j <= n; j++) {\r\n        if (originalWords[i - 1] === changedWords[j - 1]) {\r\n          dp[i][j] = dp[i - 1][j - 1] + 1;\r\n        } else {\r\n          dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\r\n        }\r\n      }\r\n    }\r\n    \r\n    const result = { original: [], changed: [] };\r\n    let i = m, j = n;\r\n    \r\n    while (i > 0 || j > 0) {\r\n      if (i > 0 && j > 0 && originalWords[i - 1] === changedWords[j - 1]) {\r\n        result.original.unshift({ content: originalWords[i - 1], type: 'unchanged' });\r\n        result.changed.unshift({ content: changedWords[j - 1], type: 'unchanged' });\r\n        i--; j--;\r\n      } else if (i > 0 && (j === 0 || dp[i - 1][j] >= dp[i][j - 1])) {\r\n        result.original.unshift({ content: originalWords[i - 1], type: 'removed' });\r\n        i--;\r\n      } else {\r\n        result.changed.unshift({ content: changedWords[j - 1], type: 'added' });\r\n        j--;\r\n      }\r\n    }\r\n    \r\n    return result;\r\n  }\r\n\r\n  computeCharDiff(originalText, changedText) {\r\n    const originalChars = Array.from(originalText);\r\n    const changedChars = Array.from(changedText);\r\n    \r\n    const m = originalChars.length;\r\n    const n = changedChars.length;\r\n    \r\n    const dp = Array(m + 1).fill(null).map(() => Array(n + 1).fill(0));\r\n    \r\n    for (let i = 1; i <= m; i++) {\r\n      for (let j = 1; j <= n; j++) {\r\n        if (originalChars[i - 1] === changedChars[j - 1]) {\r\n          dp[i][j] = dp[i - 1][j - 1] + 1;\r\n        } else {\r\n          dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\r\n        }\r\n      }\r\n    }\r\n    \r\n    const result = { original: [], changed: [] };\r\n    let i = m, j = n;\r\n    \r\n    while (i > 0 || j > 0) {\r\n      if (i > 0 && j > 0 && originalChars[i - 1] === changedChars[j - 1]) {\r\n        result.original.unshift({ content: originalChars[i - 1], type: 'unchanged' });\r\n        result.changed.unshift({ content: changedChars[j - 1], type: 'unchanged' });\r\n        i--; j--;\r\n      } else if (i > 0 && (j === 0 || dp[i - 1][j] >= dp[i][j - 1])) {\r\n        result.original.unshift({ content: originalChars[i - 1], type: 'removed' });\r\n        i--;\r\n      } else {\r\n        result.changed.unshift({ content: changedChars[j - 1], type: 'added' });\r\n        j--;\r\n      }\r\n    }\r\n    \r\n    return result;\r\n  }\r\n\r\n  escapeHtml(text) {\r\n    const div = document.createElement('div');\r\n    div.textContent = text;\r\n    return div.innerHTML;\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}