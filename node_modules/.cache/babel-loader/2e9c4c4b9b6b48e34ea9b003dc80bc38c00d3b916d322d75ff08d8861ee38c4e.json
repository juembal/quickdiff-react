{"ast":null,"code":"export class DiffEngine{performComparison(originalText,changedText,settings){const{diffMode,ignoreCase,ignoreWhitespace,ignorePunctuation}=settings;// Preprocess texts based on ignore options\nconst processedOriginal=this.preprocessText(originalText,{ignoreCase,ignoreWhitespace,ignorePunctuation});const processedChanged=this.preprocessText(changedText,{ignoreCase,ignoreWhitespace,ignorePunctuation});switch(diffMode){case'word':return this.performWordComparison(processedOriginal,processedChanged);case'char':return this.performCharComparison(processedOriginal,processedChanged);default:return this.performLineComparison(processedOriginal,processedChanged);}}preprocessText(text,options){let processed=text;if(options.ignoreCase){processed=processed.toLowerCase();}if(options.ignoreWhitespace){processed=processed.replace(/\\s+/g,' ').trim();}if(options.ignorePunctuation){processed=processed.replace(/[^\\w\\s]/g,'');}return processed;}performLineComparison(originalText,changedText){const originalLines=originalText.split(/\\r?\\n/);const changedLines=changedText.split(/\\r?\\n/);const diff=this.computeLineDiff(originalLines,changedLines);const stats={linesAdded:0,linesRemoved:0,linesModified:0};const originalResult=[];const changedResult=[];// Process original lines\ndiff.original.forEach((lineInfo,index)=>{const lineObj={content:this.escapeHtml(lineInfo.content),type:lineInfo.type,lineNumber:index+1};if(lineInfo.type==='removed')stats.linesRemoved++;if(lineInfo.type==='modified')stats.linesModified++;originalResult.push(lineObj);});// Process changed lines\ndiff.changed.forEach((lineInfo,index)=>{const lineObj={content:this.escapeHtml(lineInfo.content),type:lineInfo.type,lineNumber:index+1};if(lineInfo.type==='added')stats.linesAdded++;changedResult.push(lineObj);});return{originalLines:originalResult,changedLines:changedResult,stats};}performWordComparison(originalText,changedText){const originalWords=this.splitIntoWords(originalText);const changedWords=this.splitIntoWords(changedText);const wordDiff=this.computeWordDiff(originalWords,changedWords);const stats={wordsAdded:0,wordsRemoved:0};let originalHtml='';let changedHtml='';// Process original words\nwordDiff.original.forEach(item=>{if(item.type==='removed'){if(item.content.trim())stats.wordsRemoved++;originalHtml+=\"<span class=\\\"word-removed\\\">\".concat(this.escapeHtml(item.content),\"</span>\");}else{originalHtml+=this.escapeHtml(item.content);}});// Process changed words\nwordDiff.changed.forEach(item=>{if(item.type==='added'){if(item.content.trim())stats.wordsAdded++;changedHtml+=\"<span class=\\\"word-added\\\">\".concat(this.escapeHtml(item.content),\"</span>\");}else{changedHtml+=this.escapeHtml(item.content);}});return{originalLines:[{content:originalHtml,type:'',lineNumber:1}],changedLines:[{content:changedHtml,type:'',lineNumber:1}],stats};}performCharComparison(originalText,changedText){const charDiff=this.computeCharDiff(originalText,changedText);const stats={charactersAdded:0,charactersRemoved:0};let originalHtml='';let changedHtml='';charDiff.original.forEach(item=>{if(item.type==='removed'){stats.charactersRemoved++;originalHtml+=\"<span class=\\\"char-removed\\\">\".concat(this.escapeHtml(item.content),\"</span>\");}else{originalHtml+=this.escapeHtml(item.content);}});charDiff.changed.forEach(item=>{if(item.type==='added'){stats.charactersAdded++;changedHtml+=\"<span class=\\\"char-added\\\">\".concat(this.escapeHtml(item.content),\"</span>\");}else{changedHtml+=this.escapeHtml(item.content);}});return{originalLines:[{content:originalHtml,type:'',lineNumber:1}],changedLines:[{content:changedHtml,type:'',lineNumber:1}],stats};}computeLineDiff(originalLines,changedLines){const m=originalLines.length;const n=changedLines.length;// Create DP table for LCS\nconst dp=Array(m+1).fill(null).map(()=>Array(n+1).fill(0));// Fill the DP table\nfor(let i=1;i<=m;i++){for(let j=1;j<=n;j++){if(originalLines[i-1]===changedLines[j-1]){dp[i][j]=dp[i-1][j-1]+1;}else{dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);}}}// Backtrack to build the diff\nconst result={original:[],changed:[]};let i=m,j=n;while(i>0||j>0){if(i>0&&j>0&&originalLines[i-1]===changedLines[j-1]){result.original.unshift({content:originalLines[i-1],type:'unchanged'});result.changed.unshift({content:changedLines[j-1],type:'unchanged'});i--;j--;}else if(i>0&&(j===0||dp[i-1][j]>=dp[i][j-1])){result.original.unshift({content:originalLines[i-1],type:'removed'});i--;}else{result.changed.unshift({content:changedLines[j-1],type:'added'});j--;}}return result;}splitIntoWords(text){const regex=/(\\S+|\\s+)/g;return text.match(regex)||[];}computeWordDiff(originalWords,changedWords){const m=originalWords.length;const n=changedWords.length;const dp=Array(m+1).fill(null).map(()=>Array(n+1).fill(0));for(let i=1;i<=m;i++){for(let j=1;j<=n;j++){if(originalWords[i-1]===changedWords[j-1]){dp[i][j]=dp[i-1][j-1]+1;}else{dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);}}}const result={original:[],changed:[]};let i=m,j=n;while(i>0||j>0){if(i>0&&j>0&&originalWords[i-1]===changedWords[j-1]){result.original.unshift({content:originalWords[i-1],type:'unchanged'});result.changed.unshift({content:changedWords[j-1],type:'unchanged'});i--;j--;}else if(i>0&&(j===0||dp[i-1][j]>=dp[i][j-1])){result.original.unshift({content:originalWords[i-1],type:'removed'});i--;}else{result.changed.unshift({content:changedWords[j-1],type:'added'});j--;}}return result;}computeCharDiff(originalText,changedText){const originalChars=Array.from(originalText);const changedChars=Array.from(changedText);const m=originalChars.length;const n=changedChars.length;const dp=Array(m+1).fill(null).map(()=>Array(n+1).fill(0));for(let i=1;i<=m;i++){for(let j=1;j<=n;j++){if(originalChars[i-1]===changedChars[j-1]){dp[i][j]=dp[i-1][j-1]+1;}else{dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);}}}const result={original:[],changed:[]};let i=m,j=n;while(i>0||j>0){if(i>0&&j>0&&originalChars[i-1]===changedChars[j-1]){result.original.unshift({content:originalChars[i-1],type:'unchanged'});result.changed.unshift({content:changedChars[j-1],type:'unchanged'});i--;j--;}else if(i>0&&(j===0||dp[i-1][j]>=dp[i][j-1])){result.original.unshift({content:originalChars[i-1],type:'removed'});i--;}else{result.changed.unshift({content:changedChars[j-1],type:'added'});j--;}}return result;}escapeHtml(text){const div=document.createElement('div');div.textContent=text;return div.innerHTML;}}","map":{"version":3,"names":["DiffEngine","performComparison","originalText","changedText","settings","diffMode","ignoreCase","ignoreWhitespace","ignorePunctuation","processedOriginal","preprocessText","processedChanged","performWordComparison","performCharComparison","performLineComparison","text","options","processed","toLowerCase","replace","trim","originalLines","split","changedLines","diff","computeLineDiff","stats","linesAdded","linesRemoved","linesModified","originalResult","changedResult","original","forEach","lineInfo","index","lineObj","content","escapeHtml","type","lineNumber","push","changed","originalWords","splitIntoWords","changedWords","wordDiff","computeWordDiff","wordsAdded","wordsRemoved","originalHtml","changedHtml","item","concat","charDiff","computeCharDiff","charactersAdded","charactersRemoved","m","length","n","dp","Array","fill","map","i","j","Math","max","result","unshift","regex","match","originalChars","from","changedChars","div","document","createElement","textContent","innerHTML"],"sources":["C:/Users/Joem/quickdiff-react/src/utils/DiffEngine.js"],"sourcesContent":["export class DiffEngine {\r\n  performComparison(originalText, changedText, settings) {\r\n    const { diffMode, ignoreCase, ignoreWhitespace, ignorePunctuation } = settings;\r\n    \r\n    // Preprocess texts based on ignore options\r\n    const processedOriginal = this.preprocessText(originalText, { ignoreCase, ignoreWhitespace, ignorePunctuation });\r\n    const processedChanged = this.preprocessText(changedText, { ignoreCase, ignoreWhitespace, ignorePunctuation });\r\n    \r\n    switch (diffMode) {\r\n      case 'word':\r\n        return this.performWordComparison(processedOriginal, processedChanged);\r\n      case 'char':\r\n        return this.performCharComparison(processedOriginal, processedChanged);\r\n      default:\r\n        return this.performLineComparison(processedOriginal, processedChanged);\r\n    }\r\n  }\r\n\r\n  preprocessText(text, options) {\r\n    let processed = text;\r\n    \r\n    if (options.ignoreCase) {\r\n      processed = processed.toLowerCase();\r\n    }\r\n    \r\n    if (options.ignoreWhitespace) {\r\n      processed = processed.replace(/\\s+/g, ' ').trim();\r\n    }\r\n    \r\n    if (options.ignorePunctuation) {\r\n      processed = processed.replace(/[^\\w\\s]/g, '');\r\n    }\r\n    \r\n    return processed;\r\n  }\r\n\r\n  performLineComparison(originalText, changedText) {\r\n    const originalLines = originalText.split(/\\r?\\n/);\r\n    const changedLines = changedText.split(/\\r?\\n/);\r\n    \r\n    const diff = this.computeLineDiff(originalLines, changedLines);\r\n    \r\n    const stats = {\r\n      linesAdded: 0,\r\n      linesRemoved: 0,\r\n      linesModified: 0\r\n    };\r\n    \r\n    const originalResult = [];\r\n    const changedResult = [];\r\n    \r\n    // Process original lines\r\n    diff.original.forEach((lineInfo, index) => {\r\n      const lineObj = {\r\n        content: this.escapeHtml(lineInfo.content),\r\n        type: lineInfo.type,\r\n        lineNumber: index + 1\r\n      };\r\n      \r\n      if (lineInfo.type === 'removed') stats.linesRemoved++;\r\n      if (lineInfo.type === 'modified') stats.linesModified++;\r\n      \r\n      originalResult.push(lineObj);\r\n    });\r\n    \r\n    // Process changed lines\r\n    diff.changed.forEach((lineInfo, index) => {\r\n      const lineObj = {\r\n        content: this.escapeHtml(lineInfo.content),\r\n        type: lineInfo.type,\r\n        lineNumber: index + 1\r\n      };\r\n      \r\n      if (lineInfo.type === 'added') stats.linesAdded++;\r\n      \r\n      changedResult.push(lineObj);\r\n    });\r\n    \r\n    return {\r\n      originalLines: originalResult,\r\n      changedLines: changedResult,\r\n      stats\r\n    };\r\n  }\r\n\r\n  performWordComparison(originalText, changedText) {\r\n    const originalWords = this.splitIntoWords(originalText);\r\n    const changedWords = this.splitIntoWords(changedText);\r\n    \r\n    const wordDiff = this.computeWordDiff(originalWords, changedWords);\r\n    \r\n    const stats = {\r\n      wordsAdded: 0,\r\n      wordsRemoved: 0\r\n    };\r\n    \r\n    let originalHtml = '';\r\n    let changedHtml = '';\r\n    \r\n    // Process original words\r\n    wordDiff.original.forEach(item => {\r\n      if (item.type === 'removed') {\r\n        if (item.content.trim()) stats.wordsRemoved++;\r\n        originalHtml += `<span class=\"word-removed\">${this.escapeHtml(item.content)}</span>`;\r\n      } else {\r\n        originalHtml += this.escapeHtml(item.content);\r\n      }\r\n    });\r\n    \r\n    // Process changed words\r\n    wordDiff.changed.forEach(item => {\r\n      if (item.type === 'added') {\r\n        if (item.content.trim()) stats.wordsAdded++;\r\n        changedHtml += `<span class=\"word-added\">${this.escapeHtml(item.content)}</span>`;\r\n      } else {\r\n        changedHtml += this.escapeHtml(item.content);\r\n      }\r\n    });\r\n    \r\n    return {\r\n      originalLines: [{ content: originalHtml, type: '', lineNumber: 1 }],\r\n      changedLines: [{ content: changedHtml, type: '', lineNumber: 1 }],\r\n      stats\r\n    };\r\n  }\r\n\r\n  performCharComparison(originalText, changedText) {\r\n    const charDiff = this.computeCharDiff(originalText, changedText);\r\n    \r\n    const stats = {\r\n      charactersAdded: 0,\r\n      charactersRemoved: 0\r\n    };\r\n    \r\n    let originalHtml = '';\r\n    let changedHtml = '';\r\n    \r\n    charDiff.original.forEach(item => {\r\n      if (item.type === 'removed') {\r\n        stats.charactersRemoved++;\r\n        originalHtml += `<span class=\"char-removed\">${this.escapeHtml(item.content)}</span>`;\r\n      } else {\r\n        originalHtml += this.escapeHtml(item.content);\r\n      }\r\n    });\r\n    \r\n    charDiff.changed.forEach(item => {\r\n      if (item.type === 'added') {\r\n        stats.charactersAdded++;\r\n        changedHtml += `<span class=\"char-added\">${this.escapeHtml(item.content)}</span>`;\r\n      } else {\r\n        changedHtml += this.escapeHtml(item.content);\r\n      }\r\n    });\r\n    \r\n    return {\r\n      originalLines: [{ content: originalHtml, type: '', lineNumber: 1 }],\r\n      changedLines: [{ content: changedHtml, type: '', lineNumber: 1 }],\r\n      stats\r\n    };\r\n  }\r\n\r\n  computeLineDiff(originalLines, changedLines) {\r\n    const m = originalLines.length;\r\n    const n = changedLines.length;\r\n    \r\n    // Create DP table for LCS\r\n    const dp = Array(m + 1).fill(null).map(() => Array(n + 1).fill(0));\r\n    \r\n    // Fill the DP table\r\n    for (let i = 1; i <= m; i++) {\r\n      for (let j = 1; j <= n; j++) {\r\n        if (originalLines[i - 1] === changedLines[j - 1]) {\r\n          dp[i][j] = dp[i - 1][j - 1] + 1;\r\n        } else {\r\n          dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Backtrack to build the diff\r\n    const result = { original: [], changed: [] };\r\n    let i = m, j = n;\r\n    \r\n    while (i > 0 || j > 0) {\r\n      if (i > 0 && j > 0 && originalLines[i - 1] === changedLines[j - 1]) {\r\n        result.original.unshift({\r\n          content: originalLines[i - 1],\r\n          type: 'unchanged'\r\n        });\r\n        result.changed.unshift({\r\n          content: changedLines[j - 1],\r\n          type: 'unchanged'\r\n        });\r\n        i--; j--;\r\n      } else if (i > 0 && (j === 0 || dp[i - 1][j] >= dp[i][j - 1])) {\r\n        result.original.unshift({\r\n          content: originalLines[i - 1],\r\n          type: 'removed'\r\n        });\r\n        i--;\r\n      } else {\r\n        result.changed.unshift({\r\n          content: changedLines[j - 1],\r\n          type: 'added'\r\n        });\r\n        j--;\r\n      }\r\n    }\r\n    \r\n    return result;\r\n  }\r\n\r\n  splitIntoWords(text) {\r\n    const regex = /(\\S+|\\s+)/g;\r\n    return text.match(regex) || [];\r\n  }\r\n\r\n  computeWordDiff(originalWords, changedWords) {\r\n    const m = originalWords.length;\r\n    const n = changedWords.length;\r\n    \r\n    const dp = Array(m + 1).fill(null).map(() => Array(n + 1).fill(0));\r\n    \r\n    for (let i = 1; i <= m; i++) {\r\n      for (let j = 1; j <= n; j++) {\r\n        if (originalWords[i - 1] === changedWords[j - 1]) {\r\n          dp[i][j] = dp[i - 1][j - 1] + 1;\r\n        } else {\r\n          dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\r\n        }\r\n      }\r\n    }\r\n    \r\n    const result = { original: [], changed: [] };\r\n    let i = m, j = n;\r\n    \r\n    while (i > 0 || j > 0) {\r\n      if (i > 0 && j > 0 && originalWords[i - 1] === changedWords[j - 1]) {\r\n        result.original.unshift({ content: originalWords[i - 1], type: 'unchanged' });\r\n        result.changed.unshift({ content: changedWords[j - 1], type: 'unchanged' });\r\n        i--; j--;\r\n      } else if (i > 0 && (j === 0 || dp[i - 1][j] >= dp[i][j - 1])) {\r\n        result.original.unshift({ content: originalWords[i - 1], type: 'removed' });\r\n        i--;\r\n      } else {\r\n        result.changed.unshift({ content: changedWords[j - 1], type: 'added' });\r\n        j--;\r\n      }\r\n    }\r\n    \r\n    return result;\r\n  }\r\n\r\n  computeCharDiff(originalText, changedText) {\r\n    const originalChars = Array.from(originalText);\r\n    const changedChars = Array.from(changedText);\r\n    \r\n    const m = originalChars.length;\r\n    const n = changedChars.length;\r\n    \r\n    const dp = Array(m + 1).fill(null).map(() => Array(n + 1).fill(0));\r\n    \r\n    for (let i = 1; i <= m; i++) {\r\n      for (let j = 1; j <= n; j++) {\r\n        if (originalChars[i - 1] === changedChars[j - 1]) {\r\n          dp[i][j] = dp[i - 1][j - 1] + 1;\r\n        } else {\r\n          dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\r\n        }\r\n      }\r\n    }\r\n    \r\n    const result = { original: [], changed: [] };\r\n    let i = m, j = n;\r\n    \r\n    while (i > 0 || j > 0) {\r\n      if (i > 0 && j > 0 && originalChars[i - 1] === changedChars[j - 1]) {\r\n        result.original.unshift({ content: originalChars[i - 1], type: 'unchanged' });\r\n        result.changed.unshift({ content: changedChars[j - 1], type: 'unchanged' });\r\n        i--; j--;\r\n      } else if (i > 0 && (j === 0 || dp[i - 1][j] >= dp[i][j - 1])) {\r\n        result.original.unshift({ content: originalChars[i - 1], type: 'removed' });\r\n        i--;\r\n      } else {\r\n        result.changed.unshift({ content: changedChars[j - 1], type: 'added' });\r\n        j--;\r\n      }\r\n    }\r\n    \r\n    return result;\r\n  }\r\n\r\n  escapeHtml(text) {\r\n    const div = document.createElement('div');\r\n    div.textContent = text;\r\n    return div.innerHTML;\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}