{"ast":null,"code":"export class AIEngine {\n  generateAnalysis(type, originalText, changedText) {\n    switch (type) {\n      case 'explain':\n        return this.generateExplanation(originalText, changedText);\n      case 'rewrite':\n        return this.generateRewrite(originalText, changedText);\n      case 'summary':\n        return this.generateSummary(originalText, changedText);\n      case 'tone':\n        return this.generateToneAnalysis(originalText, changedText);\n      case 'cleanup':\n        return this.generateCleanup(originalText, changedText);\n      default:\n        return this.generateExplanation(originalText, changedText);\n    }\n  }\n  generateExplanation(originalText, changedText) {\n    const originalLines = originalText.split('\\n').length;\n    const changedLines = changedText.split('\\n').length;\n    const originalWords = originalText.split(/\\s+/).filter(w => w.length > 0).length;\n    const changedWords = changedText.split(/\\s+/).filter(w => w.length > 0).length;\n    const content = `\n      <div class=\"ai-explanation\">\n        <h4>üìä Text Analysis</h4>\n        <div class=\"analysis-stats\">\n          <div class=\"stat-item\">\n            <strong>Original Text:</strong> ${originalLines} lines, ${originalWords} words, ${originalText.length} characters\n          </div>\n          <div class=\"stat-item\">\n            <strong>Changed Text:</strong> ${changedLines} lines, ${changedWords} words, ${changedText.length} characters\n          </div>\n          <div class=\"stat-item\">\n            <strong>Difference:</strong> ${Math.abs(changedLines - originalLines)} lines, ${Math.abs(changedWords - originalWords)} words, ${Math.abs(changedText.length - originalText.length)} characters\n          </div>\n        </div>\n        \n        <h4>üîç Key Changes Detected</h4>\n        <ul>\n          ${originalLines !== changedLines ? `<li>Line count changed from ${originalLines} to ${changedLines}</li>` : ''}\n          ${originalWords !== changedWords ? `<li>Word count changed from ${originalWords} to ${changedWords}</li>` : ''}\n          ${originalText.length !== changedText.length ? `<li>Character count changed from ${originalText.length} to ${changedText.length}</li>` : ''}\n          ${originalText === changedText ? '<li>No changes detected - texts are identical</li>' : ''}\n        </ul>\n        \n        <h4>üí° Recommendations</h4>\n        <ul>\n          <li>Review highlighted differences in the comparison view</li>\n          <li>Check for formatting consistency between versions</li>\n          <li>Verify that important content hasn't been accidentally removed</li>\n          ${Math.abs(changedText.length - originalText.length) > originalText.length * 0.5 ? '<li>‚ö†Ô∏è Significant length change detected - review carefully</li>' : ''}\n        </ul>\n      </div>\n    `;\n    return {\n      title: 'üß† AI Explanation',\n      content,\n      type: 'explanation'\n    };\n  }\n  generateRewrite(originalText, changedText) {\n    const content = `\n      <div class=\"ai-rewrite\">\n        <h4>‚ú® Rewrite Suggestions</h4>\n        \n        <div class=\"suggestion-section\">\n          <h5>üìù Style Improvements</h5>\n          <ul>\n            <li>Consider breaking long sentences into shorter, more readable ones</li>\n            <li>Use active voice where possible for clearer communication</li>\n            <li>Ensure consistent terminology throughout the text</li>\n            <li>Remove redundant words and phrases</li>\n          </ul>\n        </div>\n        \n        <div class=\"suggestion-section\">\n          <h5>üéØ Clarity Enhancements</h5>\n          <ul>\n            <li>Add transitional phrases to improve flow</li>\n            <li>Define technical terms or acronyms on first use</li>\n            <li>Use bullet points or numbered lists for complex information</li>\n            <li>Ensure each paragraph has a clear main idea</li>\n          </ul>\n        </div>\n        \n        <div class=\"suggestion-section\">\n          <h5>üîß Structure Recommendations</h5>\n          <ul>\n            <li>Start with a clear introduction or summary</li>\n            <li>Organize content in logical order</li>\n            <li>Use headings and subheadings for better navigation</li>\n            <li>End with a conclusion or call to action</li>\n          </ul>\n        </div>\n      </div>\n    `;\n    return {\n      title: '‚ú® AI Rewrite Suggestions',\n      content,\n      type: 'rewrite'\n    };\n  }\n  generateSummary(originalText, changedText) {\n    const combinedText = originalText + '\\n\\n' + changedText;\n    const sentences = combinedText.split(/[.!?]+/).filter(s => s.trim().length > 10);\n    const keyPoints = sentences.slice(0, 3).map(s => s.trim());\n    const content = `\n      <div class=\"ai-summary\">\n        <h4>üìù Text Summary</h4>\n        \n        <div class=\"summary-section\">\n          <h5>üéØ Key Points</h5>\n          <ul>\n            ${keyPoints.map(point => `<li>${point}</li>`).join('')}\n          </ul>\n        </div>\n        \n        <div class=\"summary-section\">\n          <h5>üìä Overview</h5>\n          <p>The text contains ${sentences.length} main sentences covering various topics. \n          ${originalText && changedText ? 'Both original and changed versions have been analyzed.' : 'Single text version analyzed.'}</p>\n        </div>\n        \n        <div class=\"summary-section\">\n          <h5>üîç Main Themes</h5>\n          <ul>\n            <li>Primary content focus and structure</li>\n            <li>Key information and data points</li>\n            <li>Important conclusions or recommendations</li>\n          </ul>\n        </div>\n      </div>\n    `;\n    return {\n      title: 'üìù AI Summary',\n      content,\n      type: 'summary'\n    };\n  }\n  generateToneAnalysis(originalText, changedText) {\n    const analyzeText = text => {\n      const words = text.toLowerCase().split(/\\s+/);\n      const positiveWords = ['good', 'great', 'excellent', 'amazing', 'wonderful', 'fantastic', 'positive', 'success', 'achieve', 'improve'];\n      const negativeWords = ['bad', 'terrible', 'awful', 'horrible', 'negative', 'fail', 'problem', 'issue', 'error', 'wrong'];\n      const formalWords = ['therefore', 'furthermore', 'consequently', 'however', 'nevertheless', 'accordingly'];\n      const positiveCount = words.filter(w => positiveWords.includes(w)).length;\n      const negativeCount = words.filter(w => negativeWords.includes(w)).length;\n      const formalCount = words.filter(w => formalWords.includes(w)).length;\n      return {\n        positiveCount,\n        negativeCount,\n        formalCount,\n        totalWords: words.length\n      };\n    };\n    const originalAnalysis = analyzeText(originalText);\n    const changedAnalysis = analyzeText(changedText);\n    const content = `\n      <div class=\"ai-tone\">\n        <h4>üé≠ Tone Analysis</h4>\n        \n        <div class=\"tone-section\">\n          <h5>üìä Original Text Tone</h5>\n          <ul>\n            <li><strong>Sentiment:</strong> ${originalAnalysis.positiveCount > originalAnalysis.negativeCount ? 'Positive' : originalAnalysis.negativeCount > originalAnalysis.positiveCount ? 'Negative' : 'Neutral'}</li>\n            <li><strong>Formality:</strong> ${originalAnalysis.formalCount > 2 ? 'Formal' : 'Informal'}</li>\n            <li><strong>Positive indicators:</strong> ${originalAnalysis.positiveCount} words</li>\n            <li><strong>Negative indicators:</strong> ${originalAnalysis.negativeCount} words</li>\n          </ul>\n        </div>\n        \n        ${changedText ? `\n        <div class=\"tone-section\">\n          <h5>üìä Changed Text Tone</h5>\n          <ul>\n            <li><strong>Sentiment:</strong> ${changedAnalysis.positiveCount > changedAnalysis.negativeCount ? 'Positive' : changedAnalysis.negativeCount > changedAnalysis.positiveCount ? 'Negative' : 'Neutral'}</li>\n            <li><strong>Formality:</strong> ${changedAnalysis.formalCount > 2 ? 'Formal' : 'Informal'}</li>\n            <li><strong>Positive indicators:</strong> ${changedAnalysis.positiveCount} words</li>\n            <li><strong>Negative indicators:</strong> ${changedAnalysis.negativeCount} words</li>\n          </ul>\n        </div>\n        ` : ''}\n        \n        <div class=\"tone-section\">\n          <h5>üí° Tone Recommendations</h5>\n          <ul>\n            <li>Maintain consistent tone throughout the document</li>\n            <li>Consider your target audience when choosing formality level</li>\n            <li>Balance positive and negative language appropriately</li>\n            <li>Use active voice for more engaging tone</li>\n          </ul>\n        </div>\n      </div>\n    `;\n    return {\n      title: 'üé≠ AI Tone Analysis',\n      content,\n      type: 'tone'\n    };\n  }\n  generateCleanup(originalText, changedText) {\n    const cleanupSuggestions = [];\n\n    // Check for common issues\n    if (originalText.includes('  ')) cleanupSuggestions.push('Remove extra spaces');\n    if (originalText.includes('\\n\\n\\n')) cleanupSuggestions.push('Reduce excessive line breaks');\n    if (originalText.match(/[.]{2,}/)) cleanupSuggestions.push('Fix multiple periods');\n    if (originalText.match(/[!]{2,}/)) cleanupSuggestions.push('Fix multiple exclamation marks');\n    if (originalText.match(/[?]{2,}/)) cleanupSuggestions.push('Fix multiple question marks');\n    const content = `\n      <div class=\"ai-cleanup\">\n        <h4>üßπ Text Cleanup Analysis</h4>\n        \n        <div class=\"cleanup-section\">\n          <h5>üîç Issues Detected</h5>\n          ${cleanupSuggestions.length > 0 ? `\n            <ul>\n              ${cleanupSuggestions.map(suggestion => `<li>${suggestion}</li>`).join('')}\n            </ul>\n          ` : '<p>‚úÖ No major formatting issues detected!</p>'}\n        </div>\n        \n        <div class=\"cleanup-section\">\n          <h5>‚ú® Cleanup Recommendations</h5>\n          <ul>\n            <li>Remove trailing whitespace at line ends</li>\n            <li>Standardize line break usage</li>\n            <li>Fix inconsistent punctuation</li>\n            <li>Normalize quotation marks</li>\n            <li>Remove unnecessary special characters</li>\n          </ul>\n        </div>\n        \n        <div class=\"cleanup-section\">\n          <h5>üéØ Best Practices</h5>\n          <ul>\n            <li>Use single spaces between words</li>\n            <li>Use single line breaks between paragraphs</li>\n            <li>Be consistent with punctuation style</li>\n            <li>Remove empty lines at document start/end</li>\n          </ul>\n        </div>\n      </div>\n    `;\n    return {\n      title: 'üßπ AI Text Cleanup',\n      content,\n      type: 'cleanup'\n    };\n  }\n}","map":{"version":3,"names":["AIEngine","generateAnalysis","type","originalText","changedText","generateExplanation","generateRewrite","generateSummary","generateToneAnalysis","generateCleanup","originalLines","split","length","changedLines","originalWords","filter","w","changedWords","content","Math","abs","title","combinedText","sentences","s","trim","keyPoints","slice","map","point","join","analyzeText","text","words","toLowerCase","positiveWords","negativeWords","formalWords","positiveCount","includes","negativeCount","formalCount","totalWords","originalAnalysis","changedAnalysis","cleanupSuggestions","push","match","suggestion"],"sources":["C:/Users/Joem/quickdiff-react/src/utils/AIEngine.js"],"sourcesContent":["export class AIEngine {\r\n  generateAnalysis(type, originalText, changedText) {\r\n    switch (type) {\r\n      case 'explain':\r\n        return this.generateExplanation(originalText, changedText);\r\n      case 'rewrite':\r\n        return this.generateRewrite(originalText, changedText);\r\n      case 'summary':\r\n        return this.generateSummary(originalText, changedText);\r\n      case 'tone':\r\n        return this.generateToneAnalysis(originalText, changedText);\r\n      case 'cleanup':\r\n        return this.generateCleanup(originalText, changedText);\r\n      default:\r\n        return this.generateExplanation(originalText, changedText);\r\n    }\r\n  }\r\n\r\n  generateExplanation(originalText, changedText) {\r\n    const originalLines = originalText.split('\\n').length;\r\n    const changedLines = changedText.split('\\n').length;\r\n    const originalWords = originalText.split(/\\s+/).filter(w => w.length > 0).length;\r\n    const changedWords = changedText.split(/\\s+/).filter(w => w.length > 0).length;\r\n    \r\n    const content = `\r\n      <div class=\"ai-explanation\">\r\n        <h4>üìä Text Analysis</h4>\r\n        <div class=\"analysis-stats\">\r\n          <div class=\"stat-item\">\r\n            <strong>Original Text:</strong> ${originalLines} lines, ${originalWords} words, ${originalText.length} characters\r\n          </div>\r\n          <div class=\"stat-item\">\r\n            <strong>Changed Text:</strong> ${changedLines} lines, ${changedWords} words, ${changedText.length} characters\r\n          </div>\r\n          <div class=\"stat-item\">\r\n            <strong>Difference:</strong> ${Math.abs(changedLines - originalLines)} lines, ${Math.abs(changedWords - originalWords)} words, ${Math.abs(changedText.length - originalText.length)} characters\r\n          </div>\r\n        </div>\r\n        \r\n        <h4>üîç Key Changes Detected</h4>\r\n        <ul>\r\n          ${originalLines !== changedLines ? `<li>Line count changed from ${originalLines} to ${changedLines}</li>` : ''}\r\n          ${originalWords !== changedWords ? `<li>Word count changed from ${originalWords} to ${changedWords}</li>` : ''}\r\n          ${originalText.length !== changedText.length ? `<li>Character count changed from ${originalText.length} to ${changedText.length}</li>` : ''}\r\n          ${originalText === changedText ? '<li>No changes detected - texts are identical</li>' : ''}\r\n        </ul>\r\n        \r\n        <h4>üí° Recommendations</h4>\r\n        <ul>\r\n          <li>Review highlighted differences in the comparison view</li>\r\n          <li>Check for formatting consistency between versions</li>\r\n          <li>Verify that important content hasn't been accidentally removed</li>\r\n          ${Math.abs(changedText.length - originalText.length) > originalText.length * 0.5 ? '<li>‚ö†Ô∏è Significant length change detected - review carefully</li>' : ''}\r\n        </ul>\r\n      </div>\r\n    `;\r\n    \r\n    return {\r\n      title: 'üß† AI Explanation',\r\n      content,\r\n      type: 'explanation'\r\n    };\r\n  }\r\n\r\n  generateRewrite(originalText, changedText) {\r\n    const content = `\r\n      <div class=\"ai-rewrite\">\r\n        <h4>‚ú® Rewrite Suggestions</h4>\r\n        \r\n        <div class=\"suggestion-section\">\r\n          <h5>üìù Style Improvements</h5>\r\n          <ul>\r\n            <li>Consider breaking long sentences into shorter, more readable ones</li>\r\n            <li>Use active voice where possible for clearer communication</li>\r\n            <li>Ensure consistent terminology throughout the text</li>\r\n            <li>Remove redundant words and phrases</li>\r\n          </ul>\r\n        </div>\r\n        \r\n        <div class=\"suggestion-section\">\r\n          <h5>üéØ Clarity Enhancements</h5>\r\n          <ul>\r\n            <li>Add transitional phrases to improve flow</li>\r\n            <li>Define technical terms or acronyms on first use</li>\r\n            <li>Use bullet points or numbered lists for complex information</li>\r\n            <li>Ensure each paragraph has a clear main idea</li>\r\n          </ul>\r\n        </div>\r\n        \r\n        <div class=\"suggestion-section\">\r\n          <h5>üîß Structure Recommendations</h5>\r\n          <ul>\r\n            <li>Start with a clear introduction or summary</li>\r\n            <li>Organize content in logical order</li>\r\n            <li>Use headings and subheadings for better navigation</li>\r\n            <li>End with a conclusion or call to action</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    `;\r\n    \r\n    return {\r\n      title: '‚ú® AI Rewrite Suggestions',\r\n      content,\r\n      type: 'rewrite'\r\n    };\r\n  }\r\n\r\n  generateSummary(originalText, changedText) {\r\n    const combinedText = originalText + '\\n\\n' + changedText;\r\n    const sentences = combinedText.split(/[.!?]+/).filter(s => s.trim().length > 10);\r\n    const keyPoints = sentences.slice(0, 3).map(s => s.trim());\r\n    \r\n    const content = `\r\n      <div class=\"ai-summary\">\r\n        <h4>üìù Text Summary</h4>\r\n        \r\n        <div class=\"summary-section\">\r\n          <h5>üéØ Key Points</h5>\r\n          <ul>\r\n            ${keyPoints.map(point => `<li>${point}</li>`).join('')}\r\n          </ul>\r\n        </div>\r\n        \r\n        <div class=\"summary-section\">\r\n          <h5>üìä Overview</h5>\r\n          <p>The text contains ${sentences.length} main sentences covering various topics. \r\n          ${originalText && changedText ? 'Both original and changed versions have been analyzed.' : 'Single text version analyzed.'}</p>\r\n        </div>\r\n        \r\n        <div class=\"summary-section\">\r\n          <h5>üîç Main Themes</h5>\r\n          <ul>\r\n            <li>Primary content focus and structure</li>\r\n            <li>Key information and data points</li>\r\n            <li>Important conclusions or recommendations</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    `;\r\n    \r\n    return {\r\n      title: 'üìù AI Summary',\r\n      content,\r\n      type: 'summary'\r\n    };\r\n  }\r\n\r\n  generateToneAnalysis(originalText, changedText) {\r\n    const analyzeText = (text) => {\r\n      const words = text.toLowerCase().split(/\\s+/);\r\n      const positiveWords = ['good', 'great', 'excellent', 'amazing', 'wonderful', 'fantastic', 'positive', 'success', 'achieve', 'improve'];\r\n      const negativeWords = ['bad', 'terrible', 'awful', 'horrible', 'negative', 'fail', 'problem', 'issue', 'error', 'wrong'];\r\n      const formalWords = ['therefore', 'furthermore', 'consequently', 'however', 'nevertheless', 'accordingly'];\r\n      \r\n      const positiveCount = words.filter(w => positiveWords.includes(w)).length;\r\n      const negativeCount = words.filter(w => negativeWords.includes(w)).length;\r\n      const formalCount = words.filter(w => formalWords.includes(w)).length;\r\n      \r\n      return { positiveCount, negativeCount, formalCount, totalWords: words.length };\r\n    };\r\n    \r\n    const originalAnalysis = analyzeText(originalText);\r\n    const changedAnalysis = analyzeText(changedText);\r\n    \r\n    const content = `\r\n      <div class=\"ai-tone\">\r\n        <h4>üé≠ Tone Analysis</h4>\r\n        \r\n        <div class=\"tone-section\">\r\n          <h5>üìä Original Text Tone</h5>\r\n          <ul>\r\n            <li><strong>Sentiment:</strong> ${originalAnalysis.positiveCount > originalAnalysis.negativeCount ? 'Positive' : originalAnalysis.negativeCount > originalAnalysis.positiveCount ? 'Negative' : 'Neutral'}</li>\r\n            <li><strong>Formality:</strong> ${originalAnalysis.formalCount > 2 ? 'Formal' : 'Informal'}</li>\r\n            <li><strong>Positive indicators:</strong> ${originalAnalysis.positiveCount} words</li>\r\n            <li><strong>Negative indicators:</strong> ${originalAnalysis.negativeCount} words</li>\r\n          </ul>\r\n        </div>\r\n        \r\n        ${changedText ? `\r\n        <div class=\"tone-section\">\r\n          <h5>üìä Changed Text Tone</h5>\r\n          <ul>\r\n            <li><strong>Sentiment:</strong> ${changedAnalysis.positiveCount > changedAnalysis.negativeCount ? 'Positive' : changedAnalysis.negativeCount > changedAnalysis.positiveCount ? 'Negative' : 'Neutral'}</li>\r\n            <li><strong>Formality:</strong> ${changedAnalysis.formalCount > 2 ? 'Formal' : 'Informal'}</li>\r\n            <li><strong>Positive indicators:</strong> ${changedAnalysis.positiveCount} words</li>\r\n            <li><strong>Negative indicators:</strong> ${changedAnalysis.negativeCount} words</li>\r\n          </ul>\r\n        </div>\r\n        ` : ''}\r\n        \r\n        <div class=\"tone-section\">\r\n          <h5>üí° Tone Recommendations</h5>\r\n          <ul>\r\n            <li>Maintain consistent tone throughout the document</li>\r\n            <li>Consider your target audience when choosing formality level</li>\r\n            <li>Balance positive and negative language appropriately</li>\r\n            <li>Use active voice for more engaging tone</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    `;\r\n    \r\n    return {\r\n      title: 'üé≠ AI Tone Analysis',\r\n      content,\r\n      type: 'tone'\r\n    };\r\n  }\r\n\r\n  generateCleanup(originalText, changedText) {\r\n    const cleanupSuggestions = [];\r\n    \r\n    // Check for common issues\r\n    if (originalText.includes('  ')) cleanupSuggestions.push('Remove extra spaces');\r\n    if (originalText.includes('\\n\\n\\n')) cleanupSuggestions.push('Reduce excessive line breaks');\r\n    if (originalText.match(/[.]{2,}/)) cleanupSuggestions.push('Fix multiple periods');\r\n    if (originalText.match(/[!]{2,}/)) cleanupSuggestions.push('Fix multiple exclamation marks');\r\n    if (originalText.match(/[?]{2,}/)) cleanupSuggestions.push('Fix multiple question marks');\r\n    \r\n    const content = `\r\n      <div class=\"ai-cleanup\">\r\n        <h4>üßπ Text Cleanup Analysis</h4>\r\n        \r\n        <div class=\"cleanup-section\">\r\n          <h5>üîç Issues Detected</h5>\r\n          ${cleanupSuggestions.length > 0 ? `\r\n            <ul>\r\n              ${cleanupSuggestions.map(suggestion => `<li>${suggestion}</li>`).join('')}\r\n            </ul>\r\n          ` : '<p>‚úÖ No major formatting issues detected!</p>'}\r\n        </div>\r\n        \r\n        <div class=\"cleanup-section\">\r\n          <h5>‚ú® Cleanup Recommendations</h5>\r\n          <ul>\r\n            <li>Remove trailing whitespace at line ends</li>\r\n            <li>Standardize line break usage</li>\r\n            <li>Fix inconsistent punctuation</li>\r\n            <li>Normalize quotation marks</li>\r\n            <li>Remove unnecessary special characters</li>\r\n          </ul>\r\n        </div>\r\n        \r\n        <div class=\"cleanup-section\">\r\n          <h5>üéØ Best Practices</h5>\r\n          <ul>\r\n            <li>Use single spaces between words</li>\r\n            <li>Use single line breaks between paragraphs</li>\r\n            <li>Be consistent with punctuation style</li>\r\n            <li>Remove empty lines at document start/end</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    `;\r\n    \r\n    return {\r\n      title: 'üßπ AI Text Cleanup',\r\n      content,\r\n      type: 'cleanup'\r\n    };\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}