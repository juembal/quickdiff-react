{"ast":null,"code":"/**\r\n * Groq API Service for QuickDiff React App\r\n * Fast, reliable, and free AI API for text analysis\r\n * Get your free API key at: https://console.groq.com/\r\n */\n\nexport class GroqService {\n  constructor() {\n    this.config = {\n      apiKey: process.env.REACT_APP_GROQ_API_KEY || '',\n      // Groq API key from environment\n      baseUrl: 'https://api.groq.com/openai/v1/chat/completions',\n      model: 'llama-3.1-8b-instant',\n      // Fast and reliable model\n      maxTokens: 1000,\n      temperature: 0.7\n    };\n    this.loadConfig();\n  }\n  loadConfig() {\n    try {\n      const savedConfig = localStorage.getItem('quickdiff_groq_config');\n      if (savedConfig) {\n        const parsedConfig = JSON.parse(savedConfig);\n        delete parsedConfig.apiKey; // Don't override API key from environment\n        this.config = {\n          ...this.config,\n          ...parsedConfig\n        };\n      }\n\n      // Ensure environment variable always takes precedence\n      const envApiKey = process.env.REACT_APP_GROQ_API_KEY;\n      if (envApiKey) {\n        this.config.apiKey = envApiKey;\n      }\n    } catch (error) {\n      console.error('Error loading Groq config:', error);\n    }\n  }\n\n  // Check if Groq is properly configured\n  isConfigured() {\n    const hasKey = this.config.apiKey && this.config.apiKey.trim().length > 0;\n    const isValidKey = this.config.apiKey && this.config.apiKey.startsWith('gsk_');\n    const configured = hasKey && isValidKey;\n    console.log('🔍 Groq isConfigured check:', {\n      envVar: process.env.REACT_APP_GROQ_API_KEY ? 'Found' : 'Not found',\n      hasApiKey: !!this.config.apiKey,\n      apiKeyLength: this.config.apiKey ? this.config.apiKey.length : 0,\n      apiKeyPreview: this.config.apiKey ? `${this.config.apiKey.substring(0, 10)}...` : 'none',\n      startsWithGsk: isValidKey,\n      configured: configured\n    });\n    return configured;\n  }\n\n  // Call Groq API\n  async callGroqAPI(messages) {\n    console.log('🌐 Making Groq API call...');\n    console.log('🔑 Using API key:', this.config.apiKey ? `${this.config.apiKey.substring(0, 10)}...` : 'NONE');\n    const response = await fetch(this.config.baseUrl, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${this.config.apiKey}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        model: this.config.model,\n        messages: messages,\n        max_tokens: this.config.maxTokens,\n        temperature: this.config.temperature\n      })\n    });\n    console.log('📥 Response status:', response.status);\n    if (!response.ok) {\n      const error = await response.text();\n      console.error('❌ Groq API Error Response:', error);\n      throw new Error(`Groq API error: ${response.status} - ${error}`);\n    }\n    const result = await response.json();\n    console.log('✅ Groq API Success');\n    return result.choices[0].message.content;\n  }\n\n  // Generate analysis using Groq\n  async generateAnalysis(type, originalText, changedText) {\n    console.log('🚀 generateAnalysis called with type:', type);\n    console.log('🔧 isConfigured():', this.isConfigured());\n    if (!this.isConfigured()) {\n      console.log('❌ Groq API not configured, throwing error');\n      throw new Error('Groq API not configured. Please set up your API token.');\n    }\n    console.log('✅ Groq API configured, proceeding with analysis...');\n    try {\n      let analysis;\n      switch (type) {\n        case 'explain':\n          analysis = await this.generateExplanation(originalText, changedText);\n          break;\n        case 'rewrite':\n          analysis = await this.generateRewriteSuggestions(originalText, changedText);\n          break;\n        case 'summary':\n          analysis = await this.generateSummary(originalText, changedText);\n          break;\n        case 'tone':\n          analysis = await this.generateToneAnalysis(originalText, changedText);\n          break;\n        case 'cleanup':\n          analysis = await this.generateCleanupAnalysis(originalText, changedText);\n          break;\n        default:\n          analysis = await this.generateExplanation(originalText, changedText);\n      }\n      console.log('✅ Analysis generated successfully');\n      return this.formatResponse(type, analysis);\n    } catch (error) {\n      console.error('❌ Groq API Error:', error);\n      throw new Error(`Failed to generate ${type} analysis: ${error.message}`);\n    }\n  }\n\n  // Generate explanation analysis\n  async generateExplanation(originalText, changedText) {\n    console.log('📝 Generating explanation with Groq...');\n    const stats = this.calculateTextStats(originalText, changedText);\n    const messages = [{\n      role: \"system\",\n      content: \"You are an expert text analyst. Analyze the differences between two texts and provide clear, insightful explanations.\"\n    }, {\n      role: \"user\",\n      content: `Compare these two texts and explain the key differences:\n\nOriginal Text: \"${originalText.substring(0, 300)}${originalText.length > 300 ? '...' : ''}\"\n\nChanged Text: \"${changedText.substring(0, 300)}${changedText.length > 300 ? '...' : ''}\"\n\nPlease provide a detailed analysis of the differences, changes in meaning, style, and content structure.`\n    }];\n    try {\n      const aiInsight = await this.callGroqAPI(messages);\n      console.log('✅ Groq explanation received');\n\n      // Create a simple, clean analysis like ChatGPT with bold and emojis\n      const analysis = `📊 **Text Analysis**\n\n${aiInsight}\n\n📈 **Statistics:**\n- **Original:** ${stats.originalLines} lines, ${stats.originalWords} words, ${stats.originalChars} characters\n- **Changed:** ${stats.changedLines} lines, ${stats.changedWords} words, ${stats.changedChars} characters\n- **Net change:** ${Math.abs(stats.changedLines - stats.originalLines)} lines, ${Math.abs(stats.changedWords - stats.originalWords)} words, ${Math.abs(stats.changedChars - stats.originalChars)} characters\n\n🔍 **Key Findings:**\n${stats.originalLines !== stats.changedLines ? `• 📄 Line count changed from **${stats.originalLines}** to **${stats.changedLines}**` : ''}\n${stats.originalWords !== stats.changedWords ? `• 📝 Word count changed from **${stats.originalWords}** to **${stats.changedWords}**` : ''}\n${originalText === changedText ? '• ✅ **No changes detected** - texts are identical' : ''}\n${Math.abs(stats.changedChars - stats.originalChars) > stats.originalChars * 0.5 ? '• ⚠️ **Significant content change detected** (>50% length change)' : ''}\n${Math.abs(stats.changedChars - stats.originalChars) < stats.originalChars * 0.1 ? '• ✨ **Minor changes detected** (<10% length change)' : ''}`;\n      return analysis;\n    } catch (error) {\n      console.error('❌ Groq API failed for explanation:', error);\n      throw error;\n    }\n  }\n\n  // Generate rewrite suggestions\n  async generateRewriteSuggestions(originalText, changedText) {\n    console.log('✨ Generating rewrite suggestions with Groq...');\n    const combinedText = originalText + ' ' + changedText;\n    const messages = [{\n      role: \"system\",\n      content: \"You are an expert writing coach. Provide specific, actionable suggestions to improve text clarity, style, and readability.\"\n    }, {\n      role: \"user\",\n      content: `Please analyze this text and provide specific rewrite suggestions to improve clarity, style, and readability:\n\n\"${combinedText.substring(0, 400)}${combinedText.length > 400 ? '...' : ''}\"\n\nProvide concrete suggestions for improvement, including specific examples where possible.`\n    }];\n    try {\n      const suggestions = await this.callGroqAPI(messages);\n      console.log('✅ Groq rewrite suggestions received');\n\n      // Create clean rewrite suggestions like ChatGPT with bold and emojis\n      const rewriteAnalysis = `✨ **Writing Improvement Suggestions**\n\n${suggestions}\n\n📝 **General Writing Tips:**\n• 🎯 Use **clear, concise language** and avoid unnecessary jargon\n• 📏 Break up **long sentences** into shorter, more readable ones\n• 💪 Use **active voice** when possible for stronger impact\n• 🔄 Ensure **consistent terminology** and tone throughout\n• 🌊 Add **transitional phrases** to improve flow between ideas\n• 🧹 Remove **redundant words** and phrases\n• 📋 Use **specific examples** to support your points`;\n      return rewriteAnalysis;\n    } catch (error) {\n      console.error('❌ Groq API failed for rewrite suggestions:', error);\n      throw error;\n    }\n  }\n\n  // Generate summary\n  async generateSummary(originalText, changedText) {\n    console.log('📄 Generating summary with Groq...');\n    const combinedText = originalText + '\\n\\n' + changedText;\n    const messages = [{\n      role: \"system\",\n      content: \"You are an expert at creating concise, informative summaries. Focus on the key points and main ideas.\"\n    }, {\n      role: \"user\",\n      content: `Please provide a concise summary of these texts, highlighting the main points and any key differences:\n\n\"${combinedText.substring(0, 500)}${combinedText.length > 500 ? '...' : ''}\"\n\nFocus on the most important information and any significant changes between versions.`\n    }];\n    try {\n      const summary = await this.callGroqAPI(messages);\n      console.log('✅ Groq summary received');\n\n      // Create clean summary like ChatGPT with bold and emojis\n      const summaryAnalysis = `📝 **Summary**\n\n${summary}\n\n📊 **Document Overview:**\n• 📏 **Combined length:** ${combinedText.length} characters\n• 🔍 **Analysis scope:** Both original and changed versions\n• 🎯 **Focus:** Main points and key differences between versions\n• ⚡ **Processing:** AI-powered analysis using advanced language models\n\n💡 This summary captures the **most important information** and highlights **key changes** between the text versions.`;\n      return summaryAnalysis;\n    } catch (error) {\n      console.error('❌ Groq API failed for summary:', error);\n      throw error;\n    }\n  }\n\n  // Generate tone analysis\n  async generateToneAnalysis(originalText, changedText) {\n    console.log('🎭 Generating tone analysis with Groq...');\n    const messages = [{\n      role: \"system\",\n      content: \"You are an expert in linguistic analysis and tone assessment. Analyze the emotional tone, formality level, and overall sentiment of texts.\"\n    }, {\n      role: \"user\",\n      content: `Please analyze the tone and sentiment of these texts:\n\nOriginal Text: \"${originalText.substring(0, 300)}${originalText.length > 300 ? '...' : ''}\"\n\nChanged Text: \"${changedText.substring(0, 300)}${changedText.length > 300 ? '...' : ''}\"\n\nAnalyze: emotional tone, formality level, sentiment, audience appropriateness, and any tone shifts between versions.`\n    }];\n    try {\n      const toneAnalysis = await this.callGroqAPI(messages);\n      console.log('✅ Groq tone analysis received');\n\n      // Create clean tone analysis like ChatGPT with bold and emojis\n      const toneAnalysisResult = `🎭 **Tone Analysis**\n\n${toneAnalysis}\n\n💡 **Tone Guidelines:**\n• 🎯 Maintain **consistent voice** throughout your document\n• 👥 Match tone to your **target audience** and purpose\n• 🌡️ Consider the **emotional impact** of your word choices\n• ⚖️ Balance **professionalism** with accessibility\n• 🔄 Ensure tone shifts are **intentional** and serve a purpose\n• 🌍 Consider **cultural context** and reader expectations\n\n✨ **Remember:** Effective tone helps **convey your message clearly** and builds **connection** with your audience.`;\n      return toneAnalysisResult;\n    } catch (error) {\n      console.error('❌ Groq API failed for tone analysis:', error);\n      throw error;\n    }\n  }\n\n  // Generate cleanup analysis\n  async generateCleanupAnalysis(originalText, changedText) {\n    console.log('🧹 Generating cleanup analysis with Groq...');\n    const combinedText = originalText + '\\n' + changedText;\n    const messages = [{\n      role: \"system\",\n      content: \"You are an expert editor focused on text cleanup and formatting. Identify formatting issues, inconsistencies, and areas for improvement.\"\n    }, {\n      role: \"user\",\n      content: `Please analyze this text for formatting issues, inconsistencies, and cleanup opportunities:\n\n\"${combinedText.substring(0, 400)}${combinedText.length > 400 ? '...' : ''}\"\n\nLook for: spacing issues, punctuation problems, inconsistent formatting, redundant phrases, and other cleanup opportunities.`\n    }];\n    try {\n      const cleanupAnalysis = await this.callGroqAPI(messages);\n      console.log('✅ Groq cleanup analysis received');\n\n      // Create clean cleanup analysis like ChatGPT with bold and emojis\n      const cleanupResult = `🧹 **Text Cleanup Analysis**\n\n${cleanupAnalysis}\n\n✨ **Cleanup Checklist:**\n• 🔲 Remove **trailing whitespace** at line ends\n• 📏 Standardize **line break usage** throughout\n• 📝 Fix **inconsistent punctuation** patterns\n• 💬 Normalize **quotation marks** (straight vs. curly)\n• 🧽 Remove **unnecessary special characters**\n• 📐 Ensure **consistent spacing** around punctuation\n• 🔍 Check for **double spaces** and extra line breaks\n\n💡 These improvements will make your text **more professional** and **easier to read**.`;\n      return cleanupResult;\n    } catch (error) {\n      console.error('❌ Groq API failed for cleanup analysis:', error);\n      throw error;\n    }\n  }\n\n  // Helper methods\n  calculateTextStats(originalText, changedText) {\n    return {\n      originalLines: originalText.split('\\n').length,\n      changedLines: changedText.split('\\n').length,\n      originalWords: originalText.split(/\\s+/).filter(w => w.length > 0).length,\n      changedWords: changedText.split(/\\s+/).filter(w => w.length > 0).length,\n      originalChars: originalText.length,\n      changedChars: changedText.length\n    };\n  }\n\n  // Simple text cleaning for ChatGPT-style responses\n  cleanAIText(text) {\n    if (!text) return '';\n    return text.replace(/\\*+/g, '') // Remove asterisks\n    .replace(/\\s+/g, ' ') // Clean up spaces\n    .trim();\n  }\n\n  // Format the response into the expected structure\n  formatResponse(type, content) {\n    const typeIcons = {\n      explain: '🧠',\n      rewrite: '✨',\n      summary: '📝',\n      tone: '🎭',\n      cleanup: '🧹'\n    };\n    const typeTitles = {\n      explain: 'Groq AI Explanation',\n      rewrite: 'Groq AI Rewrite Suggestions',\n      summary: 'Groq AI Summary',\n      tone: 'Groq AI Tone Analysis',\n      cleanup: 'Groq AI Text Cleanup'\n    };\n    return {\n      title: `${typeIcons[type] || '🤖'} ${typeTitles[type] || 'Groq AI Analysis'}`,\n      content: content,\n      type: type\n    };\n  }\n\n  // Test the Groq connection\n  async testConnection() {\n    console.log('Testing Groq connection...');\n    console.log('API Key configured:', this.isConfigured());\n    if (!this.isConfigured()) {\n      return {\n        success: false,\n        error: 'API key not configured'\n      };\n    }\n    try {\n      const result = await this.callGroqAPI([{\n        role: \"user\",\n        content: \"Say 'Hello, Groq API is working!' in a friendly way.\"\n      }]);\n      console.log('API test result:', result);\n      return {\n        success: true,\n        response: result\n      };\n    } catch (error) {\n      console.error('API test failed:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Debug method\n  debugConfig() {\n    console.log('=== Groq Debug Info ===');\n    console.log('Environment API Key:', process.env.REACT_APP_GROQ_API_KEY ? 'Found' : 'Not found');\n    console.log('Config API Key:', this.config.apiKey ? 'Found' : 'Not found');\n    console.log('Is Configured:', this.isConfigured());\n    console.log('Base URL:', this.config.baseUrl);\n    console.log('Model:', this.config.model);\n    console.log('======================');\n  }\n}","map":{"version":3,"names":["GroqService","constructor","config","apiKey","process","env","REACT_APP_GROQ_API_KEY","baseUrl","model","maxTokens","temperature","loadConfig","savedConfig","localStorage","getItem","parsedConfig","JSON","parse","envApiKey","error","console","isConfigured","hasKey","trim","length","isValidKey","startsWith","configured","log","envVar","hasApiKey","apiKeyLength","apiKeyPreview","substring","startsWithGsk","callGroqAPI","messages","response","fetch","method","headers","body","stringify","max_tokens","status","ok","text","Error","result","json","choices","message","content","generateAnalysis","type","originalText","changedText","analysis","generateExplanation","generateRewriteSuggestions","generateSummary","generateToneAnalysis","generateCleanupAnalysis","formatResponse","stats","calculateTextStats","role","aiInsight","originalLines","originalWords","originalChars","changedLines","changedWords","changedChars","Math","abs","combinedText","suggestions","rewriteAnalysis","summary","summaryAnalysis","toneAnalysis","toneAnalysisResult","cleanupAnalysis","cleanupResult","split","filter","w","cleanAIText","replace","typeIcons","explain","rewrite","tone","cleanup","typeTitles","title","testConnection","success","debugConfig"],"sources":["C:/Users/Joem/quickdiff-react/src/utils/GroqService.js"],"sourcesContent":["/**\r\n * Groq API Service for QuickDiff React App\r\n * Fast, reliable, and free AI API for text analysis\r\n * Get your free API key at: https://console.groq.com/\r\n */\r\n\r\nexport class GroqService {\r\n  constructor() {\r\n    this.config = {\r\n      apiKey: process.env.REACT_APP_GROQ_API_KEY || '', // Groq API key from environment\r\n      baseUrl: 'https://api.groq.com/openai/v1/chat/completions',\r\n      model: 'llama-3.1-8b-instant', // Fast and reliable model\r\n      maxTokens: 1000,\r\n      temperature: 0.7\r\n    };\r\n    \r\n    this.loadConfig();\r\n  }\r\n\r\n  loadConfig() {\r\n    try {\r\n      const savedConfig = localStorage.getItem('quickdiff_groq_config');\r\n      if (savedConfig) {\r\n        const parsedConfig = JSON.parse(savedConfig);\r\n        delete parsedConfig.apiKey; // Don't override API key from environment\r\n        this.config = { ...this.config, ...parsedConfig };\r\n      }\r\n      \r\n      // Ensure environment variable always takes precedence\r\n      const envApiKey = process.env.REACT_APP_GROQ_API_KEY;\r\n      if (envApiKey) {\r\n        this.config.apiKey = envApiKey;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading Groq config:', error);\r\n    }\r\n  }\r\n\r\n  // Check if Groq is properly configured\r\n  isConfigured() {\r\n    const hasKey = this.config.apiKey && this.config.apiKey.trim().length > 0;\r\n    const isValidKey = this.config.apiKey && this.config.apiKey.startsWith('gsk_');\r\n    const configured = hasKey && isValidKey;\r\n    \r\n    console.log('🔍 Groq isConfigured check:', {\r\n      envVar: process.env.REACT_APP_GROQ_API_KEY ? 'Found' : 'Not found',\r\n      hasApiKey: !!this.config.apiKey,\r\n      apiKeyLength: this.config.apiKey ? this.config.apiKey.length : 0,\r\n      apiKeyPreview: this.config.apiKey ? `${this.config.apiKey.substring(0, 10)}...` : 'none',\r\n      startsWithGsk: isValidKey,\r\n      configured: configured\r\n    });\r\n    return configured;\r\n  }\r\n\r\n  // Call Groq API\r\n  async callGroqAPI(messages) {\r\n    console.log('🌐 Making Groq API call...');\r\n    console.log('🔑 Using API key:', this.config.apiKey ? `${this.config.apiKey.substring(0, 10)}...` : 'NONE');\r\n    \r\n    const response = await fetch(this.config.baseUrl, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${this.config.apiKey}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        model: this.config.model,\r\n        messages: messages,\r\n        max_tokens: this.config.maxTokens,\r\n        temperature: this.config.temperature\r\n      })\r\n    });\r\n\r\n    console.log('📥 Response status:', response.status);\r\n\r\n    if (!response.ok) {\r\n      const error = await response.text();\r\n      console.error('❌ Groq API Error Response:', error);\r\n      throw new Error(`Groq API error: ${response.status} - ${error}`);\r\n    }\r\n\r\n    const result = await response.json();\r\n    console.log('✅ Groq API Success');\r\n    return result.choices[0].message.content;\r\n  }\r\n\r\n  // Generate analysis using Groq\r\n  async generateAnalysis(type, originalText, changedText) {\r\n    console.log('🚀 generateAnalysis called with type:', type);\r\n    console.log('🔧 isConfigured():', this.isConfigured());\r\n    \r\n    if (!this.isConfigured()) {\r\n      console.log('❌ Groq API not configured, throwing error');\r\n      throw new Error('Groq API not configured. Please set up your API token.');\r\n    }\r\n\r\n    console.log('✅ Groq API configured, proceeding with analysis...');\r\n    try {\r\n      let analysis;\r\n      switch (type) {\r\n        case 'explain':\r\n          analysis = await this.generateExplanation(originalText, changedText);\r\n          break;\r\n        case 'rewrite':\r\n          analysis = await this.generateRewriteSuggestions(originalText, changedText);\r\n          break;\r\n        case 'summary':\r\n          analysis = await this.generateSummary(originalText, changedText);\r\n          break;\r\n        case 'tone':\r\n          analysis = await this.generateToneAnalysis(originalText, changedText);\r\n          break;\r\n        case 'cleanup':\r\n          analysis = await this.generateCleanupAnalysis(originalText, changedText);\r\n          break;\r\n        default:\r\n          analysis = await this.generateExplanation(originalText, changedText);\r\n      }\r\n      \r\n      console.log('✅ Analysis generated successfully');\r\n      return this.formatResponse(type, analysis);\r\n    } catch (error) {\r\n      console.error('❌ Groq API Error:', error);\r\n      throw new Error(`Failed to generate ${type} analysis: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // Generate explanation analysis\r\n  async generateExplanation(originalText, changedText) {\r\n    console.log('📝 Generating explanation with Groq...');\r\n    const stats = this.calculateTextStats(originalText, changedText);\r\n    \r\n    const messages = [\r\n      {\r\n        role: \"system\",\r\n        content: \"You are an expert text analyst. Analyze the differences between two texts and provide clear, insightful explanations.\"\r\n      },\r\n      {\r\n        role: \"user\",\r\n        content: `Compare these two texts and explain the key differences:\r\n\r\nOriginal Text: \"${originalText.substring(0, 300)}${originalText.length > 300 ? '...' : ''}\"\r\n\r\nChanged Text: \"${changedText.substring(0, 300)}${changedText.length > 300 ? '...' : ''}\"\r\n\r\nPlease provide a detailed analysis of the differences, changes in meaning, style, and content structure.`\r\n      }\r\n    ];\r\n\r\n    try {\r\n      const aiInsight = await this.callGroqAPI(messages);\r\n      console.log('✅ Groq explanation received');\r\n      \r\n      // Create a simple, clean analysis like ChatGPT with bold and emojis\r\n      const analysis = `📊 **Text Analysis**\r\n\r\n${aiInsight}\r\n\r\n📈 **Statistics:**\r\n- **Original:** ${stats.originalLines} lines, ${stats.originalWords} words, ${stats.originalChars} characters\r\n- **Changed:** ${stats.changedLines} lines, ${stats.changedWords} words, ${stats.changedChars} characters\r\n- **Net change:** ${Math.abs(stats.changedLines - stats.originalLines)} lines, ${Math.abs(stats.changedWords - stats.originalWords)} words, ${Math.abs(stats.changedChars - stats.originalChars)} characters\r\n\r\n🔍 **Key Findings:**\r\n${stats.originalLines !== stats.changedLines ? `• 📄 Line count changed from **${stats.originalLines}** to **${stats.changedLines}**` : ''}\r\n${stats.originalWords !== stats.changedWords ? `• 📝 Word count changed from **${stats.originalWords}** to **${stats.changedWords}**` : ''}\r\n${originalText === changedText ? '• ✅ **No changes detected** - texts are identical' : ''}\r\n${Math.abs(stats.changedChars - stats.originalChars) > stats.originalChars * 0.5 ? '• ⚠️ **Significant content change detected** (>50% length change)' : ''}\r\n${Math.abs(stats.changedChars - stats.originalChars) < stats.originalChars * 0.1 ? '• ✨ **Minor changes detected** (<10% length change)' : ''}`;\r\n\r\n      return analysis;\r\n    } catch (error) {\r\n      console.error('❌ Groq API failed for explanation:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Generate rewrite suggestions\r\n  async generateRewriteSuggestions(originalText, changedText) {\r\n    console.log('✨ Generating rewrite suggestions with Groq...');\r\n    const combinedText = originalText + ' ' + changedText;\r\n    \r\n    const messages = [\r\n      {\r\n        role: \"system\",\r\n        content: \"You are an expert writing coach. Provide specific, actionable suggestions to improve text clarity, style, and readability.\"\r\n      },\r\n      {\r\n        role: \"user\",\r\n        content: `Please analyze this text and provide specific rewrite suggestions to improve clarity, style, and readability:\r\n\r\n\"${combinedText.substring(0, 400)}${combinedText.length > 400 ? '...' : ''}\"\r\n\r\nProvide concrete suggestions for improvement, including specific examples where possible.`\r\n      }\r\n    ];\r\n\r\n    try {\r\n      const suggestions = await this.callGroqAPI(messages);\r\n      console.log('✅ Groq rewrite suggestions received');\r\n      \r\n      // Create clean rewrite suggestions like ChatGPT with bold and emojis\r\n      const rewriteAnalysis = `✨ **Writing Improvement Suggestions**\r\n\r\n${suggestions}\r\n\r\n📝 **General Writing Tips:**\r\n• 🎯 Use **clear, concise language** and avoid unnecessary jargon\r\n• 📏 Break up **long sentences** into shorter, more readable ones\r\n• 💪 Use **active voice** when possible for stronger impact\r\n• 🔄 Ensure **consistent terminology** and tone throughout\r\n• 🌊 Add **transitional phrases** to improve flow between ideas\r\n• 🧹 Remove **redundant words** and phrases\r\n• 📋 Use **specific examples** to support your points`;\r\n\r\n      return rewriteAnalysis;\r\n    } catch (error) {\r\n      console.error('❌ Groq API failed for rewrite suggestions:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Generate summary\r\n  async generateSummary(originalText, changedText) {\r\n    console.log('📄 Generating summary with Groq...');\r\n    const combinedText = originalText + '\\n\\n' + changedText;\r\n    \r\n    const messages = [\r\n      {\r\n        role: \"system\",\r\n        content: \"You are an expert at creating concise, informative summaries. Focus on the key points and main ideas.\"\r\n      },\r\n      {\r\n        role: \"user\",\r\n        content: `Please provide a concise summary of these texts, highlighting the main points and any key differences:\r\n\r\n\"${combinedText.substring(0, 500)}${combinedText.length > 500 ? '...' : ''}\"\r\n\r\nFocus on the most important information and any significant changes between versions.`\r\n      }\r\n    ];\r\n\r\n    try {\r\n      const summary = await this.callGroqAPI(messages);\r\n      console.log('✅ Groq summary received');\r\n      \r\n      // Create clean summary like ChatGPT with bold and emojis\r\n      const summaryAnalysis = `📝 **Summary**\r\n\r\n${summary}\r\n\r\n📊 **Document Overview:**\r\n• 📏 **Combined length:** ${combinedText.length} characters\r\n• 🔍 **Analysis scope:** Both original and changed versions\r\n• 🎯 **Focus:** Main points and key differences between versions\r\n• ⚡ **Processing:** AI-powered analysis using advanced language models\r\n\r\n💡 This summary captures the **most important information** and highlights **key changes** between the text versions.`;\r\n\r\n      return summaryAnalysis;\r\n    } catch (error) {\r\n      console.error('❌ Groq API failed for summary:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Generate tone analysis\r\n  async generateToneAnalysis(originalText, changedText) {\r\n    console.log('🎭 Generating tone analysis with Groq...');\r\n    \r\n    const messages = [\r\n      {\r\n        role: \"system\",\r\n        content: \"You are an expert in linguistic analysis and tone assessment. Analyze the emotional tone, formality level, and overall sentiment of texts.\"\r\n      },\r\n      {\r\n        role: \"user\",\r\n        content: `Please analyze the tone and sentiment of these texts:\r\n\r\nOriginal Text: \"${originalText.substring(0, 300)}${originalText.length > 300 ? '...' : ''}\"\r\n\r\nChanged Text: \"${changedText.substring(0, 300)}${changedText.length > 300 ? '...' : ''}\"\r\n\r\nAnalyze: emotional tone, formality level, sentiment, audience appropriateness, and any tone shifts between versions.`\r\n      }\r\n    ];\r\n\r\n    try {\r\n      const toneAnalysis = await this.callGroqAPI(messages);\r\n      console.log('✅ Groq tone analysis received');\r\n      \r\n      // Create clean tone analysis like ChatGPT with bold and emojis\r\n      const toneAnalysisResult = `🎭 **Tone Analysis**\r\n\r\n${toneAnalysis}\r\n\r\n💡 **Tone Guidelines:**\r\n• 🎯 Maintain **consistent voice** throughout your document\r\n• 👥 Match tone to your **target audience** and purpose\r\n• 🌡️ Consider the **emotional impact** of your word choices\r\n• ⚖️ Balance **professionalism** with accessibility\r\n• 🔄 Ensure tone shifts are **intentional** and serve a purpose\r\n• 🌍 Consider **cultural context** and reader expectations\r\n\r\n✨ **Remember:** Effective tone helps **convey your message clearly** and builds **connection** with your audience.`;\r\n\r\n      return toneAnalysisResult;\r\n    } catch (error) {\r\n      console.error('❌ Groq API failed for tone analysis:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Generate cleanup analysis\r\n  async generateCleanupAnalysis(originalText, changedText) {\r\n    console.log('🧹 Generating cleanup analysis with Groq...');\r\n    const combinedText = originalText + '\\n' + changedText;\r\n    \r\n    const messages = [\r\n      {\r\n        role: \"system\",\r\n        content: \"You are an expert editor focused on text cleanup and formatting. Identify formatting issues, inconsistencies, and areas for improvement.\"\r\n      },\r\n      {\r\n        role: \"user\",\r\n        content: `Please analyze this text for formatting issues, inconsistencies, and cleanup opportunities:\r\n\r\n\"${combinedText.substring(0, 400)}${combinedText.length > 400 ? '...' : ''}\"\r\n\r\nLook for: spacing issues, punctuation problems, inconsistent formatting, redundant phrases, and other cleanup opportunities.`\r\n      }\r\n    ];\r\n\r\n    try {\r\n      const cleanupAnalysis = await this.callGroqAPI(messages);\r\n      console.log('✅ Groq cleanup analysis received');\r\n      \r\n      // Create clean cleanup analysis like ChatGPT with bold and emojis\r\n      const cleanupResult = `🧹 **Text Cleanup Analysis**\r\n\r\n${cleanupAnalysis}\r\n\r\n✨ **Cleanup Checklist:**\r\n• 🔲 Remove **trailing whitespace** at line ends\r\n• 📏 Standardize **line break usage** throughout\r\n• 📝 Fix **inconsistent punctuation** patterns\r\n• 💬 Normalize **quotation marks** (straight vs. curly)\r\n• 🧽 Remove **unnecessary special characters**\r\n• 📐 Ensure **consistent spacing** around punctuation\r\n• 🔍 Check for **double spaces** and extra line breaks\r\n\r\n💡 These improvements will make your text **more professional** and **easier to read**.`;\r\n\r\n      return cleanupResult;\r\n    } catch (error) {\r\n      console.error('❌ Groq API failed for cleanup analysis:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Helper methods\r\n  calculateTextStats(originalText, changedText) {\r\n    return {\r\n      originalLines: originalText.split('\\n').length,\r\n      changedLines: changedText.split('\\n').length,\r\n      originalWords: originalText.split(/\\s+/).filter(w => w.length > 0).length,\r\n      changedWords: changedText.split(/\\s+/).filter(w => w.length > 0).length,\r\n      originalChars: originalText.length,\r\n      changedChars: changedText.length\r\n    };\r\n  }\r\n\r\n  // Simple text cleaning for ChatGPT-style responses\r\n  cleanAIText(text) {\r\n    if (!text) return '';\r\n    \r\n    return text\r\n      .replace(/\\*+/g, '') // Remove asterisks\r\n      .replace(/\\s+/g, ' ') // Clean up spaces\r\n      .trim();\r\n  }\r\n\r\n  // Format the response into the expected structure\r\n  formatResponse(type, content) {\r\n    const typeIcons = {\r\n      explain: '🧠',\r\n      rewrite: '✨',\r\n      summary: '📝',\r\n      tone: '🎭',\r\n      cleanup: '🧹'\r\n    };\r\n\r\n    const typeTitles = {\r\n      explain: 'Groq AI Explanation',\r\n      rewrite: 'Groq AI Rewrite Suggestions',\r\n      summary: 'Groq AI Summary',\r\n      tone: 'Groq AI Tone Analysis',\r\n      cleanup: 'Groq AI Text Cleanup'\r\n    };\r\n\r\n    return {\r\n      title: `${typeIcons[type] || '🤖'} ${typeTitles[type] || 'Groq AI Analysis'}`,\r\n      content: content,\r\n      type: type\r\n    };\r\n  }\r\n\r\n  // Test the Groq connection\r\n  async testConnection() {\r\n    console.log('Testing Groq connection...');\r\n    console.log('API Key configured:', this.isConfigured());\r\n    \r\n    if (!this.isConfigured()) {\r\n      return { success: false, error: 'API key not configured' };\r\n    }\r\n    \r\n    try {\r\n      const result = await this.callGroqAPI([\r\n        { role: \"user\", content: \"Say 'Hello, Groq API is working!' in a friendly way.\" }\r\n      ]);\r\n      console.log('API test result:', result);\r\n      return { success: true, response: result };\r\n    } catch (error) {\r\n      console.error('API test failed:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n\r\n  // Debug method\r\n  debugConfig() {\r\n    console.log('=== Groq Debug Info ===');\r\n    console.log('Environment API Key:', process.env.REACT_APP_GROQ_API_KEY ? 'Found' : 'Not found');\r\n    console.log('Config API Key:', this.config.apiKey ? 'Found' : 'Not found');\r\n    console.log('Is Configured:', this.isConfigured());\r\n    console.log('Base URL:', this.config.baseUrl);\r\n    console.log('Model:', this.config.model);\r\n    console.log('======================');\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}