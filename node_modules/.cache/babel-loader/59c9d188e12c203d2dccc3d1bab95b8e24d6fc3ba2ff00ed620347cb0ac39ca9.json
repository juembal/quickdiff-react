{"ast":null,"code":"/**\r\n * Language Auto-Detection Utility\r\n * Detects programming language based on content patterns\r\n */\n\nexport class LanguageDetector {\n  constructor() {\n    this.patterns = {\n      javascript: [/\\b(function|const|let|var|class|import|export|require)\\b/, /\\b(console\\.log|document\\.|window\\.)\\b/, /\\b(async|await|Promise|setTimeout)\\b/, /\\b(React|useState|useEffect|props)\\b/, /\\b(npm|node|express|axios)\\b/, /\\.(js|jsx|ts|tsx)$/i, /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*$/m, /\\b(if|else|for|while|switch|case|break|continue|return)\\b/],\n      python: [/\\b(def|class|import|from|as|if|elif|else|for|while|try|except|finally|with|lambda)\\b/, /\\b(print|input|len|range|enumerate|zip)\\b/, /\\b(self|__init__|__name__|__main__)\\b/, /\\.(py|pyw)$/i, /#.*$/m, /\\b(True|False|None)\\b/, /\\b(and|or|not|in|is)\\b/],\n      java: [/\\b(public|private|protected|static|final|abstract|class|interface|extends|implements)\\b/, /\\b(String|int|double|float|boolean|char|void|Object)\\b/, /\\b(System\\.out\\.println|System\\.out\\.print)\\b/, /\\.(java)$/i, /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*$/m, /\\b(if|else|for|while|switch|case|break|continue|return|try|catch|finally)\\b/],\n      html: [/<\\/?[a-z][\\s\\S]*>/i, /<!DOCTYPE\\s+html>/i, /<(html|head|body|div|span|p|a|img|script|style|link|meta)\\b/i, /\\.(html|htm)$/i, /<!--[\\s\\S]*?-->/, /<\\w+(\\s+\\w+(\\s*=\\s*(\"[^\"]*\"|'[^']*'|[^\\s>]+))?)*\\s*\\/?>/],\n      css: [/\\{[^}]*\\}/, /\\.(css|scss|sass|less)$/i, /@(media|import|keyframes|font-face)/, /\\b(color|background|margin|padding|border|width|height|font|display)\\b:/, /\\/\\*[\\s\\S]*?\\*\\//, /#[a-fA-F0-9]{3,6}\\b/, /\\b(px|em|rem|vh|vw|%)\\b/],\n      json: [/^\\s*[\\{\\[]/, /\\.(json)$/i, /\"[^\"]*\"\\s*:\\s*(\"[^\"]*\"|\\d+|true|false|null|\\{|\\[)/, /^\\s*\\{[\\s\\S]*\\}\\s*$/, /^\\s*\\[[\\s\\S]*\\]\\s*$/],\n      xml: [/<\\?xml\\s+version/i, /\\.(xml|xsd|xsl|xslt)$/i, /<\\w+(\\s+\\w+\\s*=\\s*\"[^\"]*\")*\\s*\\/?>[\\s\\S]*<\\/\\w+>/, /<!--[\\s\\S]*?-->/],\n      markdown: [/\\.(md|markdown)$/i, /^#{1,6}\\s+/m, /\\*\\*[^*]+\\*\\*|\\*[^*]+\\*/, /`[^`]+`|```[\\s\\S]*?```/, /^\\s*[-*+]\\s+/m, /^\\s*\\d+\\.\\s+/m, /\\[([^\\]]+)\\]\\(([^)]+)\\)/],\n      sql: [/\\b(SELECT|FROM|WHERE|INSERT|UPDATE|DELETE|CREATE|DROP|ALTER|TABLE|DATABASE)\\b/i, /\\b(JOIN|INNER|LEFT|RIGHT|OUTER|ON|GROUP BY|ORDER BY|HAVING)\\b/i, /\\.(sql)$/i, /--.*$/m, /\\/\\*[\\s\\S]*?\\*\\//],\n      php: [/<\\?php/, /\\.(php|phtml)$/i, /\\$\\w+/, /\\b(echo|print|var_dump|isset|empty|array|function|class|public|private|protected)\\b/, /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*$|#.*$/m],\n      c: [/\\.(c|h)$/i, /#include\\s*<[^>]+>/, /\\b(int|char|float|double|void|struct|typedef|enum)\\b/, /\\b(printf|scanf|malloc|free|sizeof)\\b/, /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*$/m],\n      cpp: [/\\.(cpp|cxx|cc|hpp|hxx)$/i, /#include\\s*<[^>]+>/, /\\b(std::|cout|cin|endl|vector|string|class|public|private|protected)\\b/, /\\b(int|char|float|double|void|bool|auto)\\b/, /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*$/m],\n      csharp: [/\\.(cs)$/i, /\\b(using|namespace|class|public|private|protected|static|void|string|int|bool)\\b/, /\\b(Console\\.WriteLine|Console\\.Write)\\b/, /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*$/m],\n      ruby: [/\\.(rb)$/i, /\\b(def|class|module|end|if|elsif|else|unless|case|when|for|while|until|do|begin|rescue|ensure)\\b/, /\\b(puts|print|p|gets|require|include)\\b/, /#.*$/m, /\\b(true|false|nil)\\b/],\n      go: [/\\.(go)$/i, /\\b(package|import|func|var|const|type|struct|interface|map|chan)\\b/, /\\b(fmt\\.Print|fmt\\.Println|fmt\\.Printf)\\b/, /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*$/m],\n      rust: [/\\.(rs)$/i, /\\b(fn|let|mut|const|struct|enum|impl|trait|use|mod|pub|crate)\\b/, /\\b(println!|print!|panic!|vec!)\\b/, /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*$/m],\n      yaml: [/\\.(yml|yaml)$/i, /^[\\s]*[\\w-]+\\s*:/m, /^[\\s]*-\\s+/m, /#.*$/m],\n      dockerfile: [/\\.(dockerfile|Dockerfile)$/i, /\\b(FROM|RUN|COPY|ADD|WORKDIR|EXPOSE|CMD|ENTRYPOINT|ENV|ARG)\\b/i],\n      shell: [/\\.(sh|bash|zsh|fish)$/i, /^#!/, /\\b(echo|cd|ls|grep|awk|sed|cat|chmod|chown)\\b/, /#.*$/m, /\\$\\{?\\w+\\}?/]\n    };\n    this.fileExtensions = {\n      js: 'javascript',\n      jsx: 'javascript',\n      ts: 'javascript',\n      tsx: 'javascript',\n      py: 'python',\n      pyw: 'python',\n      java: 'java',\n      html: 'html',\n      htm: 'html',\n      css: 'css',\n      scss: 'css',\n      sass: 'css',\n      less: 'css',\n      json: 'json',\n      xml: 'xml',\n      xsd: 'xml',\n      xsl: 'xml',\n      xslt: 'xml',\n      md: 'markdown',\n      markdown: 'markdown',\n      sql: 'sql',\n      php: 'php',\n      phtml: 'php',\n      c: 'c',\n      h: 'c',\n      cpp: 'cpp',\n      cxx: 'cpp',\n      cc: 'cpp',\n      hpp: 'cpp',\n      hxx: 'cpp',\n      cs: 'csharp',\n      rb: 'ruby',\n      go: 'go',\n      rs: 'rust',\n      yml: 'yaml',\n      yaml: 'yaml',\n      sh: 'shell',\n      bash: 'shell',\n      zsh: 'shell',\n      fish: 'shell'\n    };\n  }\n\n  /**\r\n   * Detect language from filename\r\n   */\n  detectFromFilename(filename) {\n    var _filename$split$pop;\n    if (!filename) return null;\n    const extension = (_filename$split$pop = filename.split('.').pop()) === null || _filename$split$pop === void 0 ? void 0 : _filename$split$pop.toLowerCase();\n    return this.fileExtensions[extension] || null;\n  }\n\n  /**\r\n   * Detect language from content\r\n   */\n  detectFromContent(content) {\n    if (!content || content.trim().length === 0) return 'plaintext';\n    const scores = {};\n\n    // Initialize scores\n    Object.keys(this.patterns).forEach(lang => {\n      scores[lang] = 0;\n    });\n\n    // Score each language based on pattern matches\n    Object.entries(this.patterns).forEach(([language, patterns]) => {\n      patterns.forEach(pattern => {\n        const matches = content.match(pattern);\n        if (matches) {\n          scores[language] += matches.length;\n\n          // Bonus for strong indicators\n          if (this.isStrongIndicator(pattern, language)) {\n            scores[language] += 5;\n          }\n        }\n      });\n    });\n\n    // Find the language with the highest score\n    const sortedLanguages = Object.entries(scores).sort(([, a], [, b]) => b - a).filter(([, score]) => score > 0);\n    if (sortedLanguages.length === 0) {\n      return 'plaintext';\n    }\n    const [topLanguage, topScore] = sortedLanguages[0];\n\n    // Require minimum confidence\n    if (topScore < 2) {\n      return 'plaintext';\n    }\n    return topLanguage;\n  }\n\n  /**\r\n   * Check if pattern is a strong indicator for a language\r\n   */\n  isStrongIndicator(pattern, language) {\n    var _strongIndicators$lan;\n    const strongIndicators = {\n      javascript: [/\\b(React|useState|useEffect|props)\\b/, /\\b(console\\.log|document\\.|window\\.)\\b/],\n      python: [/\\b(def|class|import|from)\\b/, /\\b(__init__|__name__|__main__)\\b/],\n      java: [/\\b(public\\s+class|public\\s+static\\s+void\\s+main)\\b/, /\\b(System\\.out\\.println)\\b/],\n      html: [/<!DOCTYPE\\s+html>/i, /<html\\b/i],\n      css: [/@(media|import|keyframes)/, /\\{[^}]*\\}/],\n      json: [/^\\s*[\\{\\[]/, /\"[^\"]*\"\\s*:\\s*/],\n      xml: [/<\\?xml\\s+version/i],\n      markdown: [/^#{1,6}\\s+/m, /```[\\s\\S]*?```/],\n      sql: [/\\b(SELECT|FROM|WHERE)\\b/i],\n      php: [/<\\?php/],\n      shell: [/^#!/]\n    };\n    return ((_strongIndicators$lan = strongIndicators[language]) === null || _strongIndicators$lan === void 0 ? void 0 : _strongIndicators$lan.some(indicator => indicator.toString() === pattern.toString())) || false;\n  }\n\n  /**\r\n   * Auto-detect language with confidence score\r\n   */\n  autoDetect(content, filename = null) {\n    // First try filename detection\n    const filenameLanguage = this.detectFromFilename(filename);\n    if (filenameLanguage) {\n      return {\n        language: filenameLanguage,\n        confidence: 'high',\n        method: 'filename'\n      };\n    }\n\n    // Then try content detection\n    const contentLanguage = this.detectFromContent(content);\n\n    // Calculate confidence based on content analysis\n    let confidence = 'low';\n    if (contentLanguage !== 'plaintext') {\n      const patterns = this.patterns[contentLanguage] || [];\n      const matchCount = patterns.reduce((count, pattern) => {\n        const matches = content.match(pattern);\n        return count + (matches ? matches.length : 0);\n      }, 0);\n      if (matchCount >= 10) confidence = 'high';else if (matchCount >= 5) confidence = 'medium';\n    }\n    return {\n      language: contentLanguage,\n      confidence,\n      method: 'content'\n    };\n  }\n\n  /**\r\n   * Get all supported languages\r\n   */\n  getSupportedLanguages() {\n    return ['plaintext', ...Object.keys(this.patterns).sort()];\n  }\n}\nexport default LanguageDetector;","map":{"version":3,"names":["LanguageDetector","constructor","patterns","javascript","python","java","html","css","json","xml","markdown","sql","php","c","cpp","csharp","ruby","go","rust","yaml","dockerfile","shell","fileExtensions","js","jsx","ts","tsx","py","pyw","htm","scss","sass","less","xsd","xsl","xslt","md","phtml","h","cxx","cc","hpp","hxx","cs","rb","rs","yml","sh","bash","zsh","fish","detectFromFilename","filename","_filename$split$pop","extension","split","pop","toLowerCase","detectFromContent","content","trim","length","scores","Object","keys","forEach","lang","entries","language","pattern","matches","match","isStrongIndicator","sortedLanguages","sort","a","b","filter","score","topLanguage","topScore","_strongIndicators$lan","strongIndicators","some","indicator","toString","autoDetect","filenameLanguage","confidence","method","contentLanguage","matchCount","reduce","count","getSupportedLanguages"],"sources":["C:/Users/Joem/quickdiff-react/src/utils/LanguageDetector.js"],"sourcesContent":["/**\r\n * Language Auto-Detection Utility\r\n * Detects programming language based on content patterns\r\n */\r\n\r\nexport class LanguageDetector {\r\n  constructor() {\r\n    this.patterns = {\r\n      javascript: [\r\n        /\\b(function|const|let|var|class|import|export|require)\\b/,\r\n        /\\b(console\\.log|document\\.|window\\.)\\b/,\r\n        /\\b(async|await|Promise|setTimeout)\\b/,\r\n        /\\b(React|useState|useEffect|props)\\b/,\r\n        /\\b(npm|node|express|axios)\\b/,\r\n        /\\.(js|jsx|ts|tsx)$/i,\r\n        /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*$/m,\r\n        /\\b(if|else|for|while|switch|case|break|continue|return)\\b/\r\n      ],\r\n      python: [\r\n        /\\b(def|class|import|from|as|if|elif|else|for|while|try|except|finally|with|lambda)\\b/,\r\n        /\\b(print|input|len|range|enumerate|zip)\\b/,\r\n        /\\b(self|__init__|__name__|__main__)\\b/,\r\n        /\\.(py|pyw)$/i,\r\n        /#.*$/m,\r\n        /\\b(True|False|None)\\b/,\r\n        /\\b(and|or|not|in|is)\\b/\r\n      ],\r\n      java: [\r\n        /\\b(public|private|protected|static|final|abstract|class|interface|extends|implements)\\b/,\r\n        /\\b(String|int|double|float|boolean|char|void|Object)\\b/,\r\n        /\\b(System\\.out\\.println|System\\.out\\.print)\\b/,\r\n        /\\.(java)$/i,\r\n        /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*$/m,\r\n        /\\b(if|else|for|while|switch|case|break|continue|return|try|catch|finally)\\b/\r\n      ],\r\n      html: [\r\n        /<\\/?[a-z][\\s\\S]*>/i,\r\n        /<!DOCTYPE\\s+html>/i,\r\n        /<(html|head|body|div|span|p|a|img|script|style|link|meta)\\b/i,\r\n        /\\.(html|htm)$/i,\r\n        /<!--[\\s\\S]*?-->/,\r\n        /<\\w+(\\s+\\w+(\\s*=\\s*(\"[^\"]*\"|'[^']*'|[^\\s>]+))?)*\\s*\\/?>/\r\n      ],\r\n      css: [\r\n        /\\{[^}]*\\}/,\r\n        /\\.(css|scss|sass|less)$/i,\r\n        /@(media|import|keyframes|font-face)/,\r\n        /\\b(color|background|margin|padding|border|width|height|font|display)\\b:/,\r\n        /\\/\\*[\\s\\S]*?\\*\\//,\r\n        /#[a-fA-F0-9]{3,6}\\b/,\r\n        /\\b(px|em|rem|vh|vw|%)\\b/\r\n      ],\r\n      json: [\r\n        /^\\s*[\\{\\[]/,\r\n        /\\.(json)$/i,\r\n        /\"[^\"]*\"\\s*:\\s*(\"[^\"]*\"|\\d+|true|false|null|\\{|\\[)/,\r\n        /^\\s*\\{[\\s\\S]*\\}\\s*$/,\r\n        /^\\s*\\[[\\s\\S]*\\]\\s*$/\r\n      ],\r\n      xml: [\r\n        /<\\?xml\\s+version/i,\r\n        /\\.(xml|xsd|xsl|xslt)$/i,\r\n        /<\\w+(\\s+\\w+\\s*=\\s*\"[^\"]*\")*\\s*\\/?>[\\s\\S]*<\\/\\w+>/,\r\n        /<!--[\\s\\S]*?-->/\r\n      ],\r\n      markdown: [\r\n        /\\.(md|markdown)$/i,\r\n        /^#{1,6}\\s+/m,\r\n        /\\*\\*[^*]+\\*\\*|\\*[^*]+\\*/,\r\n        /`[^`]+`|```[\\s\\S]*?```/,\r\n        /^\\s*[-*+]\\s+/m,\r\n        /^\\s*\\d+\\.\\s+/m,\r\n        /\\[([^\\]]+)\\]\\(([^)]+)\\)/\r\n      ],\r\n      sql: [\r\n        /\\b(SELECT|FROM|WHERE|INSERT|UPDATE|DELETE|CREATE|DROP|ALTER|TABLE|DATABASE)\\b/i,\r\n        /\\b(JOIN|INNER|LEFT|RIGHT|OUTER|ON|GROUP BY|ORDER BY|HAVING)\\b/i,\r\n        /\\.(sql)$/i,\r\n        /--.*$/m,\r\n        /\\/\\*[\\s\\S]*?\\*\\//\r\n      ],\r\n      php: [\r\n        /<\\?php/,\r\n        /\\.(php|phtml)$/i,\r\n        /\\$\\w+/,\r\n        /\\b(echo|print|var_dump|isset|empty|array|function|class|public|private|protected)\\b/,\r\n        /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*$|#.*$/m\r\n      ],\r\n      c: [\r\n        /\\.(c|h)$/i,\r\n        /#include\\s*<[^>]+>/,\r\n        /\\b(int|char|float|double|void|struct|typedef|enum)\\b/,\r\n        /\\b(printf|scanf|malloc|free|sizeof)\\b/,\r\n        /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*$/m\r\n      ],\r\n      cpp: [\r\n        /\\.(cpp|cxx|cc|hpp|hxx)$/i,\r\n        /#include\\s*<[^>]+>/,\r\n        /\\b(std::|cout|cin|endl|vector|string|class|public|private|protected)\\b/,\r\n        /\\b(int|char|float|double|void|bool|auto)\\b/,\r\n        /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*$/m\r\n      ],\r\n      csharp: [\r\n        /\\.(cs)$/i,\r\n        /\\b(using|namespace|class|public|private|protected|static|void|string|int|bool)\\b/,\r\n        /\\b(Console\\.WriteLine|Console\\.Write)\\b/,\r\n        /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*$/m\r\n      ],\r\n      ruby: [\r\n        /\\.(rb)$/i,\r\n        /\\b(def|class|module|end|if|elsif|else|unless|case|when|for|while|until|do|begin|rescue|ensure)\\b/,\r\n        /\\b(puts|print|p|gets|require|include)\\b/,\r\n        /#.*$/m,\r\n        /\\b(true|false|nil)\\b/\r\n      ],\r\n      go: [\r\n        /\\.(go)$/i,\r\n        /\\b(package|import|func|var|const|type|struct|interface|map|chan)\\b/,\r\n        /\\b(fmt\\.Print|fmt\\.Println|fmt\\.Printf)\\b/,\r\n        /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*$/m\r\n      ],\r\n      rust: [\r\n        /\\.(rs)$/i,\r\n        /\\b(fn|let|mut|const|struct|enum|impl|trait|use|mod|pub|crate)\\b/,\r\n        /\\b(println!|print!|panic!|vec!)\\b/,\r\n        /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*$/m\r\n      ],\r\n      yaml: [\r\n        /\\.(yml|yaml)$/i,\r\n        /^[\\s]*[\\w-]+\\s*:/m,\r\n        /^[\\s]*-\\s+/m,\r\n        /#.*$/m\r\n      ],\r\n      dockerfile: [\r\n        /\\.(dockerfile|Dockerfile)$/i,\r\n        /\\b(FROM|RUN|COPY|ADD|WORKDIR|EXPOSE|CMD|ENTRYPOINT|ENV|ARG)\\b/i\r\n      ],\r\n      shell: [\r\n        /\\.(sh|bash|zsh|fish)$/i,\r\n        /^#!/,\r\n        /\\b(echo|cd|ls|grep|awk|sed|cat|chmod|chown)\\b/,\r\n        /#.*$/m,\r\n        /\\$\\{?\\w+\\}?/\r\n      ]\r\n    };\r\n\r\n    this.fileExtensions = {\r\n      js: 'javascript',\r\n      jsx: 'javascript',\r\n      ts: 'javascript',\r\n      tsx: 'javascript',\r\n      py: 'python',\r\n      pyw: 'python',\r\n      java: 'java',\r\n      html: 'html',\r\n      htm: 'html',\r\n      css: 'css',\r\n      scss: 'css',\r\n      sass: 'css',\r\n      less: 'css',\r\n      json: 'json',\r\n      xml: 'xml',\r\n      xsd: 'xml',\r\n      xsl: 'xml',\r\n      xslt: 'xml',\r\n      md: 'markdown',\r\n      markdown: 'markdown',\r\n      sql: 'sql',\r\n      php: 'php',\r\n      phtml: 'php',\r\n      c: 'c',\r\n      h: 'c',\r\n      cpp: 'cpp',\r\n      cxx: 'cpp',\r\n      cc: 'cpp',\r\n      hpp: 'cpp',\r\n      hxx: 'cpp',\r\n      cs: 'csharp',\r\n      rb: 'ruby',\r\n      go: 'go',\r\n      rs: 'rust',\r\n      yml: 'yaml',\r\n      yaml: 'yaml',\r\n      sh: 'shell',\r\n      bash: 'shell',\r\n      zsh: 'shell',\r\n      fish: 'shell'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Detect language from filename\r\n   */\r\n  detectFromFilename(filename) {\r\n    if (!filename) return null;\r\n    \r\n    const extension = filename.split('.').pop()?.toLowerCase();\r\n    return this.fileExtensions[extension] || null;\r\n  }\r\n\r\n  /**\r\n   * Detect language from content\r\n   */\r\n  detectFromContent(content) {\r\n    if (!content || content.trim().length === 0) return 'plaintext';\r\n\r\n    const scores = {};\r\n    \r\n    // Initialize scores\r\n    Object.keys(this.patterns).forEach(lang => {\r\n      scores[lang] = 0;\r\n    });\r\n\r\n    // Score each language based on pattern matches\r\n    Object.entries(this.patterns).forEach(([language, patterns]) => {\r\n      patterns.forEach(pattern => {\r\n        const matches = content.match(pattern);\r\n        if (matches) {\r\n          scores[language] += matches.length;\r\n          \r\n          // Bonus for strong indicators\r\n          if (this.isStrongIndicator(pattern, language)) {\r\n            scores[language] += 5;\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    // Find the language with the highest score\r\n    const sortedLanguages = Object.entries(scores)\r\n      .sort(([,a], [,b]) => b - a)\r\n      .filter(([,score]) => score > 0);\r\n\r\n    if (sortedLanguages.length === 0) {\r\n      return 'plaintext';\r\n    }\r\n\r\n    const [topLanguage, topScore] = sortedLanguages[0];\r\n    \r\n    // Require minimum confidence\r\n    if (topScore < 2) {\r\n      return 'plaintext';\r\n    }\r\n\r\n    return topLanguage;\r\n  }\r\n\r\n  /**\r\n   * Check if pattern is a strong indicator for a language\r\n   */\r\n  isStrongIndicator(pattern, language) {\r\n    const strongIndicators = {\r\n      javascript: [/\\b(React|useState|useEffect|props)\\b/, /\\b(console\\.log|document\\.|window\\.)\\b/],\r\n      python: [/\\b(def|class|import|from)\\b/, /\\b(__init__|__name__|__main__)\\b/],\r\n      java: [/\\b(public\\s+class|public\\s+static\\s+void\\s+main)\\b/, /\\b(System\\.out\\.println)\\b/],\r\n      html: [/<!DOCTYPE\\s+html>/i, /<html\\b/i],\r\n      css: [/@(media|import|keyframes)/, /\\{[^}]*\\}/],\r\n      json: [/^\\s*[\\{\\[]/, /\"[^\"]*\"\\s*:\\s*/],\r\n      xml: [/<\\?xml\\s+version/i],\r\n      markdown: [/^#{1,6}\\s+/m, /```[\\s\\S]*?```/],\r\n      sql: [/\\b(SELECT|FROM|WHERE)\\b/i],\r\n      php: [/<\\?php/],\r\n      shell: [/^#!/]\r\n    };\r\n\r\n    return strongIndicators[language]?.some(indicator => \r\n      indicator.toString() === pattern.toString()\r\n    ) || false;\r\n  }\r\n\r\n  /**\r\n   * Auto-detect language with confidence score\r\n   */\r\n  autoDetect(content, filename = null) {\r\n    // First try filename detection\r\n    const filenameLanguage = this.detectFromFilename(filename);\r\n    if (filenameLanguage) {\r\n      return {\r\n        language: filenameLanguage,\r\n        confidence: 'high',\r\n        method: 'filename'\r\n      };\r\n    }\r\n\r\n    // Then try content detection\r\n    const contentLanguage = this.detectFromContent(content);\r\n    \r\n    // Calculate confidence based on content analysis\r\n    let confidence = 'low';\r\n    if (contentLanguage !== 'plaintext') {\r\n      const patterns = this.patterns[contentLanguage] || [];\r\n      const matchCount = patterns.reduce((count, pattern) => {\r\n        const matches = content.match(pattern);\r\n        return count + (matches ? matches.length : 0);\r\n      }, 0);\r\n      \r\n      if (matchCount >= 10) confidence = 'high';\r\n      else if (matchCount >= 5) confidence = 'medium';\r\n    }\r\n\r\n    return {\r\n      language: contentLanguage,\r\n      confidence,\r\n      method: 'content'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get all supported languages\r\n   */\r\n  getSupportedLanguages() {\r\n    return [\r\n      'plaintext',\r\n      ...Object.keys(this.patterns).sort()\r\n    ];\r\n  }\r\n}\r\n\r\nexport default LanguageDetector;"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,OAAO,MAAMA,gBAAgB,CAAC;EAC5BC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,QAAQ,GAAG;MACdC,UAAU,EAAE,CACV,0DAA0D,EAC1D,wCAAwC,EACxC,sCAAsC,EACtC,sCAAsC,EACtC,8BAA8B,EAC9B,qBAAqB,EACrB,2BAA2B,EAC3B,2DAA2D,CAC5D;MACDC,MAAM,EAAE,CACN,sFAAsF,EACtF,2CAA2C,EAC3C,uCAAuC,EACvC,cAAc,EACd,OAAO,EACP,uBAAuB,EACvB,wBAAwB,CACzB;MACDC,IAAI,EAAE,CACJ,yFAAyF,EACzF,wDAAwD,EACxD,+CAA+C,EAC/C,YAAY,EACZ,2BAA2B,EAC3B,6EAA6E,CAC9E;MACDC,IAAI,EAAE,CACJ,oBAAoB,EACpB,oBAAoB,EACpB,8DAA8D,EAC9D,gBAAgB,EAChB,iBAAiB,EACjB,yDAAyD,CAC1D;MACDC,GAAG,EAAE,CACH,WAAW,EACX,0BAA0B,EAC1B,qCAAqC,EACrC,yEAAyE,EACzE,kBAAkB,EAClB,qBAAqB,EACrB,yBAAyB,CAC1B;MACDC,IAAI,EAAE,CACJ,YAAY,EACZ,YAAY,EACZ,mDAAmD,EACnD,qBAAqB,EACrB,qBAAqB,CACtB;MACDC,GAAG,EAAE,CACH,mBAAmB,EACnB,wBAAwB,EACxB,kDAAkD,EAClD,iBAAiB,CAClB;MACDC,QAAQ,EAAE,CACR,mBAAmB,EACnB,aAAa,EACb,yBAAyB,EACzB,wBAAwB,EACxB,eAAe,EACf,eAAe,EACf,yBAAyB,CAC1B;MACDC,GAAG,EAAE,CACH,gFAAgF,EAChF,gEAAgE,EAChE,WAAW,EACX,QAAQ,EACR,kBAAkB,CACnB;MACDC,GAAG,EAAE,CACH,QAAQ,EACR,iBAAiB,EACjB,OAAO,EACP,qFAAqF,EACrF,gCAAgC,CACjC;MACDC,CAAC,EAAE,CACD,WAAW,EACX,oBAAoB,EACpB,sDAAsD,EACtD,uCAAuC,EACvC,2BAA2B,CAC5B;MACDC,GAAG,EAAE,CACH,0BAA0B,EAC1B,oBAAoB,EACpB,wEAAwE,EACxE,4CAA4C,EAC5C,2BAA2B,CAC5B;MACDC,MAAM,EAAE,CACN,UAAU,EACV,kFAAkF,EAClF,yCAAyC,EACzC,2BAA2B,CAC5B;MACDC,IAAI,EAAE,CACJ,UAAU,EACV,kGAAkG,EAClG,yCAAyC,EACzC,OAAO,EACP,sBAAsB,CACvB;MACDC,EAAE,EAAE,CACF,UAAU,EACV,oEAAoE,EACpE,2CAA2C,EAC3C,2BAA2B,CAC5B;MACDC,IAAI,EAAE,CACJ,UAAU,EACV,iEAAiE,EACjE,mCAAmC,EACnC,2BAA2B,CAC5B;MACDC,IAAI,EAAE,CACJ,gBAAgB,EAChB,mBAAmB,EACnB,aAAa,EACb,OAAO,CACR;MACDC,UAAU,EAAE,CACV,6BAA6B,EAC7B,gEAAgE,CACjE;MACDC,KAAK,EAAE,CACL,wBAAwB,EACxB,KAAK,EACL,+CAA+C,EAC/C,OAAO,EACP,aAAa;IAEjB,CAAC;IAED,IAAI,CAACC,cAAc,GAAG;MACpBC,EAAE,EAAE,YAAY;MAChBC,GAAG,EAAE,YAAY;MACjBC,EAAE,EAAE,YAAY;MAChBC,GAAG,EAAE,YAAY;MACjBC,EAAE,EAAE,QAAQ;MACZC,GAAG,EAAE,QAAQ;MACbvB,IAAI,EAAE,MAAM;MACZC,IAAI,EAAE,MAAM;MACZuB,GAAG,EAAE,MAAM;MACXtB,GAAG,EAAE,KAAK;MACVuB,IAAI,EAAE,KAAK;MACXC,IAAI,EAAE,KAAK;MACXC,IAAI,EAAE,KAAK;MACXxB,IAAI,EAAE,MAAM;MACZC,GAAG,EAAE,KAAK;MACVwB,GAAG,EAAE,KAAK;MACVC,GAAG,EAAE,KAAK;MACVC,IAAI,EAAE,KAAK;MACXC,EAAE,EAAE,UAAU;MACd1B,QAAQ,EAAE,UAAU;MACpBC,GAAG,EAAE,KAAK;MACVC,GAAG,EAAE,KAAK;MACVyB,KAAK,EAAE,KAAK;MACZxB,CAAC,EAAE,GAAG;MACNyB,CAAC,EAAE,GAAG;MACNxB,GAAG,EAAE,KAAK;MACVyB,GAAG,EAAE,KAAK;MACVC,EAAE,EAAE,KAAK;MACTC,GAAG,EAAE,KAAK;MACVC,GAAG,EAAE,KAAK;MACVC,EAAE,EAAE,QAAQ;MACZC,EAAE,EAAE,MAAM;MACV3B,EAAE,EAAE,IAAI;MACR4B,EAAE,EAAE,MAAM;MACVC,GAAG,EAAE,MAAM;MACX3B,IAAI,EAAE,MAAM;MACZ4B,EAAE,EAAE,OAAO;MACXC,IAAI,EAAE,OAAO;MACbC,GAAG,EAAE,OAAO;MACZC,IAAI,EAAE;IACR,CAAC;EACH;;EAEA;AACF;AACA;EACEC,kBAAkBA,CAACC,QAAQ,EAAE;IAAA,IAAAC,mBAAA;IAC3B,IAAI,CAACD,QAAQ,EAAE,OAAO,IAAI;IAE1B,MAAME,SAAS,IAAAD,mBAAA,GAAGD,QAAQ,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC,cAAAH,mBAAA,uBAAzBA,mBAAA,CAA2BI,WAAW,CAAC,CAAC;IAC1D,OAAO,IAAI,CAACnC,cAAc,CAACgC,SAAS,CAAC,IAAI,IAAI;EAC/C;;EAEA;AACF;AACA;EACEI,iBAAiBA,CAACC,OAAO,EAAE;IACzB,IAAI,CAACA,OAAO,IAAIA,OAAO,CAACC,IAAI,CAAC,CAAC,CAACC,MAAM,KAAK,CAAC,EAAE,OAAO,WAAW;IAE/D,MAAMC,MAAM,GAAG,CAAC,CAAC;;IAEjB;IACAC,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC9D,QAAQ,CAAC,CAAC+D,OAAO,CAACC,IAAI,IAAI;MACzCJ,MAAM,CAACI,IAAI,CAAC,GAAG,CAAC;IAClB,CAAC,CAAC;;IAEF;IACAH,MAAM,CAACI,OAAO,CAAC,IAAI,CAACjE,QAAQ,CAAC,CAAC+D,OAAO,CAAC,CAAC,CAACG,QAAQ,EAAElE,QAAQ,CAAC,KAAK;MAC9DA,QAAQ,CAAC+D,OAAO,CAACI,OAAO,IAAI;QAC1B,MAAMC,OAAO,GAAGX,OAAO,CAACY,KAAK,CAACF,OAAO,CAAC;QACtC,IAAIC,OAAO,EAAE;UACXR,MAAM,CAACM,QAAQ,CAAC,IAAIE,OAAO,CAACT,MAAM;;UAElC;UACA,IAAI,IAAI,CAACW,iBAAiB,CAACH,OAAO,EAAED,QAAQ,CAAC,EAAE;YAC7CN,MAAM,CAACM,QAAQ,CAAC,IAAI,CAAC;UACvB;QACF;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACA,MAAMK,eAAe,GAAGV,MAAM,CAACI,OAAO,CAACL,MAAM,CAAC,CAC3CY,IAAI,CAAC,CAAC,GAAEC,CAAC,CAAC,EAAE,GAAEC,CAAC,CAAC,KAAKA,CAAC,GAAGD,CAAC,CAAC,CAC3BE,MAAM,CAAC,CAAC,GAAEC,KAAK,CAAC,KAAKA,KAAK,GAAG,CAAC,CAAC;IAElC,IAAIL,eAAe,CAACZ,MAAM,KAAK,CAAC,EAAE;MAChC,OAAO,WAAW;IACpB;IAEA,MAAM,CAACkB,WAAW,EAAEC,QAAQ,CAAC,GAAGP,eAAe,CAAC,CAAC,CAAC;;IAElD;IACA,IAAIO,QAAQ,GAAG,CAAC,EAAE;MAChB,OAAO,WAAW;IACpB;IAEA,OAAOD,WAAW;EACpB;;EAEA;AACF;AACA;EACEP,iBAAiBA,CAACH,OAAO,EAAED,QAAQ,EAAE;IAAA,IAAAa,qBAAA;IACnC,MAAMC,gBAAgB,GAAG;MACvB/E,UAAU,EAAE,CAAC,sCAAsC,EAAE,wCAAwC,CAAC;MAC9FC,MAAM,EAAE,CAAC,6BAA6B,EAAE,kCAAkC,CAAC;MAC3EC,IAAI,EAAE,CAAC,oDAAoD,EAAE,4BAA4B,CAAC;MAC1FC,IAAI,EAAE,CAAC,oBAAoB,EAAE,UAAU,CAAC;MACxCC,GAAG,EAAE,CAAC,2BAA2B,EAAE,WAAW,CAAC;MAC/CC,IAAI,EAAE,CAAC,YAAY,EAAE,gBAAgB,CAAC;MACtCC,GAAG,EAAE,CAAC,mBAAmB,CAAC;MAC1BC,QAAQ,EAAE,CAAC,aAAa,EAAE,gBAAgB,CAAC;MAC3CC,GAAG,EAAE,CAAC,0BAA0B,CAAC;MACjCC,GAAG,EAAE,CAAC,QAAQ,CAAC;MACfS,KAAK,EAAE,CAAC,KAAK;IACf,CAAC;IAED,OAAO,EAAA4D,qBAAA,GAAAC,gBAAgB,CAACd,QAAQ,CAAC,cAAAa,qBAAA,uBAA1BA,qBAAA,CAA4BE,IAAI,CAACC,SAAS,IAC/CA,SAAS,CAACC,QAAQ,CAAC,CAAC,KAAKhB,OAAO,CAACgB,QAAQ,CAAC,CAC5C,CAAC,KAAI,KAAK;EACZ;;EAEA;AACF;AACA;EACEC,UAAUA,CAAC3B,OAAO,EAAEP,QAAQ,GAAG,IAAI,EAAE;IACnC;IACA,MAAMmC,gBAAgB,GAAG,IAAI,CAACpC,kBAAkB,CAACC,QAAQ,CAAC;IAC1D,IAAImC,gBAAgB,EAAE;MACpB,OAAO;QACLnB,QAAQ,EAAEmB,gBAAgB;QAC1BC,UAAU,EAAE,MAAM;QAClBC,MAAM,EAAE;MACV,CAAC;IACH;;IAEA;IACA,MAAMC,eAAe,GAAG,IAAI,CAAChC,iBAAiB,CAACC,OAAO,CAAC;;IAEvD;IACA,IAAI6B,UAAU,GAAG,KAAK;IACtB,IAAIE,eAAe,KAAK,WAAW,EAAE;MACnC,MAAMxF,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACwF,eAAe,CAAC,IAAI,EAAE;MACrD,MAAMC,UAAU,GAAGzF,QAAQ,CAAC0F,MAAM,CAAC,CAACC,KAAK,EAAExB,OAAO,KAAK;QACrD,MAAMC,OAAO,GAAGX,OAAO,CAACY,KAAK,CAACF,OAAO,CAAC;QACtC,OAAOwB,KAAK,IAAIvB,OAAO,GAAGA,OAAO,CAACT,MAAM,GAAG,CAAC,CAAC;MAC/C,CAAC,EAAE,CAAC,CAAC;MAEL,IAAI8B,UAAU,IAAI,EAAE,EAAEH,UAAU,GAAG,MAAM,CAAC,KACrC,IAAIG,UAAU,IAAI,CAAC,EAAEH,UAAU,GAAG,QAAQ;IACjD;IAEA,OAAO;MACLpB,QAAQ,EAAEsB,eAAe;MACzBF,UAAU;MACVC,MAAM,EAAE;IACV,CAAC;EACH;;EAEA;AACF;AACA;EACEK,qBAAqBA,CAAA,EAAG;IACtB,OAAO,CACL,WAAW,EACX,GAAG/B,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC9D,QAAQ,CAAC,CAACwE,IAAI,CAAC,CAAC,CACrC;EACH;AACF;AAEA,eAAe1E,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}