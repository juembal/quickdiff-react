{"ast":null,"code":"import _objectSpread from\"C:/Users/Joem/quickdiff-react/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\r\n * Enhanced Language Auto-Detection Utility\r\n * Detects programming language based on content patterns with improved accuracy\r\n */export class LanguageDetector{constructor(){this.patterns={javascript:{strong:[/\\b(const|let|var)\\s+\\w+\\s*=/,/\\b(function|async\\s+function)\\s*\\w*\\s*\\(/,/\\b(React|useState|useEffect|useContext|props)\\b/,/\\b(console\\.(log|error|warn))\\s*\\(/,/\\b(document\\.|window\\.)\\w+/,/\\b(require|import|export)\\s*\\(/,/\\bexport\\s+(default\\s+)?/,/=>\\s*[{(]/,/\\.(js|jsx|ts|tsx)$/i],medium:[/\\b(if|else|for|while|switch|case|break|continue|return)\\b/,/\\b(setTimeout|setInterval|Promise|async|await)\\b/,/\\b(null|undefined|NaN|Infinity)\\b/,/\\/\\/.*$/m,/\\/\\*[\\s\\S]*?\\*\\//,/\\b(true|false)\\b/,/\\$\\{[^}]*\\}/],weak:[/\\b(npm|node|express|axios|webpack)\\b/,/\\.(json|js)\"/]},python:{strong:[/\\bdef\\s+\\w+\\s*\\(/,/\\bclass\\s+\\w+\\s*(\\([^)]*\\))?\\s*:/,/\\bfrom\\s+\\w+\\s+import\\b/,/\\bimport\\s+\\w+/,/\\b(if|elif|else)\\s+.*:/,/\\bfor\\s+\\w+\\s+in\\b/,/\\bwhile\\s+.*:/,/\\b(try|except|finally)\\s*:/,/\\bwith\\s+.*:/,/\\.(py|pyw)$/i],medium:[/\\b(self|__init__|__name__|__main__)\\b/,/\\b(print|input|len|range|enumerate|zip)\\b/,/\\b(True|False|None)\\b/,/\\b(and|or|not|in|is)\\b/,/#.*$/m,/\"\"\"[\\s\\S]*?\"\"\"/,/'''[\\s\\S]*?'''/],weak:[/\\bindent/,/\\bpip\\s+install\\b/]},java:{strong:[/\\bpublic\\s+class\\s+\\w+/,/\\bpublic\\s+static\\s+void\\s+main\\s*\\(/,/\\b(public|private|protected)\\s+(static\\s+)?\\w+\\s+\\w+\\s*\\(/,/\\bSystem\\.out\\.(println|print)\\s*\\(/,/\\b(extends|implements)\\s+\\w+/,/\\.(java)$/i],medium:[/\\b(String|int|double|float|boolean|char|void|Object)\\b/,/\\b(if|else|for|while|switch|case|break|continue|return|try|catch|finally)\\b/,/\\b(public|private|protected|static|final|abstract)\\b/,/\\/\\/.*$/m,/\\/\\*[\\s\\S]*?\\*\\//,/\\bnew\\s+\\w+\\s*\\(/],weak:[/\\bimport\\s+java\\./,/\\bpackage\\s+\\w+/]},html:{strong:[/<!DOCTYPE\\s+html>/i,/<html\\b[^>]*>/i,/<(head|body|div|span|p|a|img|script|style|link|meta)\\b[^>]*>/i,/\\.(html|htm)$/i],medium:[/<\\/?[a-z][\\s\\S]*?>/i,/<!--[\\s\\S]*?-->/,/<\\w+(\\s+\\w+(\\s*=\\s*(\"[^\"]*\"|'[^']*'|[^\\s>]+))?)*\\s*\\/?>/],weak:[]},css:{strong:[/[.#]?[\\w-]+\\s*\\{[^}]*\\}/,/@(media|import|keyframes|font-face)\\b/,/\\.(css|scss|sass|less)$/i],medium:[/\\b(color|background|margin|padding|border|width|height|font|display|position|flex|grid)\\s*:/,/#[a-fA-F0-9]{3,8}\\b/,/\\b\\d+(px|em|rem|vh|vw|%|pt|pc|in|cm|mm|ex|ch)\\b/,/\\/\\*[\\s\\S]*?\\*\\//,/rgba?\\([^)]+\\)/],weak:[/\\b(hover|focus|active|visited)\\b/]},json:{strong:[/^\\s*\\{[\\s\\S]*\\}\\s*$/,/^\\s*\\[[\\s\\S]*\\]\\s*$/,/\"[^\"]*\"\\s*:\\s*(\"[^\"]*\"|\\d+|true|false|null|\\{|\\[)/,/\\.(json)$/i],medium:[/^\\s*[{[]/,/\"[^\"]*\"\\s*:/,/:\\s*(true|false|null)\\b/],weak:[]},xml:{strong:[/<\\?xml\\s+version/i,/\\.(xml|xsd|xsl|xslt)$/i,/<\\w+(\\s+\\w+\\s*=\\s*\"[^\"]*\")*\\s*\\/?>[\\s\\S]*<\\/\\w+>/],medium:[/<!--[\\s\\S]*?-->/,/<\\/\\w+>/],weak:[]},markdown:{strong:[/^#{1,6}\\s+.+$/m,/```[\\w]*\\n[\\s\\S]*?\\n```/,/\\.(md|markdown)$/i,/\\[([^\\]]+)\\]\\(([^)]+)\\)/],medium:[/^\\s*[-*+]\\s+/m,/^\\s*\\d+\\.\\s+/m,/\\*\\*[^*\\n]+\\*\\*/,/\\*[^*\\n]+\\*/,/`[^`\\n]+`/,/^\\s*>\\s+/m],weak:[/\\n\\s*\\n/,/^\\s*---+\\s*$/m]},sql:{strong:[/\\b(SELECT\\s+.*\\s+FROM|INSERT\\s+INTO|UPDATE\\s+.*\\s+SET|DELETE\\s+FROM)\\b/i,/\\b(CREATE\\s+(TABLE|DATABASE|INDEX)|DROP\\s+(TABLE|DATABASE|INDEX)|ALTER\\s+TABLE)\\b/i,/\\.(sql)$/i],medium:[/\\b(JOIN|INNER|LEFT|RIGHT|OUTER|ON|GROUP\\s+BY|ORDER\\s+BY|HAVING|WHERE)\\b/i,/--.*$/m,/\\/\\*[\\s\\S]*?\\*\\//],weak:[/\\b(COUNT|SUM|AVG|MIN|MAX)\\s*\\(/i]},php:{strong:[/<\\?php\\b/,/\\.(php|phtml)$/i,/\\$\\w+\\s*=/,/\\bfunction\\s+\\w+\\s*\\([^)]*\\)\\s*\\{/],medium:[/\\b(echo|print|var_dump|isset|empty|array)\\b/,/\\$(this|_GET|_POST|_SESSION|_COOKIE)\\b/,/\\/\\/.*$|#.*$/m,/\\/\\*[\\s\\S]*?\\*\\//],weak:[/\\b(public|private|protected|class|extends)\\b/]},c:{strong:[/#include\\s*<[^>]+\\.h>/,/\\bint\\s+main\\s*\\([^)]*\\)\\s*\\{/,/\\.(c|h)$/i,/\\b(printf|scanf|malloc|free)\\s*\\(/],medium:[/\\b(int|char|float|double|void|struct|typedef|enum)\\b/,/\\bsizeof\\s*\\(/,/\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*$/m,/\\b(if|else|for|while|switch|case|break|continue|return)\\b/],weak:[/\\b(stdio|stdlib|string)\\.h\\b/]},cpp:{strong:[/\\.(cpp|cxx|cc|hpp|hxx)$/i,/#include\\s*<[^>]+>/,/\\b(std::|cout|cin|endl|vector|string|namespace\\s+std)\\b/,/\\bclass\\s+\\w+\\s*\\{/],medium:[/\\b(public|private|protected):\\s*$/m,/\\b(int|char|float|double|void|bool|auto)\\b/,/\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*$/m,/\\bnew\\s+\\w+/,/\\bdelete\\s+/],weak:[/\\b(iostream|vector|string|algorithm)\\b/]},csharp:{strong:[/\\.(cs)$/i,/\\bnamespace\\s+\\w+/,/\\busing\\s+System\\b/,/\\bConsole\\.(WriteLine|Write)\\s*\\(/],medium:[/\\b(public|private|protected|internal|static)\\s+(class|void|string|int|bool)\\b/,/\\/\\/.*$/m,/\\/\\*[\\s\\S]*?\\*\\//],weak:[/\\bvar\\s+\\w+\\s*=/]},ruby:{strong:[/\\.(rb)$/i,/\\bdef\\s+\\w+[^]*\\bend\\b/,/\\bclass\\s+\\w+[^]*\\bend\\b/,/\\b(puts|print|p)\\s/],medium:[/\\b(if|elsif|else|unless|case|when|for|while|until|do|begin|rescue|ensure|end)\\b/,/#.*$/m,/\\b(true|false|nil)\\b/,/\\b(require|include|extend)\\b/],weak:[/\\|\\w+\\|/,/@\\w+/]},go:{strong:[/\\.(go)$/i,/\\bpackage\\s+\\w+/,/\\bfunc\\s+\\w+\\s*\\(/,/\\bfmt\\.(Print|Println|Printf)\\s*\\(/],medium:[/\\b(import|var|const|type|struct|interface|map|chan)\\b/,/\\/\\/.*$/m,/\\/\\*[\\s\\S]*?\\*\\//,/:=\\s*/],weak:[/\\bgo\\s+\\w+\\(/]},rust:{strong:[/\\.(rs)$/i,/\\bfn\\s+\\w+\\s*\\(/,/\\b(println!|print!|panic!|vec!)\\s*!/,/\\buse\\s+std::/],medium:[/\\b(let|mut|const|struct|enum|impl|trait|mod|pub|crate)\\b/,/\\/\\/.*$/m,/\\/\\*[\\s\\S]*?\\*\\//,/&\\w+/,/->\\s*\\w+/],weak:[/\\bCargo\\./]},yaml:{strong:[/\\.(yml|yaml)$/i,/^[\\s]*[\\w-]+\\s*:\\s*[\\w\\s-]+$/m,/^[\\s]*-\\s+[\\w-]+:/m],medium:[/^[\\s]*-\\s+/m,/#.*$/m,/^\\s*\\|\\s*$/m,/^\\s*>\\s*$/m],weak:[]},dockerfile:{strong:[/^FROM\\s+\\w+/m,/\\b(RUN|COPY|ADD|WORKDIR|EXPOSE|CMD|ENTRYPOINT)\\s+/m,/\\.(dockerfile|Dockerfile)$/i],medium:[/\\b(ENV|ARG|LABEL|USER|VOLUME)\\s+/m],weak:[]},shell:{strong:[/^#!/,/\\.(sh|bash|zsh|fish)$/i,/\\b(echo|cd|ls|grep|awk|sed|cat|chmod|chown|mkdir|rm|mv|cp)\\s+/],medium:[/#.*$/m,/\\$\\{?\\w+\\}?/,/\\|\\s*\\w+/,/&&|\\|\\|/],weak:[/\\bexport\\s+\\w+=/]}};this.fileExtensions={js:'javascript',jsx:'javascript',ts:'javascript',tsx:'javascript',mjs:'javascript',py:'python',pyw:'python',pyi:'python',java:'java',class:'java',html:'html',htm:'html',xhtml:'html',css:'css',scss:'css',sass:'css',less:'css',stylus:'css',json:'json',jsonc:'json',xml:'xml',xsd:'xml',xsl:'xml',xslt:'xml',svg:'xml',md:'markdown',markdown:'markdown',mdown:'markdown',mkd:'markdown',sql:'sql',mysql:'sql',pgsql:'sql',sqlite:'sql',php:'php',phtml:'php',php3:'php',php4:'php',php5:'php',c:'c',h:'c',cpp:'cpp',cxx:'cpp',cc:'cpp',hpp:'cpp',hxx:'cpp',hh:'cpp',cs:'csharp',csx:'csharp',rb:'ruby',rbw:'ruby',rake:'ruby',gemspec:'ruby',go:'go',mod:'go',rs:'rust',rlib:'rust',yml:'yaml',yaml:'yaml',sh:'shell',bash:'shell',zsh:'shell',fish:'shell',ksh:'shell',dockerfile:'dockerfile'};// Scoring weights\nthis.weights={strong:10,medium:3,weak:1,filename:15};}/**\r\n   * Detect language from filename with improved extension handling\r\n   */detectFromFilename(filename){var _filename$split$pop;if(!filename)return null;// Handle special cases\nif(/^Dockerfile$/i.test(filename)||/\\.dockerfile$/i.test(filename)){return'dockerfile';}if(/^Makefile$/i.test(filename)||/\\.mk$/i.test(filename)){return'shell';}const extension=(_filename$split$pop=filename.split('.').pop())===null||_filename$split$pop===void 0?void 0:_filename$split$pop.toLowerCase();return this.fileExtensions[extension]||null;}/**\r\n   * Enhanced content detection with weighted scoring\r\n   */detectFromContent(content){if(!content||content.trim().length===0)return'plaintext';// Check for clear plain text indicators first\nif(this.isPlainText(content)){return'plaintext';}const scores={};const contentLines=content.split('\\n');const sampleSize=Math.min(50,contentLines.length);// Analyze first 50 lines for efficiency\nconst sampleContent=contentLines.slice(0,sampleSize).join('\\n');// Initialize scores\nObject.keys(this.patterns).forEach(lang=>{scores[lang]=0;});// Score each language\nObject.entries(this.patterns).forEach(_ref=>{let[language,categories]=_ref;Object.entries(categories).forEach(_ref2=>{let[category,patterns]=_ref2;const weight=this.weights[category];patterns.forEach(pattern=>{// Skip filename patterns when analyzing content\nif(pattern.source.includes('\\\\.(')&&pattern.source.includes(')$/i')){return;}const matches=sampleContent.match(new RegExp(pattern.source,pattern.flags+'g'));if(matches){let matchScore=Math.min(matches.length,5)*weight;// Cap matches per pattern\n// Bonus for early matches (first 10 lines are more significant)\nconst earlyContent=contentLines.slice(0,10).join('\\n');const earlyMatches=earlyContent.match(new RegExp(pattern.source,pattern.flags+'g'));if(earlyMatches){matchScore+=earlyMatches.length*weight*0.5;}scores[language]+=matchScore;}});});});// Apply penalties for conflicting patterns\nthis.applyConflictPenalties(scores,sampleContent);// Apply plain text penalties for weak matches\nthis.applyPlainTextPenalties(scores,sampleContent);// Find best match\nconst sortedLanguages=Object.entries(scores).sort((_ref3,_ref4)=>{let[,a]=_ref3;let[,b]=_ref4;return b-a;}).filter(_ref5=>{let[,score]=_ref5;return score>0;});if(sortedLanguages.length===0){return'plaintext';}const[topLanguage,topScore]=sortedLanguages[0];const[,secondScore]=sortedLanguages[1]||[null,0];// More conservative thresholds for plain text detection\nconst minStrongScore=15;// Requires at least one strong pattern match\nconst minWeakScore=8;// For multiple weak matches\nconst confidenceRatio=secondScore>0?topScore/secondScore:Infinity;// Check if we have strong evidence for a language\nconst hasStrongEvidence=this.hasStrongLanguageEvidence(topLanguage,sampleContent);if(!hasStrongEvidence&&topScore<minStrongScore){return'plaintext';}if(topScore<minWeakScore||confidenceRatio<1.3&&topScore<25){return'plaintext';}return topLanguage;}/**\r\n   * Apply penalties for conflicting language indicators\r\n   */applyConflictPenalties(scores,content){// HTML vs XML conflict resolution\nif(scores.html>0&&scores.xml>0){if(content.includes('<!DOCTYPE html')||content.includes('<html')){scores.xml*=0.3;}else if(content.includes('<?xml')){scores.html*=0.3;}}// JavaScript vs JSON conflict\nif(scores.javascript>0&&scores.json>0){if(content.includes('function')||content.includes('var ')||content.includes('let ')||content.includes('const ')){scores.json*=0.1;}}// C vs C++ conflict\nif(scores.c>0&&scores.cpp>0){if(content.includes('std::')||content.includes('#include <iostream>')||content.includes('class ')){scores.c*=0.3;}else if(!content.includes('std::')&&!content.includes('class ')&&!content.includes('namespace')){scores.cpp*=0.5;}}// Shell vs other languages\nif(scores.shell>0){const hasShebang=content.startsWith('#!');if(!hasShebang&&(scores.python>0||scores.ruby>0)){scores.shell*=0.4;}}}/**\r\n   * Check if content appears to be plain text\r\n   */isPlainText(content){const lines=content.split('\\n');const totalLines=lines.length;// Very short content is likely plain text\nif(content.length<50&&totalLines<=3){// Unless it has clear code indicators\nconst codeIndicators=[/^#!/,// shebang\n/<[a-z]/i,// HTML tags\n/^\\s*\\{/,// JSON/CSS\n/^\\s*<\\?/,// XML/PHP\n/\\bfunction\\s*\\(/,// function definitions\n/\\bclass\\s+\\w+/,// class definitions\n/\\bdef\\s+\\w+/,// Python functions\n/\\bpublic\\s+/,// Java/C# modifiers\n/^FROM\\s+/i,// Dockerfile\n/^\\w+\\s*:\\s*\\w+/,// YAML-like\n/;\\s*$/,// statements ending with semicolon\n/\\{[\\s\\S]*\\}/,// code blocks\n/\\/\\/|\\/\\*|\\#/// comments (but not standalone # lines)\n];const hasCodeIndicator=codeIndicators.some(pattern=>pattern.test(content));if(!hasCodeIndicator){return true;}}// Check for natural language characteristics\nconst naturalLanguageScore=this.calculateNaturalLanguageScore(content);const codeScore=this.calculateCodeScore(content);// If it looks more like natural language than code\nif(naturalLanguageScore>codeScore*1.5&&naturalLanguageScore>0.3){return true;}// Check for prose patterns\nconst proseIndicators=[/\\b(the|and|or|but|in|on|at|to|for|of|with|by)\\b/gi,// common English words\n/\\b(is|are|was|were|been|being|have|has|had|do|does|did)\\b/gi,// verbs\n/[.!?]\\s+[A-Z]/g,// sentence endings followed by capital letters\n/\\b[A-Z][a-z]+\\b/g// proper capitalization\n];let proseMatches=0;proseIndicators.forEach(pattern=>{const matches=content.match(pattern);if(matches)proseMatches+=matches.length;});const proseRatio=proseMatches/content.length;// High prose ratio suggests plain text\nif(proseRatio>0.05&&content.length>100){return true;}return false;}/**\r\n   * Calculate natural language score\r\n   */calculateNaturalLanguageScore(content){const indicators=[/\\b(the|and|or|but|in|on|at|to|for|of|with|by|this|that|these|those)\\b/gi,/\\b(is|are|was|were|been|being|have|has|had|do|does|did|will|would|could|should)\\b/gi,/[.!?]\\s*$/gm,// sentences\n/\\b[A-Z][a-z]{2,}\\b/g,// words with proper capitalization\n/,\\s+/g// comma usage\n];let totalMatches=0;indicators.forEach(pattern=>{const matches=content.match(pattern);if(matches)totalMatches+=matches.length;});return totalMatches/Math.max(content.length,1);}/**\r\n   * Calculate code score\r\n   */calculateCodeScore(content){const indicators=[/[{}();]/g,// code punctuation\n/\\b(function|class|def|var|let|const|if|for|while)\\b/gi,// code keywords\n/[=<>!]+/g,// operators\n/\\/\\/|\\/\\*|\\*/g,// comments\n/\\b0x[0-9a-f]+\\b/gi,// hex numbers\n/\\d+\\.\\d+/g// floating point numbers\n];let totalMatches=0;indicators.forEach(pattern=>{const matches=content.match(pattern);if(matches)totalMatches+=matches.length;});return totalMatches/Math.max(content.length,1);}/**\r\n   * Apply penalties when content looks like plain text\r\n   */applyPlainTextPenalties(scores,content){const naturalLanguageScore=this.calculateNaturalLanguageScore(content);const codeScore=this.calculateCodeScore(content);// If content looks like natural language, penalize all programming languages\nif(naturalLanguageScore>codeScore&&naturalLanguageScore>0.02){const penalty=Math.min(0.8,naturalLanguageScore*10);Object.keys(scores).forEach(lang=>{if(lang!=='markdown'&&lang!=='plaintext'){scores[lang]*=1-penalty;}});}// Penalize languages with very weak evidence\nObject.entries(scores).forEach(_ref6=>{let[lang,score]=_ref6;if(score>0&&score<5){const strongEvidence=this.hasStrongLanguageEvidence(lang,content);if(!strongEvidence){scores[lang]*=0.3;}}});}/**\r\n   * Check if content has strong evidence for a specific language\r\n   */hasStrongLanguageEvidence(language,content){if(!this.patterns[language]||!this.patterns[language].strong){return false;}let strongMatches=0;this.patterns[language].strong.forEach(pattern=>{// Skip filename patterns\nif(pattern.source.includes('\\\\.(')&&pattern.source.includes(')$/i')){return;}if(content.match(pattern)){strongMatches++;}});return strongMatches>=1;}/**\r\n   * Calculate confidence level based on score and patterns\r\n   */calculateConfidence(language,score,content){var _patterns$strong;if(language==='plaintext'){// For plaintext, confidence depends on how clearly it's NOT code\nconst naturalLanguageScore=this.calculateNaturalLanguageScore(content);const codeScore=this.calculateCodeScore(content);if(naturalLanguageScore>codeScore*2)return'high';if(naturalLanguageScore>codeScore)return'medium';return'low';}const patterns=this.patterns[language];if(!patterns)return'low';const strongMatches=((_patterns$strong=patterns.strong)===null||_patterns$strong===void 0?void 0:_patterns$strong.filter(pattern=>{// Skip filename patterns in confidence calculation\nif(pattern.source.includes('\\\\.(')&&pattern.source.includes(')$/i')){return false;}return content.match(pattern);}).length)||0;if(strongMatches>=2&&score>=25)return'high';if(strongMatches>=1&&score>=15)return'medium';if(strongMatches>=1||score>=12)return'low';return'very-low';}/**\r\n   * Enhanced auto-detection with improved logic\r\n   */autoDetect(content){let filename=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;// Filename detection with high confidence\nconst filenameLanguage=this.detectFromFilename(filename);if(filenameLanguage){// Verify filename detection with content if available\nif(content&&content.trim().length>0){const contentLanguage=this.detectFromContent(content);// If content strongly suggests a different language, use content detection\nif(contentLanguage!=='plaintext'&&contentLanguage!==filenameLanguage){const contentScore=this.getLanguageScore(content,contentLanguage);const filenameScore=this.getLanguageScore(content,filenameLanguage);if(contentScore>filenameScore*1.5){return{language:contentLanguage,confidence:this.calculateConfidence(contentLanguage,contentScore,content),method:'content-override',alternateDetection:filenameLanguage};}}}return{language:filenameLanguage,confidence:'high',method:'filename'};}// Content-only detection\nconst contentLanguage=this.detectFromContent(content);const score=this.getLanguageScore(content,contentLanguage);return{language:contentLanguage,confidence:this.calculateConfidence(contentLanguage,score,content),method:'content'};}/**\r\n   * Get score for a specific language\r\n   */getLanguageScore(content,language){if(!this.patterns[language])return 0;let score=0;Object.entries(this.patterns[language]).forEach(_ref7=>{let[category,patterns]=_ref7;const weight=this.weights[category];patterns.forEach(pattern=>{const matches=content.match(new RegExp(pattern.source,pattern.flags+'g'));if(matches){score+=Math.min(matches.length,5)*weight;}});});return score;}/**\r\n   * Get detailed detection results for debugging\r\n   */getDetectionDetails(content){let filename=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;const results=this.autoDetect(content,filename);const scores={};// Calculate scores for all languages\nObject.keys(this.patterns).forEach(lang=>{scores[lang]=this.getLanguageScore(content,lang);});const sortedScores=Object.entries(scores).sort((_ref8,_ref9)=>{let[,a]=_ref8;let[,b]=_ref9;return b-a;}).slice(0,5);return _objectSpread(_objectSpread({},results),{},{topScores:sortedScores,totalPatterns:Object.keys(this.patterns).length,contentLength:(content===null||content===void 0?void 0:content.length)||0});}/**\r\n   * Get all supported languages\r\n   */getSupportedLanguages(){return['plaintext',...Object.keys(this.patterns).sort()];}/**\r\n   * Check if a language is supported\r\n   */isLanguageSupported(language){return language==='plaintext'||this.patterns.hasOwnProperty(language);}}export default LanguageDetector;","map":{"version":3,"names":["LanguageDetector","constructor","patterns","javascript","strong","medium","weak","python","java","html","css","json","xml","markdown","sql","php","c","cpp","csharp","ruby","go","rust","yaml","dockerfile","shell","fileExtensions","js","jsx","ts","tsx","mjs","py","pyw","pyi","class","htm","xhtml","scss","sass","less","stylus","jsonc","xsd","xsl","xslt","svg","md","mdown","mkd","mysql","pgsql","sqlite","phtml","php3","php4","php5","h","cxx","cc","hpp","hxx","hh","cs","csx","rb","rbw","rake","gemspec","mod","rs","rlib","yml","sh","bash","zsh","fish","ksh","weights","filename","detectFromFilename","_filename$split$pop","test","extension","split","pop","toLowerCase","detectFromContent","content","trim","length","isPlainText","scores","contentLines","sampleSize","Math","min","sampleContent","slice","join","Object","keys","forEach","lang","entries","_ref","language","categories","_ref2","category","weight","pattern","source","includes","matches","match","RegExp","flags","matchScore","earlyContent","earlyMatches","applyConflictPenalties","applyPlainTextPenalties","sortedLanguages","sort","_ref3","_ref4","a","b","filter","_ref5","score","topLanguage","topScore","secondScore","minStrongScore","minWeakScore","confidenceRatio","Infinity","hasStrongEvidence","hasStrongLanguageEvidence","hasShebang","startsWith","lines","totalLines","codeIndicators","hasCodeIndicator","some","naturalLanguageScore","calculateNaturalLanguageScore","codeScore","calculateCodeScore","proseIndicators","proseMatches","proseRatio","indicators","totalMatches","max","penalty","_ref6","strongEvidence","strongMatches","calculateConfidence","_patterns$strong","autoDetect","arguments","undefined","filenameLanguage","contentLanguage","contentScore","getLanguageScore","filenameScore","confidence","method","alternateDetection","_ref7","getDetectionDetails","results","sortedScores","_ref8","_ref9","_objectSpread","topScores","totalPatterns","contentLength","getSupportedLanguages","isLanguageSupported","hasOwnProperty"],"sources":["C:/Users/Joem/quickdiff-react/src/utils/LanguageDetector.js"],"sourcesContent":["/**\r\n * Enhanced Language Auto-Detection Utility\r\n * Detects programming language based on content patterns with improved accuracy\r\n */\r\n\r\nexport class LanguageDetector {\r\n  constructor() {\r\n    this.patterns = {\r\n      javascript: {\r\n        strong: [\r\n          /\\b(const|let|var)\\s+\\w+\\s*=/,\r\n          /\\b(function|async\\s+function)\\s*\\w*\\s*\\(/,\r\n          /\\b(React|useState|useEffect|useContext|props)\\b/,\r\n          /\\b(console\\.(log|error|warn))\\s*\\(/,\r\n          /\\b(document\\.|window\\.)\\w+/,\r\n          /\\b(require|import|export)\\s*\\(/,\r\n          /\\bexport\\s+(default\\s+)?/,\r\n          /=>\\s*[{(]/,\r\n          /\\.(js|jsx|ts|tsx)$/i\r\n        ],\r\n        medium: [\r\n          /\\b(if|else|for|while|switch|case|break|continue|return)\\b/,\r\n          /\\b(setTimeout|setInterval|Promise|async|await)\\b/,\r\n          /\\b(null|undefined|NaN|Infinity)\\b/,\r\n          /\\/\\/.*$/m,\r\n          /\\/\\*[\\s\\S]*?\\*\\//,\r\n          /\\b(true|false)\\b/,\r\n          /\\$\\{[^}]*\\}/\r\n        ],\r\n        weak: [\r\n          /\\b(npm|node|express|axios|webpack)\\b/,\r\n          /\\.(json|js)\"/\r\n        ]\r\n      },\r\n      python: {\r\n        strong: [\r\n          /\\bdef\\s+\\w+\\s*\\(/,\r\n          /\\bclass\\s+\\w+\\s*(\\([^)]*\\))?\\s*:/,\r\n          /\\bfrom\\s+\\w+\\s+import\\b/,\r\n          /\\bimport\\s+\\w+/,\r\n          /\\b(if|elif|else)\\s+.*:/,\r\n          /\\bfor\\s+\\w+\\s+in\\b/,\r\n          /\\bwhile\\s+.*:/,\r\n          /\\b(try|except|finally)\\s*:/,\r\n          /\\bwith\\s+.*:/,\r\n          /\\.(py|pyw)$/i\r\n        ],\r\n        medium: [\r\n          /\\b(self|__init__|__name__|__main__)\\b/,\r\n          /\\b(print|input|len|range|enumerate|zip)\\b/,\r\n          /\\b(True|False|None)\\b/,\r\n          /\\b(and|or|not|in|is)\\b/,\r\n          /#.*$/m,\r\n          /\"\"\"[\\s\\S]*?\"\"\"/,\r\n          /'''[\\s\\S]*?'''/\r\n        ],\r\n        weak: [\r\n          /\\bindent/,\r\n          /\\bpip\\s+install\\b/\r\n        ]\r\n      },\r\n      java: {\r\n        strong: [\r\n          /\\bpublic\\s+class\\s+\\w+/,\r\n          /\\bpublic\\s+static\\s+void\\s+main\\s*\\(/,\r\n          /\\b(public|private|protected)\\s+(static\\s+)?\\w+\\s+\\w+\\s*\\(/,\r\n          /\\bSystem\\.out\\.(println|print)\\s*\\(/,\r\n          /\\b(extends|implements)\\s+\\w+/,\r\n          /\\.(java)$/i\r\n        ],\r\n        medium: [\r\n          /\\b(String|int|double|float|boolean|char|void|Object)\\b/,\r\n          /\\b(if|else|for|while|switch|case|break|continue|return|try|catch|finally)\\b/,\r\n          /\\b(public|private|protected|static|final|abstract)\\b/,\r\n          /\\/\\/.*$/m,\r\n          /\\/\\*[\\s\\S]*?\\*\\//,\r\n          /\\bnew\\s+\\w+\\s*\\(/\r\n        ],\r\n        weak: [\r\n          /\\bimport\\s+java\\./,\r\n          /\\bpackage\\s+\\w+/\r\n        ]\r\n      },\r\n      html: {\r\n        strong: [\r\n          /<!DOCTYPE\\s+html>/i,\r\n          /<html\\b[^>]*>/i,\r\n          /<(head|body|div|span|p|a|img|script|style|link|meta)\\b[^>]*>/i,\r\n          /\\.(html|htm)$/i\r\n        ],\r\n        medium: [\r\n          /<\\/?[a-z][\\s\\S]*?>/i,\r\n          /<!--[\\s\\S]*?-->/,\r\n          /<\\w+(\\s+\\w+(\\s*=\\s*(\"[^\"]*\"|'[^']*'|[^\\s>]+))?)*\\s*\\/?>/\r\n        ],\r\n        weak: []\r\n      },\r\n      css: {\r\n        strong: [\r\n          /[.#]?[\\w-]+\\s*\\{[^}]*\\}/,\r\n          /@(media|import|keyframes|font-face)\\b/,\r\n          /\\.(css|scss|sass|less)$/i\r\n        ],\r\n        medium: [\r\n          /\\b(color|background|margin|padding|border|width|height|font|display|position|flex|grid)\\s*:/,\r\n          /#[a-fA-F0-9]{3,8}\\b/,\r\n          /\\b\\d+(px|em|rem|vh|vw|%|pt|pc|in|cm|mm|ex|ch)\\b/,\r\n          /\\/\\*[\\s\\S]*?\\*\\//,\r\n          /rgba?\\([^)]+\\)/\r\n        ],\r\n        weak: [\r\n          /\\b(hover|focus|active|visited)\\b/\r\n        ]\r\n      },\r\n      json: {\r\n        strong: [\r\n          /^\\s*\\{[\\s\\S]*\\}\\s*$/,\r\n          /^\\s*\\[[\\s\\S]*\\]\\s*$/,\r\n          /\"[^\"]*\"\\s*:\\s*(\"[^\"]*\"|\\d+|true|false|null|\\{|\\[)/,\r\n          /\\.(json)$/i\r\n        ],\r\n        medium: [\r\n          /^\\s*[{[]/,\r\n          /\"[^\"]*\"\\s*:/,\r\n          /:\\s*(true|false|null)\\b/\r\n        ],\r\n        weak: []\r\n      },\r\n      xml: {\r\n        strong: [\r\n          /<\\?xml\\s+version/i,\r\n          /\\.(xml|xsd|xsl|xslt)$/i,\r\n          /<\\w+(\\s+\\w+\\s*=\\s*\"[^\"]*\")*\\s*\\/?>[\\s\\S]*<\\/\\w+>/\r\n        ],\r\n        medium: [\r\n          /<!--[\\s\\S]*?-->/,\r\n          /<\\/\\w+>/\r\n        ],\r\n        weak: []\r\n      },\r\n      markdown: {\r\n        strong: [\r\n          /^#{1,6}\\s+.+$/m,\r\n          /```[\\w]*\\n[\\s\\S]*?\\n```/,\r\n          /\\.(md|markdown)$/i,\r\n          /\\[([^\\]]+)\\]\\(([^)]+)\\)/\r\n        ],\r\n        medium: [\r\n          /^\\s*[-*+]\\s+/m,\r\n          /^\\s*\\d+\\.\\s+/m,\r\n          /\\*\\*[^*\\n]+\\*\\*/,\r\n          /\\*[^*\\n]+\\*/,\r\n          /`[^`\\n]+`/,\r\n          /^\\s*>\\s+/m\r\n        ],\r\n        weak: [\r\n          /\\n\\s*\\n/,\r\n          /^\\s*---+\\s*$/m\r\n        ]\r\n      },\r\n      sql: {\r\n        strong: [\r\n          /\\b(SELECT\\s+.*\\s+FROM|INSERT\\s+INTO|UPDATE\\s+.*\\s+SET|DELETE\\s+FROM)\\b/i,\r\n          /\\b(CREATE\\s+(TABLE|DATABASE|INDEX)|DROP\\s+(TABLE|DATABASE|INDEX)|ALTER\\s+TABLE)\\b/i,\r\n          /\\.(sql)$/i\r\n        ],\r\n        medium: [\r\n          /\\b(JOIN|INNER|LEFT|RIGHT|OUTER|ON|GROUP\\s+BY|ORDER\\s+BY|HAVING|WHERE)\\b/i,\r\n          /--.*$/m,\r\n          /\\/\\*[\\s\\S]*?\\*\\//\r\n        ],\r\n        weak: [\r\n          /\\b(COUNT|SUM|AVG|MIN|MAX)\\s*\\(/i\r\n        ]\r\n      },\r\n      php: {\r\n        strong: [\r\n          /<\\?php\\b/,\r\n          /\\.(php|phtml)$/i,\r\n          /\\$\\w+\\s*=/,\r\n          /\\bfunction\\s+\\w+\\s*\\([^)]*\\)\\s*\\{/\r\n        ],\r\n        medium: [\r\n          /\\b(echo|print|var_dump|isset|empty|array)\\b/,\r\n          /\\$(this|_GET|_POST|_SESSION|_COOKIE)\\b/,\r\n          /\\/\\/.*$|#.*$/m,\r\n          /\\/\\*[\\s\\S]*?\\*\\//\r\n        ],\r\n        weak: [\r\n          /\\b(public|private|protected|class|extends)\\b/\r\n        ]\r\n      },\r\n      c: {\r\n        strong: [\r\n          /#include\\s*<[^>]+\\.h>/,\r\n          /\\bint\\s+main\\s*\\([^)]*\\)\\s*\\{/,\r\n          /\\.(c|h)$/i,\r\n          /\\b(printf|scanf|malloc|free)\\s*\\(/\r\n        ],\r\n        medium: [\r\n          /\\b(int|char|float|double|void|struct|typedef|enum)\\b/,\r\n          /\\bsizeof\\s*\\(/,\r\n          /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*$/m,\r\n          /\\b(if|else|for|while|switch|case|break|continue|return)\\b/\r\n        ],\r\n        weak: [\r\n          /\\b(stdio|stdlib|string)\\.h\\b/\r\n        ]\r\n      },\r\n      cpp: {\r\n        strong: [\r\n          /\\.(cpp|cxx|cc|hpp|hxx)$/i,\r\n          /#include\\s*<[^>]+>/,\r\n          /\\b(std::|cout|cin|endl|vector|string|namespace\\s+std)\\b/,\r\n          /\\bclass\\s+\\w+\\s*\\{/\r\n        ],\r\n        medium: [\r\n          /\\b(public|private|protected):\\s*$/m,\r\n          /\\b(int|char|float|double|void|bool|auto)\\b/,\r\n          /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*$/m,\r\n          /\\bnew\\s+\\w+/,\r\n          /\\bdelete\\s+/\r\n        ],\r\n        weak: [\r\n          /\\b(iostream|vector|string|algorithm)\\b/\r\n        ]\r\n      },\r\n      csharp: {\r\n        strong: [\r\n          /\\.(cs)$/i,\r\n          /\\bnamespace\\s+\\w+/,\r\n          /\\busing\\s+System\\b/,\r\n          /\\bConsole\\.(WriteLine|Write)\\s*\\(/\r\n        ],\r\n        medium: [\r\n          /\\b(public|private|protected|internal|static)\\s+(class|void|string|int|bool)\\b/,\r\n          /\\/\\/.*$/m,\r\n          /\\/\\*[\\s\\S]*?\\*\\//\r\n        ],\r\n        weak: [\r\n          /\\bvar\\s+\\w+\\s*=/\r\n        ]\r\n      },\r\n      ruby: {\r\n        strong: [\r\n          /\\.(rb)$/i,\r\n          /\\bdef\\s+\\w+.*\\bend\\b/s,\r\n          /\\bclass\\s+\\w+.*\\bend\\b/s,\r\n          /\\b(puts|print|p)\\s/\r\n        ],\r\n        medium: [\r\n          /\\b(if|elsif|else|unless|case|when|for|while|until|do|begin|rescue|ensure|end)\\b/,\r\n          /#.*$/m,\r\n          /\\b(true|false|nil)\\b/,\r\n          /\\b(require|include|extend)\\b/\r\n        ],\r\n        weak: [\r\n          /\\|\\w+\\|/,\r\n          /@\\w+/\r\n        ]\r\n      },\r\n      go: {\r\n        strong: [\r\n          /\\.(go)$/i,\r\n          /\\bpackage\\s+\\w+/,\r\n          /\\bfunc\\s+\\w+\\s*\\(/,\r\n          /\\bfmt\\.(Print|Println|Printf)\\s*\\(/\r\n        ],\r\n        medium: [\r\n          /\\b(import|var|const|type|struct|interface|map|chan)\\b/,\r\n          /\\/\\/.*$/m,\r\n          /\\/\\*[\\s\\S]*?\\*\\//,\r\n          /:=\\s*/\r\n        ],\r\n        weak: [\r\n          /\\bgo\\s+\\w+\\(/\r\n        ]\r\n      },\r\n      rust: {\r\n        strong: [\r\n          /\\.(rs)$/i,\r\n          /\\bfn\\s+\\w+\\s*\\(/,\r\n          /\\b(println!|print!|panic!|vec!)\\s*!/,\r\n          /\\buse\\s+std::/\r\n        ],\r\n        medium: [\r\n          /\\b(let|mut|const|struct|enum|impl|trait|mod|pub|crate)\\b/,\r\n          /\\/\\/.*$/m,\r\n          /\\/\\*[\\s\\S]*?\\*\\//,\r\n          /&\\w+/,\r\n          /->\\s*\\w+/\r\n        ],\r\n        weak: [\r\n          /\\bCargo\\./\r\n        ]\r\n      },\r\n      yaml: {\r\n        strong: [\r\n          /\\.(yml|yaml)$/i,\r\n          /^[\\s]*[\\w-]+\\s*:\\s*[\\w\\s-]+$/m,\r\n          /^[\\s]*-\\s+[\\w-]+:/m\r\n        ],\r\n        medium: [\r\n          /^[\\s]*-\\s+/m,\r\n          /#.*$/m,\r\n          /^\\s*\\|\\s*$/m,\r\n          /^\\s*>\\s*$/m\r\n        ],\r\n        weak: []\r\n      },\r\n      dockerfile: {\r\n        strong: [\r\n          /^FROM\\s+\\w+/m,\r\n          /\\b(RUN|COPY|ADD|WORKDIR|EXPOSE|CMD|ENTRYPOINT)\\s+/m,\r\n          /\\.(dockerfile|Dockerfile)$/i\r\n        ],\r\n        medium: [\r\n          /\\b(ENV|ARG|LABEL|USER|VOLUME)\\s+/m\r\n        ],\r\n        weak: []\r\n      },\r\n      shell: {\r\n        strong: [\r\n          /^#!/,\r\n          /\\.(sh|bash|zsh|fish)$/i,\r\n          /\\b(echo|cd|ls|grep|awk|sed|cat|chmod|chown|mkdir|rm|mv|cp)\\s+/\r\n        ],\r\n        medium: [\r\n          /#.*$/m,\r\n          /\\$\\{?\\w+\\}?/,\r\n          /\\|\\s*\\w+/,\r\n          /&&|\\|\\|/\r\n        ],\r\n        weak: [\r\n          /\\bexport\\s+\\w+=/\r\n        ]\r\n      }\r\n    };\r\n\r\n    this.fileExtensions = {\r\n      js: 'javascript', jsx: 'javascript', ts: 'javascript', tsx: 'javascript', mjs: 'javascript',\r\n      py: 'python', pyw: 'python', pyi: 'python',\r\n      java: 'java', class: 'java',\r\n      html: 'html', htm: 'html', xhtml: 'html',\r\n      css: 'css', scss: 'css', sass: 'css', less: 'css', stylus: 'css',\r\n      json: 'json', jsonc: 'json',\r\n      xml: 'xml', xsd: 'xml', xsl: 'xml', xslt: 'xml', svg: 'xml',\r\n      md: 'markdown', markdown: 'markdown', mdown: 'markdown', mkd: 'markdown',\r\n      sql: 'sql', mysql: 'sql', pgsql: 'sql', sqlite: 'sql',\r\n      php: 'php', phtml: 'php', php3: 'php', php4: 'php', php5: 'php',\r\n      c: 'c', h: 'c',\r\n      cpp: 'cpp', cxx: 'cpp', cc: 'cpp', hpp: 'cpp', hxx: 'cpp', hh: 'cpp',\r\n      cs: 'csharp', csx: 'csharp',\r\n      rb: 'ruby', rbw: 'ruby', rake: 'ruby', gemspec: 'ruby',\r\n      go: 'go', mod: 'go',\r\n      rs: 'rust', rlib: 'rust',\r\n      yml: 'yaml', yaml: 'yaml',\r\n      sh: 'shell', bash: 'shell', zsh: 'shell', fish: 'shell', ksh: 'shell',\r\n      dockerfile: 'dockerfile'\r\n    };\r\n\r\n    // Scoring weights\r\n    this.weights = {\r\n      strong: 10,\r\n      medium: 3,\r\n      weak: 1,\r\n      filename: 15\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Detect language from filename with improved extension handling\r\n   */\r\n  detectFromFilename(filename) {\r\n    if (!filename) return null;\r\n    \r\n    // Handle special cases\r\n    if (/^Dockerfile$/i.test(filename) || /\\.dockerfile$/i.test(filename)) {\r\n      return 'dockerfile';\r\n    }\r\n    \r\n    if (/^Makefile$/i.test(filename) || /\\.mk$/i.test(filename)) {\r\n      return 'shell';\r\n    }\r\n\r\n    const extension = filename.split('.').pop()?.toLowerCase();\r\n    return this.fileExtensions[extension] || null;\r\n  }\r\n\r\n  /**\r\n   * Enhanced content detection with weighted scoring\r\n   */\r\n  detectFromContent(content) {\r\n    if (!content || content.trim().length === 0) return 'plaintext';\r\n\r\n    // Check for clear plain text indicators first\r\n    if (this.isPlainText(content)) {\r\n      return 'plaintext';\r\n    }\r\n\r\n    const scores = {};\r\n    const contentLines = content.split('\\n');\r\n    const sampleSize = Math.min(50, contentLines.length); // Analyze first 50 lines for efficiency\r\n    const sampleContent = contentLines.slice(0, sampleSize).join('\\n');\r\n    \r\n    // Initialize scores\r\n    Object.keys(this.patterns).forEach(lang => {\r\n      scores[lang] = 0;\r\n    });\r\n\r\n    // Score each language\r\n    Object.entries(this.patterns).forEach(([language, categories]) => {\r\n      Object.entries(categories).forEach(([category, patterns]) => {\r\n        const weight = this.weights[category];\r\n        \r\n        patterns.forEach(pattern => {\r\n          // Skip filename patterns when analyzing content\r\n          if (pattern.source.includes('\\\\.(') && pattern.source.includes(')$/i')) {\r\n            return;\r\n          }\r\n          \r\n          const matches = sampleContent.match(new RegExp(pattern.source, pattern.flags + 'g'));\r\n          if (matches) {\r\n            let matchScore = Math.min(matches.length, 5) * weight; // Cap matches per pattern\r\n            \r\n            // Bonus for early matches (first 10 lines are more significant)\r\n            const earlyContent = contentLines.slice(0, 10).join('\\n');\r\n            const earlyMatches = earlyContent.match(new RegExp(pattern.source, pattern.flags + 'g'));\r\n            if (earlyMatches) {\r\n              matchScore += earlyMatches.length * weight * 0.5;\r\n            }\r\n            \r\n            scores[language] += matchScore;\r\n          }\r\n        });\r\n      });\r\n    });\r\n\r\n    // Apply penalties for conflicting patterns\r\n    this.applyConflictPenalties(scores, sampleContent);\r\n\r\n    // Apply plain text penalties for weak matches\r\n    this.applyPlainTextPenalties(scores, sampleContent);\r\n\r\n    // Find best match\r\n    const sortedLanguages = Object.entries(scores)\r\n      .sort(([,a], [,b]) => b - a)\r\n      .filter(([,score]) => score > 0);\r\n\r\n    if (sortedLanguages.length === 0) {\r\n      return 'plaintext';\r\n    }\r\n\r\n    const [topLanguage, topScore] = sortedLanguages[0];\r\n    const [, secondScore] = sortedLanguages[1] || [null, 0];\r\n    \r\n    // More conservative thresholds for plain text detection\r\n    const minStrongScore = 15; // Requires at least one strong pattern match\r\n    const minWeakScore = 8;    // For multiple weak matches\r\n    const confidenceRatio = secondScore > 0 ? topScore / secondScore : Infinity;\r\n    \r\n    // Check if we have strong evidence for a language\r\n    const hasStrongEvidence = this.hasStrongLanguageEvidence(topLanguage, sampleContent);\r\n    \r\n    if (!hasStrongEvidence && topScore < minStrongScore) {\r\n      return 'plaintext';\r\n    }\r\n    \r\n    if (topScore < minWeakScore || (confidenceRatio < 1.3 && topScore < 25)) {\r\n      return 'plaintext';\r\n    }\r\n\r\n    return topLanguage;\r\n  }\r\n\r\n  /**\r\n   * Apply penalties for conflicting language indicators\r\n   */\r\n  applyConflictPenalties(scores, content) {\r\n    // HTML vs XML conflict resolution\r\n    if (scores.html > 0 && scores.xml > 0) {\r\n      if (content.includes('<!DOCTYPE html') || content.includes('<html')) {\r\n        scores.xml *= 0.3;\r\n      } else if (content.includes('<?xml')) {\r\n        scores.html *= 0.3;\r\n      }\r\n    }\r\n\r\n    // JavaScript vs JSON conflict\r\n    if (scores.javascript > 0 && scores.json > 0) {\r\n      if (content.includes('function') || content.includes('var ') || content.includes('let ') || content.includes('const ')) {\r\n        scores.json *= 0.1;\r\n      }\r\n    }\r\n\r\n    // C vs C++ conflict\r\n    if (scores.c > 0 && scores.cpp > 0) {\r\n      if (content.includes('std::') || content.includes('#include <iostream>') || content.includes('class ')) {\r\n        scores.c *= 0.3;\r\n      } else if (!content.includes('std::') && !content.includes('class ') && !content.includes('namespace')) {\r\n        scores.cpp *= 0.5;\r\n      }\r\n    }\r\n\r\n    // Shell vs other languages\r\n    if (scores.shell > 0) {\r\n      const hasShebang = content.startsWith('#!');\r\n      if (!hasShebang && (scores.python > 0 || scores.ruby > 0)) {\r\n        scores.shell *= 0.4;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if content appears to be plain text\r\n   */\r\n  isPlainText(content) {\r\n    const lines = content.split('\\n');\r\n    const totalLines = lines.length;\r\n    \r\n    // Very short content is likely plain text\r\n    if (content.length < 50 && totalLines <= 3) {\r\n      // Unless it has clear code indicators\r\n      const codeIndicators = [\r\n        /^#!/, // shebang\r\n        /<[a-z]/i, // HTML tags\r\n        /^\\s*\\{/, // JSON/CSS\r\n        /^\\s*<\\?/, // XML/PHP\r\n        /\\bfunction\\s*\\(/, // function definitions\r\n        /\\bclass\\s+\\w+/, // class definitions\r\n        /\\bdef\\s+\\w+/, // Python functions\r\n        /\\bpublic\\s+/, // Java/C# modifiers\r\n        /^FROM\\s+/i, // Dockerfile\r\n        /^\\w+\\s*:\\s*\\w+/, // YAML-like\r\n        /;\\s*$/, // statements ending with semicolon\r\n        /\\{[\\s\\S]*\\}/, // code blocks\r\n        /\\/\\/|\\/\\*|\\#/, // comments (but not standalone # lines)\r\n      ];\r\n      \r\n      const hasCodeIndicator = codeIndicators.some(pattern => pattern.test(content));\r\n      if (!hasCodeIndicator) {\r\n        return true;\r\n      }\r\n    }\r\n    \r\n    // Check for natural language characteristics\r\n    const naturalLanguageScore = this.calculateNaturalLanguageScore(content);\r\n    const codeScore = this.calculateCodeScore(content);\r\n    \r\n    // If it looks more like natural language than code\r\n    if (naturalLanguageScore > codeScore * 1.5 && naturalLanguageScore > 0.3) {\r\n      return true;\r\n    }\r\n    \r\n    // Check for prose patterns\r\n    const proseIndicators = [\r\n      /\\b(the|and|or|but|in|on|at|to|for|of|with|by)\\b/gi, // common English words\r\n      /\\b(is|are|was|were|been|being|have|has|had|do|does|did)\\b/gi, // verbs\r\n      /[.!?]\\s+[A-Z]/g, // sentence endings followed by capital letters\r\n      /\\b[A-Z][a-z]+\\b/g, // proper capitalization\r\n    ];\r\n    \r\n    let proseMatches = 0;\r\n    proseIndicators.forEach(pattern => {\r\n      const matches = content.match(pattern);\r\n      if (matches) proseMatches += matches.length;\r\n    });\r\n    \r\n    const proseRatio = proseMatches / content.length;\r\n    \r\n    // High prose ratio suggests plain text\r\n    if (proseRatio > 0.05 && content.length > 100) {\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Calculate natural language score\r\n   */\r\n  calculateNaturalLanguageScore(content) {\r\n    const indicators = [\r\n      /\\b(the|and|or|but|in|on|at|to|for|of|with|by|this|that|these|those)\\b/gi,\r\n      /\\b(is|are|was|were|been|being|have|has|had|do|does|did|will|would|could|should)\\b/gi,\r\n      /[.!?]\\s*$/gm, // sentences\r\n      /\\b[A-Z][a-z]{2,}\\b/g, // words with proper capitalization\r\n      /,\\s+/g, // comma usage\r\n    ];\r\n    \r\n    let totalMatches = 0;\r\n    indicators.forEach(pattern => {\r\n      const matches = content.match(pattern);\r\n      if (matches) totalMatches += matches.length;\r\n    });\r\n    \r\n    return totalMatches / Math.max(content.length, 1);\r\n  }\r\n\r\n  /**\r\n   * Calculate code score\r\n   */\r\n  calculateCodeScore(content) {\r\n    const indicators = [\r\n      /[{}();]/g, // code punctuation\r\n      /\\b(function|class|def|var|let|const|if|for|while)\\b/gi, // code keywords\r\n      /[=<>!]+/g, // operators\r\n      /\\/\\/|\\/\\*|\\*/g, // comments\r\n      /\\b0x[0-9a-f]+\\b/gi, // hex numbers\r\n      /\\d+\\.\\d+/g, // floating point numbers\r\n    ];\r\n    \r\n    let totalMatches = 0;\r\n    indicators.forEach(pattern => {\r\n      const matches = content.match(pattern);\r\n      if (matches) totalMatches += matches.length;\r\n    });\r\n    \r\n    return totalMatches / Math.max(content.length, 1);\r\n  }\r\n\r\n  /**\r\n   * Apply penalties when content looks like plain text\r\n   */\r\n  applyPlainTextPenalties(scores, content) {\r\n    const naturalLanguageScore = this.calculateNaturalLanguageScore(content);\r\n    const codeScore = this.calculateCodeScore(content);\r\n    \r\n    // If content looks like natural language, penalize all programming languages\r\n    if (naturalLanguageScore > codeScore && naturalLanguageScore > 0.02) {\r\n      const penalty = Math.min(0.8, naturalLanguageScore * 10);\r\n      Object.keys(scores).forEach(lang => {\r\n        if (lang !== 'markdown' && lang !== 'plaintext') {\r\n          scores[lang] *= (1 - penalty);\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Penalize languages with very weak evidence\r\n    Object.entries(scores).forEach(([lang, score]) => {\r\n      if (score > 0 && score < 5) {\r\n        const strongEvidence = this.hasStrongLanguageEvidence(lang, content);\r\n        if (!strongEvidence) {\r\n          scores[lang] *= 0.3;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check if content has strong evidence for a specific language\r\n   */\r\n  hasStrongLanguageEvidence(language, content) {\r\n    if (!this.patterns[language] || !this.patterns[language].strong) {\r\n      return false;\r\n    }\r\n    \r\n    let strongMatches = 0;\r\n    this.patterns[language].strong.forEach(pattern => {\r\n      // Skip filename patterns\r\n      if (pattern.source.includes('\\\\.(') && pattern.source.includes(')$/i')) {\r\n        return;\r\n      }\r\n      \r\n      if (content.match(pattern)) {\r\n        strongMatches++;\r\n      }\r\n    });\r\n    \r\n    return strongMatches >= 1;\r\n  }\r\n\r\n  /**\r\n   * Calculate confidence level based on score and patterns\r\n   */\r\n  calculateConfidence(language, score, content) {\r\n    if (language === 'plaintext') {\r\n      // For plaintext, confidence depends on how clearly it's NOT code\r\n      const naturalLanguageScore = this.calculateNaturalLanguageScore(content);\r\n      const codeScore = this.calculateCodeScore(content);\r\n      \r\n      if (naturalLanguageScore > codeScore * 2) return 'high';\r\n      if (naturalLanguageScore > codeScore) return 'medium';\r\n      return 'low';\r\n    }\r\n    \r\n    const patterns = this.patterns[language];\r\n    if (!patterns) return 'low';\r\n    \r\n    const strongMatches = patterns.strong?.filter(pattern => {\r\n      // Skip filename patterns in confidence calculation\r\n      if (pattern.source.includes('\\\\.(') && pattern.source.includes(')$/i')) {\r\n        return false;\r\n      }\r\n      return content.match(pattern);\r\n    }).length || 0;\r\n    \r\n    if (strongMatches >= 2 && score >= 25) return 'high';\r\n    if (strongMatches >= 1 && score >= 15) return 'medium';\r\n    if (strongMatches >= 1 || score >= 12) return 'low';\r\n    \r\n    return 'very-low';\r\n  }\r\n\r\n  /**\r\n   * Enhanced auto-detection with improved logic\r\n   */\r\n  autoDetect(content, filename = null) {\r\n    // Filename detection with high confidence\r\n    const filenameLanguage = this.detectFromFilename(filename);\r\n    if (filenameLanguage) {\r\n      // Verify filename detection with content if available\r\n      if (content && content.trim().length > 0) {\r\n        const contentLanguage = this.detectFromContent(content);\r\n        \r\n        // If content strongly suggests a different language, use content detection\r\n        if (contentLanguage !== 'plaintext' && contentLanguage !== filenameLanguage) {\r\n          const contentScore = this.getLanguageScore(content, contentLanguage);\r\n          const filenameScore = this.getLanguageScore(content, filenameLanguage);\r\n          \r\n          if (contentScore > filenameScore * 1.5) {\r\n            return {\r\n              language: contentLanguage,\r\n              confidence: this.calculateConfidence(contentLanguage, contentScore, content),\r\n              method: 'content-override',\r\n              alternateDetection: filenameLanguage\r\n            };\r\n          }\r\n        }\r\n      }\r\n      \r\n      return {\r\n        language: filenameLanguage,\r\n        confidence: 'high',\r\n        method: 'filename'\r\n      };\r\n    }\r\n\r\n    // Content-only detection\r\n    const contentLanguage = this.detectFromContent(content);\r\n    const score = this.getLanguageScore(content, contentLanguage);\r\n    \r\n    return {\r\n      language: contentLanguage,\r\n      confidence: this.calculateConfidence(contentLanguage, score, content),\r\n      method: 'content'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get score for a specific language\r\n   */\r\n  getLanguageScore(content, language) {\r\n    if (!this.patterns[language]) return 0;\r\n    \r\n    let score = 0;\r\n    Object.entries(this.patterns[language]).forEach(([category, patterns]) => {\r\n      const weight = this.weights[category];\r\n      patterns.forEach(pattern => {\r\n        const matches = content.match(new RegExp(pattern.source, pattern.flags + 'g'));\r\n        if (matches) {\r\n          score += Math.min(matches.length, 5) * weight;\r\n        }\r\n      });\r\n    });\r\n    \r\n    return score;\r\n  }\r\n\r\n  /**\r\n   * Get detailed detection results for debugging\r\n   */\r\n  getDetectionDetails(content, filename = null) {\r\n    const results = this.autoDetect(content, filename);\r\n    const scores = {};\r\n    \r\n    // Calculate scores for all languages\r\n    Object.keys(this.patterns).forEach(lang => {\r\n      scores[lang] = this.getLanguageScore(content, lang);\r\n    });\r\n    \r\n    const sortedScores = Object.entries(scores)\r\n      .sort(([,a], [,b]) => b - a)\r\n      .slice(0, 5);\r\n    \r\n    return {\r\n      ...results,\r\n      topScores: sortedScores,\r\n      totalPatterns: Object.keys(this.patterns).length,\r\n      contentLength: content?.length || 0\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get all supported languages\r\n   */\r\n  getSupportedLanguages() {\r\n    return [\r\n      'plaintext',\r\n      ...Object.keys(this.patterns).sort()\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Check if a language is supported\r\n   */\r\n  isLanguageSupported(language) {\r\n    return language === 'plaintext' || this.patterns.hasOwnProperty(language);\r\n  }\r\n}\r\n\r\nexport default LanguageDetector;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}