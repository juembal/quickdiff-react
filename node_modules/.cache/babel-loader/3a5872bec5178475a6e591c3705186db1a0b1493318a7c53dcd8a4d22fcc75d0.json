{"ast":null,"code":"/**\r\n * Groq API Service for QuickDiff React App\r\n * Fast, reliable, and free AI API for text analysis\r\n * Get your free API key at: https://console.groq.com/\r\n */\n\nexport class GroqService {\n  constructor() {\n    this.config = {\n      apiKey: process.env.REACT_APP_GROQ_API_KEY || '',\n      // Groq API key from environment\n      baseUrl: 'https://api.groq.com/openai/v1/chat/completions',\n      model: 'llama-3.1-8b-instant',\n      // Fast and reliable model\n      maxTokens: 1000,\n      temperature: 0.7\n    };\n    this.loadConfig();\n  }\n  loadConfig() {\n    try {\n      const savedConfig = localStorage.getItem('quickdiff_groq_config');\n      if (savedConfig) {\n        const parsedConfig = JSON.parse(savedConfig);\n        delete parsedConfig.apiKey; // Don't override API key from environment\n        this.config = {\n          ...this.config,\n          ...parsedConfig\n        };\n      }\n\n      // Ensure environment variable always takes precedence\n      const envApiKey = process.env.REACT_APP_GROQ_API_KEY;\n      if (envApiKey) {\n        this.config.apiKey = envApiKey;\n      }\n    } catch (error) {\n      console.error('Error loading Groq config:', error);\n    }\n  }\n\n  // Check if Groq is properly configured\n  isConfigured() {\n    const hasKey = this.config.apiKey && this.config.apiKey.trim().length > 0;\n    const isValidKey = this.config.apiKey && this.config.apiKey.startsWith('gsk_');\n    const configured = hasKey && isValidKey;\n    console.log('üîç Groq isConfigured check:', {\n      envVar: process.env.REACT_APP_GROQ_API_KEY ? 'Found' : 'Not found',\n      hasApiKey: !!this.config.apiKey,\n      apiKeyLength: this.config.apiKey ? this.config.apiKey.length : 0,\n      apiKeyPreview: this.config.apiKey ? `${this.config.apiKey.substring(0, 10)}...` : 'none',\n      startsWithGsk: isValidKey,\n      configured: configured\n    });\n    return configured;\n  }\n\n  // Call Groq API\n  async callGroqAPI(messages) {\n    console.log('üåê Making Groq API call...');\n    console.log('üîë Using API key:', this.config.apiKey ? `${this.config.apiKey.substring(0, 10)}...` : 'NONE');\n    const response = await fetch(this.config.baseUrl, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${this.config.apiKey}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        model: this.config.model,\n        messages: messages,\n        max_tokens: this.config.maxTokens,\n        temperature: this.config.temperature\n      })\n    });\n    console.log('üì• Response status:', response.status);\n    if (!response.ok) {\n      const error = await response.text();\n      console.error('‚ùå Groq API Error Response:', error);\n      throw new Error(`Groq API error: ${response.status} - ${error}`);\n    }\n    const result = await response.json();\n    console.log('‚úÖ Groq API Success');\n    return result.choices[0].message.content;\n  }\n\n  // Generate analysis using Groq\n  async generateAnalysis(type, originalText, changedText) {\n    console.log('üöÄ generateAnalysis called with type:', type);\n    console.log('üîß isConfigured():', this.isConfigured());\n    if (!this.isConfigured()) {\n      console.log('‚ùå Groq API not configured, throwing error');\n      throw new Error('Groq API not configured. Please set up your API token.');\n    }\n    console.log('‚úÖ Groq API configured, proceeding with analysis...');\n    try {\n      let analysis;\n      switch (type) {\n        case 'explain':\n          analysis = await this.generateExplanation(originalText, changedText);\n          break;\n        case 'rewrite':\n          analysis = await this.generateRewriteSuggestions(originalText, changedText);\n          break;\n        case 'summary':\n          analysis = await this.generateSummary(originalText, changedText);\n          break;\n        case 'tone':\n          analysis = await this.generateToneAnalysis(originalText, changedText);\n          break;\n        case 'cleanup':\n          analysis = await this.generateCleanupAnalysis(originalText, changedText);\n          break;\n        default:\n          analysis = await this.generateExplanation(originalText, changedText);\n      }\n      console.log('‚úÖ Analysis generated successfully');\n      return this.formatResponse(type, analysis);\n    } catch (error) {\n      console.error('‚ùå Groq API Error:', error);\n      throw new Error(`Failed to generate ${type} analysis: ${error.message}`);\n    }\n  }\n\n  // Generate explanation analysis\n  async generateExplanation(originalText, changedText) {\n    console.log('üìù Generating explanation with Groq...');\n    const stats = this.calculateTextStats(originalText, changedText);\n    const messages = [{\n      role: \"system\",\n      content: \"You are an expert text analyst. Analyze the differences between two texts and provide clear, insightful explanations.\"\n    }, {\n      role: \"user\",\n      content: `Compare these two texts and explain the key differences:\n\nOriginal Text: \"${originalText.substring(0, 300)}${originalText.length > 300 ? '...' : ''}\"\n\nChanged Text: \"${changedText.substring(0, 300)}${changedText.length > 300 ? '...' : ''}\"\n\nPlease provide a detailed analysis of the differences, changes in meaning, style, and content structure.`\n    }];\n    try {\n      const aiInsight = await this.callGroqAPI(messages);\n      console.log('‚úÖ Groq explanation received');\n\n      // Create a simple, clean analysis like ChatGPT\n      const analysis = `Text Analysis\n\n${aiInsight}\n\nStatistics:\n- Original: ${stats.originalLines} lines, ${stats.originalWords} words, ${stats.originalChars} characters\n- Changed: ${stats.changedLines} lines, ${stats.changedWords} words, ${stats.changedChars} characters\n- Net change: ${Math.abs(stats.changedLines - stats.originalLines)} lines, ${Math.abs(stats.changedWords - stats.originalWords)} words, ${Math.abs(stats.changedChars - stats.originalChars)} characters\n\nKey Findings:\n${stats.originalLines !== stats.changedLines ? `‚Ä¢ Line count changed from ${stats.originalLines} to ${stats.changedLines}` : ''}\n${stats.originalWords !== stats.changedWords ? `‚Ä¢ Word count changed from ${stats.originalWords} to ${stats.changedWords}` : ''}\n${originalText === changedText ? '‚Ä¢ No changes detected - texts are identical' : ''}\n${Math.abs(stats.changedChars - stats.originalChars) > stats.originalChars * 0.5 ? '‚Ä¢ Significant content change detected (>50% length change)' : ''}\n${Math.abs(stats.changedChars - stats.originalChars) < stats.originalChars * 0.1 ? '‚Ä¢ Minor changes detected (<10% length change)' : ''}`;\n      return analysis;\n    } catch (error) {\n      console.error('‚ùå Groq API failed for explanation:', error);\n      throw error;\n    }\n  }\n\n  // Generate rewrite suggestions\n  async generateRewriteSuggestions(originalText, changedText) {\n    console.log('‚ú® Generating rewrite suggestions with Groq...');\n    const combinedText = originalText + ' ' + changedText;\n    const messages = [{\n      role: \"system\",\n      content: \"You are an expert writing coach. Provide specific, actionable suggestions to improve text clarity, style, and readability.\"\n    }, {\n      role: \"user\",\n      content: `Please analyze this text and provide specific rewrite suggestions to improve clarity, style, and readability:\n\n\"${combinedText.substring(0, 400)}${combinedText.length > 400 ? '...' : ''}\"\n\nProvide concrete suggestions for improvement, including specific examples where possible.`\n    }];\n    try {\n      const suggestions = await this.callGroqAPI(messages);\n      console.log('‚úÖ Groq rewrite suggestions received');\n\n      // Create clean rewrite suggestions like ChatGPT\n      const rewriteAnalysis = `Writing Improvement Suggestions\n\n${suggestions}\n\nGeneral Writing Tips:\n‚Ä¢ Use clear, concise language and avoid unnecessary jargon\n‚Ä¢ Break up long sentences into shorter, more readable ones\n‚Ä¢ Use active voice when possible for stronger impact\n‚Ä¢ Ensure consistent terminology and tone throughout\n‚Ä¢ Add transitional phrases to improve flow between ideas\n‚Ä¢ Remove redundant words and phrases\n‚Ä¢ Use specific examples to support your points`;\n      return rewriteAnalysis;\n    } catch (error) {\n      console.error('‚ùå Groq API failed for rewrite suggestions:', error);\n      throw error;\n    }\n  }\n\n  // Generate summary\n  async generateSummary(originalText, changedText) {\n    console.log('üìÑ Generating summary with Groq...');\n    const combinedText = originalText + '\\n\\n' + changedText;\n    const messages = [{\n      role: \"system\",\n      content: \"You are an expert at creating concise, informative summaries. Focus on the key points and main ideas.\"\n    }, {\n      role: \"user\",\n      content: `Please provide a concise summary of these texts, highlighting the main points and any key differences:\n\n\"${combinedText.substring(0, 500)}${combinedText.length > 500 ? '...' : ''}\"\n\nFocus on the most important information and any significant changes between versions.`\n    }];\n    try {\n      const summary = await this.callGroqAPI(messages);\n      console.log('‚úÖ Groq summary received');\n\n      // Create clean summary like ChatGPT\n      const summaryAnalysis = `Summary\n\n${summary}\n\nDocument Overview:\n‚Ä¢ Combined length: ${combinedText.length} characters\n‚Ä¢ Analysis scope: Both original and changed versions\n‚Ä¢ Focus: Main points and key differences between versions\n‚Ä¢ Processing: AI-powered analysis using advanced language models\n\nThis summary captures the most important information and highlights key changes between the text versions.`;\n      return summaryAnalysis;\n    } catch (error) {\n      console.error('‚ùå Groq API failed for summary:', error);\n      throw error;\n    }\n  }\n\n  // Generate tone analysis\n  async generateToneAnalysis(originalText, changedText) {\n    console.log('üé≠ Generating tone analysis with Groq...');\n    const messages = [{\n      role: \"system\",\n      content: \"You are an expert in linguistic analysis and tone assessment. Analyze the emotional tone, formality level, and overall sentiment of texts.\"\n    }, {\n      role: \"user\",\n      content: `Please analyze the tone and sentiment of these texts:\n\nOriginal Text: \"${originalText.substring(0, 300)}${originalText.length > 300 ? '...' : ''}\"\n\nChanged Text: \"${changedText.substring(0, 300)}${changedText.length > 300 ? '...' : ''}\"\n\nAnalyze: emotional tone, formality level, sentiment, audience appropriateness, and any tone shifts between versions.`\n    }];\n    try {\n      const toneAnalysis = await this.callGroqAPI(messages);\n      console.log('‚úÖ Groq tone analysis received');\n\n      // Create clean tone analysis like ChatGPT\n      const toneAnalysisResult = `Tone Analysis\n\n${toneAnalysis}\n\nTone Guidelines:\n‚Ä¢ Maintain consistent voice throughout your document\n‚Ä¢ Match tone to your target audience and purpose\n‚Ä¢ Consider the emotional impact of your word choices\n‚Ä¢ Balance professionalism with accessibility\n‚Ä¢ Ensure tone shifts are intentional and serve a purpose\n‚Ä¢ Consider cultural context and reader expectations\n\nRemember: Effective tone helps convey your message clearly and builds connection with your audience.`;\n      return toneAnalysisResult;\n    } catch (error) {\n      console.error('‚ùå Groq API failed for tone analysis:', error);\n      throw error;\n    }\n  }\n\n  // Generate cleanup analysis\n  async generateCleanupAnalysis(originalText, changedText) {\n    console.log('üßπ Generating cleanup analysis with Groq...');\n    const combinedText = originalText + '\\n' + changedText;\n    const messages = [{\n      role: \"system\",\n      content: \"You are an expert editor focused on text cleanup and formatting. Identify formatting issues, inconsistencies, and areas for improvement.\"\n    }, {\n      role: \"user\",\n      content: `Please analyze this text for formatting issues, inconsistencies, and cleanup opportunities:\n\n\"${combinedText.substring(0, 400)}${combinedText.length > 400 ? '...' : ''}\"\n\nLook for: spacing issues, punctuation problems, inconsistent formatting, redundant phrases, and other cleanup opportunities.`\n    }];\n    try {\n      const cleanupAnalysis = await this.callGroqAPI(messages);\n      console.log('‚úÖ Groq cleanup analysis received');\n\n      // Create clean cleanup analysis like ChatGPT\n      const cleanupResult = `Text Cleanup Analysis\n\n${cleanupAnalysis}\n\nCleanup Checklist:\n‚Ä¢ Remove trailing whitespace at line ends\n‚Ä¢ Standardize line break usage throughout\n‚Ä¢ Fix inconsistent punctuation patterns\n‚Ä¢ Normalize quotation marks (straight vs. curly)\n‚Ä¢ Remove unnecessary special characters\n‚Ä¢ Ensure consistent spacing around punctuation\n‚Ä¢ Check for double spaces and extra line breaks\n\nThese improvements will make your text more professional and easier to read.`;\n      return cleanupResult;\n    } catch (error) {\n      console.error('‚ùå Groq API failed for cleanup analysis:', error);\n      throw error;\n    }\n  }\n\n  // Helper methods\n  calculateTextStats(originalText, changedText) {\n    return {\n      originalLines: originalText.split('\\n').length,\n      changedLines: changedText.split('\\n').length,\n      originalWords: originalText.split(/\\s+/).filter(w => w.length > 0).length,\n      changedWords: changedText.split(/\\s+/).filter(w => w.length > 0).length,\n      originalChars: originalText.length,\n      changedChars: changedText.length\n    };\n  }\n\n  // Format AI response - bullets for analysis, paragraphs for summaries\n  formatAIResponse(text, type = 'default') {\n    if (!text) return '';\n\n    // Clean up the text\n    let cleaned = text\n    // Remove **text** and replace with <strong>text</strong>\n    .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n    // Remove single asterisks and other markdown artifacts\n    .replace(/\\*([^*]+)\\*/g, '$1')\n    // Remove standalone asterisks\n    .replace(/\\*+/g, '')\n    // Clean up multiple spaces\n    .replace(/\\s+/g, ' ')\n    // Trim whitespace\n    .trim();\n\n    // For summaries, use paragraph format for better flow\n    if (type === 'summary') {\n      // Split into logical paragraphs by double line breaks first\n      const paragraphs = cleaned.split(/\\n\\s*\\n+/).map(p => p.trim()).filter(p => p.length > 20); // Filter out very short fragments\n\n      // If we have multiple paragraphs, format them nicely\n      if (paragraphs.length > 1) {\n        return paragraphs.map(paragraph => `<p style=\"margin-bottom: 16px; line-height: 1.6;\">${paragraph}</p>`).join('');\n      }\n      // Single paragraph - split by sentences for better readability\n      else {\n        const sentences = cleaned.split(/(?<=\\.)\\s+(?=[A-Z])/).filter(s => s.trim().length > 10);\n        if (sentences.length > 2) {\n          // Group sentences into logical paragraphs (2-3 sentences each)\n          const groupedParagraphs = [];\n          for (let i = 0; i < sentences.length; i += 2) {\n            const group = sentences.slice(i, i + 2).join(' ').trim();\n            if (group) groupedParagraphs.push(group);\n          }\n          return groupedParagraphs.map(paragraph => `<p style=\"margin-bottom: 16px; line-height: 1.6;\">${paragraph}</p>`).join('');\n        }\n        return `<p style=\"line-height: 1.6;\">${cleaned}</p>`;\n      }\n    }\n\n    // For other types (explain, rewrite, tone, cleanup), intelligently format the content\n    let points = [];\n\n    // Special handling for rewrite suggestions - look for \"Issue\", \"Suggested Solution\", \"Example\"\n    if (type === 'rewrite' && (cleaned.includes('Issue') || cleaned.includes('Suggested Solution') || cleaned.includes('Example'))) {\n      // Split by \"Issue\" markers first\n      const issueSections = cleaned.split(/(?=Issue\\s+\\d+:|Additional Suggestions:)/);\n      points = issueSections.filter(section => section.trim().length > 10);\n    }\n    // First try to split by numbered items (1., 2., 3., etc.)\n    else if (cleaned.match(/\\d+\\.\\s/)) {\n      points = cleaned.split(/(?=\\d+\\.\\s)/).filter(p => p.trim());\n    }\n    // Split by periods followed by capital letters (new sentences/points)\n    else if (cleaned.match(/\\.\\s+[A-Z]/)) {\n      // Be more careful about splitting - only split on likely sentence boundaries\n      // Don't split on colons that are part of labels like \"Meaning:\", \"Analysis:\", etc.\n      const sentences = cleaned.split(/(?<=\\.)\\s+(?=[A-Z][a-z])/);\n      // Group related sentences together, keeping labels with their content\n      points = [];\n      let currentGroup = '';\n      for (const sentence of sentences) {\n        const trimmedSentence = sentence.trim();\n\n        // If current group is getting long AND the new sentence doesn't contain a colon (label)\n        // AND it doesn't start with a continuation word, start a new group\n        const continuationWords = ['However', 'Additionally', 'Furthermore', 'Moreover', 'Also', 'Therefore', 'Thus', 'For example', 'In addition'];\n        const startsWithContinuation = continuationWords.some(word => trimmedSentence.startsWith(word));\n        const containsLabel = trimmedSentence.includes(':') && trimmedSentence.indexOf(':') < 50; // Colon within first 50 chars suggests a label\n\n        if (currentGroup.length > 250 && !startsWithContinuation && !containsLabel) {\n          if (currentGroup) points.push(currentGroup.trim());\n          currentGroup = trimmedSentence;\n        } else {\n          currentGroup += (currentGroup ? ' ' : '') + trimmedSentence;\n        }\n      }\n      if (currentGroup) points.push(currentGroup.trim());\n    }\n    // If no clear structure, split by double line breaks or try to find natural breaks\n    else {\n      points = cleaned.split(/\\n\\s*\\n+/).filter(p => p.trim());\n      // If still just one big block, try to split by common transition words\n      if (points.length === 1) {\n        const transitionSplit = cleaned.split(/(?<=\\.)\\s+(?=However|Additionally|Furthermore|Moreover|In addition|Also|Therefore|Thus|Consequently)/);\n        if (transitionSplit.length > 1) {\n          points = transitionSplit;\n        }\n      }\n    }\n\n    // Clean up and format each point\n    const formattedPoints = points.map(point => point.trim()).filter(point => point.length > 15) // Filter out very short fragments\n    .map(point => {\n      // Remove leading numbers if present\n      point = point.replace(/^\\d+\\.\\s*/, '');\n      // Ensure proper sentence ending\n      if (!point.endsWith('.') && !point.endsWith('!') && !point.endsWith('?') && !point.endsWith(':')) {\n        point += '.';\n      }\n      return point;\n    });\n\n    // If we have multiple meaningful points, format as bulleted list\n    if (formattedPoints.length > 1) {\n      return `<ul style=\"line-height: 1.6; margin: 12px 0; padding-left: 20px;\">${formattedPoints.map(point => `<li style=\"margin-bottom: 12px;\">${point}</li>`).join('')}</ul>`;\n    }\n    // If only one point or no clear structure, return as well-formatted paragraph(s)\n    else {\n      // For single blocks, try to break into readable paragraphs\n      const sentences = cleaned.split(/(?<=\\.)\\s+(?=[A-Z])/);\n      if (sentences.length > 3) {\n        const paragraphs = [];\n        for (let i = 0; i < sentences.length; i += 2) {\n          const group = sentences.slice(i, i + 2).join(' ').trim();\n          if (group) paragraphs.push(group);\n        }\n        return paragraphs.map(p => `<p style=\"line-height: 1.6; margin-bottom: 12px;\">${p}</p>`).join('');\n      }\n      return `<p style=\"line-height: 1.6;\">${cleaned}</p>`;\n    }\n  }\n\n  // Format the response into the expected structure\n  formatResponse(type, content) {\n    const typeIcons = {\n      explain: 'üß†',\n      rewrite: '‚ú®',\n      summary: 'üìù',\n      tone: 'üé≠',\n      cleanup: 'üßπ'\n    };\n    const typeTitles = {\n      explain: 'Groq AI Explanation',\n      rewrite: 'Groq AI Rewrite Suggestions',\n      summary: 'Groq AI Summary',\n      tone: 'Groq AI Tone Analysis',\n      cleanup: 'Groq AI Text Cleanup'\n    };\n    return {\n      title: `${typeIcons[type] || 'ü§ñ'} ${typeTitles[type] || 'Groq AI Analysis'}`,\n      content: content,\n      type: type\n    };\n  }\n\n  // Test the Groq connection\n  async testConnection() {\n    console.log('Testing Groq connection...');\n    console.log('API Key configured:', this.isConfigured());\n    if (!this.isConfigured()) {\n      return {\n        success: false,\n        error: 'API key not configured'\n      };\n    }\n    try {\n      const result = await this.callGroqAPI([{\n        role: \"user\",\n        content: \"Say 'Hello, Groq API is working!' in a friendly way.\"\n      }]);\n      console.log('API test result:', result);\n      return {\n        success: true,\n        response: result\n      };\n    } catch (error) {\n      console.error('API test failed:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Debug method\n  debugConfig() {\n    console.log('=== Groq Debug Info ===');\n    console.log('Environment API Key:', process.env.REACT_APP_GROQ_API_KEY ? 'Found' : 'Not found');\n    console.log('Config API Key:', this.config.apiKey ? 'Found' : 'Not found');\n    console.log('Is Configured:', this.isConfigured());\n    console.log('Base URL:', this.config.baseUrl);\n    console.log('Model:', this.config.model);\n    console.log('======================');\n  }\n}","map":{"version":3,"names":["GroqService","constructor","config","apiKey","process","env","REACT_APP_GROQ_API_KEY","baseUrl","model","maxTokens","temperature","loadConfig","savedConfig","localStorage","getItem","parsedConfig","JSON","parse","envApiKey","error","console","isConfigured","hasKey","trim","length","isValidKey","startsWith","configured","log","envVar","hasApiKey","apiKeyLength","apiKeyPreview","substring","startsWithGsk","callGroqAPI","messages","response","fetch","method","headers","body","stringify","max_tokens","status","ok","text","Error","result","json","choices","message","content","generateAnalysis","type","originalText","changedText","analysis","generateExplanation","generateRewriteSuggestions","generateSummary","generateToneAnalysis","generateCleanupAnalysis","formatResponse","stats","calculateTextStats","role","aiInsight","originalLines","originalWords","originalChars","changedLines","changedWords","changedChars","Math","abs","combinedText","suggestions","rewriteAnalysis","summary","summaryAnalysis","toneAnalysis","toneAnalysisResult","cleanupAnalysis","cleanupResult","split","filter","w","formatAIResponse","cleaned","replace","paragraphs","map","p","paragraph","join","sentences","s","groupedParagraphs","i","group","slice","push","points","includes","issueSections","section","match","currentGroup","sentence","trimmedSentence","continuationWords","startsWithContinuation","some","word","containsLabel","indexOf","transitionSplit","formattedPoints","point","endsWith","typeIcons","explain","rewrite","tone","cleanup","typeTitles","title","testConnection","success","debugConfig"],"sources":["C:/Users/Joem/quickdiff-react/src/utils/GroqService.js"],"sourcesContent":["/**\r\n * Groq API Service for QuickDiff React App\r\n * Fast, reliable, and free AI API for text analysis\r\n * Get your free API key at: https://console.groq.com/\r\n */\r\n\r\nexport class GroqService {\r\n  constructor() {\r\n    this.config = {\r\n      apiKey: process.env.REACT_APP_GROQ_API_KEY || '', // Groq API key from environment\r\n      baseUrl: 'https://api.groq.com/openai/v1/chat/completions',\r\n      model: 'llama-3.1-8b-instant', // Fast and reliable model\r\n      maxTokens: 1000,\r\n      temperature: 0.7\r\n    };\r\n    \r\n    this.loadConfig();\r\n  }\r\n\r\n  loadConfig() {\r\n    try {\r\n      const savedConfig = localStorage.getItem('quickdiff_groq_config');\r\n      if (savedConfig) {\r\n        const parsedConfig = JSON.parse(savedConfig);\r\n        delete parsedConfig.apiKey; // Don't override API key from environment\r\n        this.config = { ...this.config, ...parsedConfig };\r\n      }\r\n      \r\n      // Ensure environment variable always takes precedence\r\n      const envApiKey = process.env.REACT_APP_GROQ_API_KEY;\r\n      if (envApiKey) {\r\n        this.config.apiKey = envApiKey;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading Groq config:', error);\r\n    }\r\n  }\r\n\r\n  // Check if Groq is properly configured\r\n  isConfigured() {\r\n    const hasKey = this.config.apiKey && this.config.apiKey.trim().length > 0;\r\n    const isValidKey = this.config.apiKey && this.config.apiKey.startsWith('gsk_');\r\n    const configured = hasKey && isValidKey;\r\n    \r\n    console.log('üîç Groq isConfigured check:', {\r\n      envVar: process.env.REACT_APP_GROQ_API_KEY ? 'Found' : 'Not found',\r\n      hasApiKey: !!this.config.apiKey,\r\n      apiKeyLength: this.config.apiKey ? this.config.apiKey.length : 0,\r\n      apiKeyPreview: this.config.apiKey ? `${this.config.apiKey.substring(0, 10)}...` : 'none',\r\n      startsWithGsk: isValidKey,\r\n      configured: configured\r\n    });\r\n    return configured;\r\n  }\r\n\r\n  // Call Groq API\r\n  async callGroqAPI(messages) {\r\n    console.log('üåê Making Groq API call...');\r\n    console.log('üîë Using API key:', this.config.apiKey ? `${this.config.apiKey.substring(0, 10)}...` : 'NONE');\r\n    \r\n    const response = await fetch(this.config.baseUrl, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Bearer ${this.config.apiKey}`,\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        model: this.config.model,\r\n        messages: messages,\r\n        max_tokens: this.config.maxTokens,\r\n        temperature: this.config.temperature\r\n      })\r\n    });\r\n\r\n    console.log('üì• Response status:', response.status);\r\n\r\n    if (!response.ok) {\r\n      const error = await response.text();\r\n      console.error('‚ùå Groq API Error Response:', error);\r\n      throw new Error(`Groq API error: ${response.status} - ${error}`);\r\n    }\r\n\r\n    const result = await response.json();\r\n    console.log('‚úÖ Groq API Success');\r\n    return result.choices[0].message.content;\r\n  }\r\n\r\n  // Generate analysis using Groq\r\n  async generateAnalysis(type, originalText, changedText) {\r\n    console.log('üöÄ generateAnalysis called with type:', type);\r\n    console.log('üîß isConfigured():', this.isConfigured());\r\n    \r\n    if (!this.isConfigured()) {\r\n      console.log('‚ùå Groq API not configured, throwing error');\r\n      throw new Error('Groq API not configured. Please set up your API token.');\r\n    }\r\n\r\n    console.log('‚úÖ Groq API configured, proceeding with analysis...');\r\n    try {\r\n      let analysis;\r\n      switch (type) {\r\n        case 'explain':\r\n          analysis = await this.generateExplanation(originalText, changedText);\r\n          break;\r\n        case 'rewrite':\r\n          analysis = await this.generateRewriteSuggestions(originalText, changedText);\r\n          break;\r\n        case 'summary':\r\n          analysis = await this.generateSummary(originalText, changedText);\r\n          break;\r\n        case 'tone':\r\n          analysis = await this.generateToneAnalysis(originalText, changedText);\r\n          break;\r\n        case 'cleanup':\r\n          analysis = await this.generateCleanupAnalysis(originalText, changedText);\r\n          break;\r\n        default:\r\n          analysis = await this.generateExplanation(originalText, changedText);\r\n      }\r\n      \r\n      console.log('‚úÖ Analysis generated successfully');\r\n      return this.formatResponse(type, analysis);\r\n    } catch (error) {\r\n      console.error('‚ùå Groq API Error:', error);\r\n      throw new Error(`Failed to generate ${type} analysis: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // Generate explanation analysis\r\n  async generateExplanation(originalText, changedText) {\r\n    console.log('üìù Generating explanation with Groq...');\r\n    const stats = this.calculateTextStats(originalText, changedText);\r\n    \r\n    const messages = [\r\n      {\r\n        role: \"system\",\r\n        content: \"You are an expert text analyst. Analyze the differences between two texts and provide clear, insightful explanations.\"\r\n      },\r\n      {\r\n        role: \"user\",\r\n        content: `Compare these two texts and explain the key differences:\r\n\r\nOriginal Text: \"${originalText.substring(0, 300)}${originalText.length > 300 ? '...' : ''}\"\r\n\r\nChanged Text: \"${changedText.substring(0, 300)}${changedText.length > 300 ? '...' : ''}\"\r\n\r\nPlease provide a detailed analysis of the differences, changes in meaning, style, and content structure.`\r\n      }\r\n    ];\r\n\r\n    try {\r\n      const aiInsight = await this.callGroqAPI(messages);\r\n      console.log('‚úÖ Groq explanation received');\r\n      \r\n      // Create a simple, clean analysis like ChatGPT\r\n      const analysis = `Text Analysis\r\n\r\n${aiInsight}\r\n\r\nStatistics:\r\n- Original: ${stats.originalLines} lines, ${stats.originalWords} words, ${stats.originalChars} characters\r\n- Changed: ${stats.changedLines} lines, ${stats.changedWords} words, ${stats.changedChars} characters\r\n- Net change: ${Math.abs(stats.changedLines - stats.originalLines)} lines, ${Math.abs(stats.changedWords - stats.originalWords)} words, ${Math.abs(stats.changedChars - stats.originalChars)} characters\r\n\r\nKey Findings:\r\n${stats.originalLines !== stats.changedLines ? `‚Ä¢ Line count changed from ${stats.originalLines} to ${stats.changedLines}` : ''}\r\n${stats.originalWords !== stats.changedWords ? `‚Ä¢ Word count changed from ${stats.originalWords} to ${stats.changedWords}` : ''}\r\n${originalText === changedText ? '‚Ä¢ No changes detected - texts are identical' : ''}\r\n${Math.abs(stats.changedChars - stats.originalChars) > stats.originalChars * 0.5 ? '‚Ä¢ Significant content change detected (>50% length change)' : ''}\r\n${Math.abs(stats.changedChars - stats.originalChars) < stats.originalChars * 0.1 ? '‚Ä¢ Minor changes detected (<10% length change)' : ''}`;\r\n\r\n      return analysis;\r\n    } catch (error) {\r\n      console.error('‚ùå Groq API failed for explanation:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Generate rewrite suggestions\r\n  async generateRewriteSuggestions(originalText, changedText) {\r\n    console.log('‚ú® Generating rewrite suggestions with Groq...');\r\n    const combinedText = originalText + ' ' + changedText;\r\n    \r\n    const messages = [\r\n      {\r\n        role: \"system\",\r\n        content: \"You are an expert writing coach. Provide specific, actionable suggestions to improve text clarity, style, and readability.\"\r\n      },\r\n      {\r\n        role: \"user\",\r\n        content: `Please analyze this text and provide specific rewrite suggestions to improve clarity, style, and readability:\r\n\r\n\"${combinedText.substring(0, 400)}${combinedText.length > 400 ? '...' : ''}\"\r\n\r\nProvide concrete suggestions for improvement, including specific examples where possible.`\r\n      }\r\n    ];\r\n\r\n    try {\r\n      const suggestions = await this.callGroqAPI(messages);\r\n      console.log('‚úÖ Groq rewrite suggestions received');\r\n      \r\n      // Create clean rewrite suggestions like ChatGPT\r\n      const rewriteAnalysis = `Writing Improvement Suggestions\r\n\r\n${suggestions}\r\n\r\nGeneral Writing Tips:\r\n‚Ä¢ Use clear, concise language and avoid unnecessary jargon\r\n‚Ä¢ Break up long sentences into shorter, more readable ones\r\n‚Ä¢ Use active voice when possible for stronger impact\r\n‚Ä¢ Ensure consistent terminology and tone throughout\r\n‚Ä¢ Add transitional phrases to improve flow between ideas\r\n‚Ä¢ Remove redundant words and phrases\r\n‚Ä¢ Use specific examples to support your points`;\r\n\r\n      return rewriteAnalysis;\r\n    } catch (error) {\r\n      console.error('‚ùå Groq API failed for rewrite suggestions:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Generate summary\r\n  async generateSummary(originalText, changedText) {\r\n    console.log('üìÑ Generating summary with Groq...');\r\n    const combinedText = originalText + '\\n\\n' + changedText;\r\n    \r\n    const messages = [\r\n      {\r\n        role: \"system\",\r\n        content: \"You are an expert at creating concise, informative summaries. Focus on the key points and main ideas.\"\r\n      },\r\n      {\r\n        role: \"user\",\r\n        content: `Please provide a concise summary of these texts, highlighting the main points and any key differences:\r\n\r\n\"${combinedText.substring(0, 500)}${combinedText.length > 500 ? '...' : ''}\"\r\n\r\nFocus on the most important information and any significant changes between versions.`\r\n      }\r\n    ];\r\n\r\n    try {\r\n      const summary = await this.callGroqAPI(messages);\r\n      console.log('‚úÖ Groq summary received');\r\n      \r\n      // Create clean summary like ChatGPT\r\n      const summaryAnalysis = `Summary\r\n\r\n${summary}\r\n\r\nDocument Overview:\r\n‚Ä¢ Combined length: ${combinedText.length} characters\r\n‚Ä¢ Analysis scope: Both original and changed versions\r\n‚Ä¢ Focus: Main points and key differences between versions\r\n‚Ä¢ Processing: AI-powered analysis using advanced language models\r\n\r\nThis summary captures the most important information and highlights key changes between the text versions.`;\r\n\r\n      return summaryAnalysis;\r\n    } catch (error) {\r\n      console.error('‚ùå Groq API failed for summary:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Generate tone analysis\r\n  async generateToneAnalysis(originalText, changedText) {\r\n    console.log('üé≠ Generating tone analysis with Groq...');\r\n    \r\n    const messages = [\r\n      {\r\n        role: \"system\",\r\n        content: \"You are an expert in linguistic analysis and tone assessment. Analyze the emotional tone, formality level, and overall sentiment of texts.\"\r\n      },\r\n      {\r\n        role: \"user\",\r\n        content: `Please analyze the tone and sentiment of these texts:\r\n\r\nOriginal Text: \"${originalText.substring(0, 300)}${originalText.length > 300 ? '...' : ''}\"\r\n\r\nChanged Text: \"${changedText.substring(0, 300)}${changedText.length > 300 ? '...' : ''}\"\r\n\r\nAnalyze: emotional tone, formality level, sentiment, audience appropriateness, and any tone shifts between versions.`\r\n      }\r\n    ];\r\n\r\n    try {\r\n      const toneAnalysis = await this.callGroqAPI(messages);\r\n      console.log('‚úÖ Groq tone analysis received');\r\n      \r\n      // Create clean tone analysis like ChatGPT\r\n      const toneAnalysisResult = `Tone Analysis\r\n\r\n${toneAnalysis}\r\n\r\nTone Guidelines:\r\n‚Ä¢ Maintain consistent voice throughout your document\r\n‚Ä¢ Match tone to your target audience and purpose\r\n‚Ä¢ Consider the emotional impact of your word choices\r\n‚Ä¢ Balance professionalism with accessibility\r\n‚Ä¢ Ensure tone shifts are intentional and serve a purpose\r\n‚Ä¢ Consider cultural context and reader expectations\r\n\r\nRemember: Effective tone helps convey your message clearly and builds connection with your audience.`;\r\n\r\n      return toneAnalysisResult;\r\n    } catch (error) {\r\n      console.error('‚ùå Groq API failed for tone analysis:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Generate cleanup analysis\r\n  async generateCleanupAnalysis(originalText, changedText) {\r\n    console.log('üßπ Generating cleanup analysis with Groq...');\r\n    const combinedText = originalText + '\\n' + changedText;\r\n    \r\n    const messages = [\r\n      {\r\n        role: \"system\",\r\n        content: \"You are an expert editor focused on text cleanup and formatting. Identify formatting issues, inconsistencies, and areas for improvement.\"\r\n      },\r\n      {\r\n        role: \"user\",\r\n        content: `Please analyze this text for formatting issues, inconsistencies, and cleanup opportunities:\r\n\r\n\"${combinedText.substring(0, 400)}${combinedText.length > 400 ? '...' : ''}\"\r\n\r\nLook for: spacing issues, punctuation problems, inconsistent formatting, redundant phrases, and other cleanup opportunities.`\r\n      }\r\n    ];\r\n\r\n    try {\r\n      const cleanupAnalysis = await this.callGroqAPI(messages);\r\n      console.log('‚úÖ Groq cleanup analysis received');\r\n      \r\n      // Create clean cleanup analysis like ChatGPT\r\n      const cleanupResult = `Text Cleanup Analysis\r\n\r\n${cleanupAnalysis}\r\n\r\nCleanup Checklist:\r\n‚Ä¢ Remove trailing whitespace at line ends\r\n‚Ä¢ Standardize line break usage throughout\r\n‚Ä¢ Fix inconsistent punctuation patterns\r\n‚Ä¢ Normalize quotation marks (straight vs. curly)\r\n‚Ä¢ Remove unnecessary special characters\r\n‚Ä¢ Ensure consistent spacing around punctuation\r\n‚Ä¢ Check for double spaces and extra line breaks\r\n\r\nThese improvements will make your text more professional and easier to read.`;\r\n\r\n      return cleanupResult;\r\n    } catch (error) {\r\n      console.error('‚ùå Groq API failed for cleanup analysis:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Helper methods\r\n  calculateTextStats(originalText, changedText) {\r\n    return {\r\n      originalLines: originalText.split('\\n').length,\r\n      changedLines: changedText.split('\\n').length,\r\n      originalWords: originalText.split(/\\s+/).filter(w => w.length > 0).length,\r\n      changedWords: changedText.split(/\\s+/).filter(w => w.length > 0).length,\r\n      originalChars: originalText.length,\r\n      changedChars: changedText.length\r\n    };\r\n  }\r\n\r\n  // Format AI response - bullets for analysis, paragraphs for summaries\r\n  formatAIResponse(text, type = 'default') {\r\n    if (!text) return '';\r\n    \r\n    // Clean up the text\r\n    let cleaned = text\r\n      // Remove **text** and replace with <strong>text</strong>\r\n      .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\r\n      // Remove single asterisks and other markdown artifacts\r\n      .replace(/\\*([^*]+)\\*/g, '$1')\r\n      // Remove standalone asterisks\r\n      .replace(/\\*+/g, '')\r\n      // Clean up multiple spaces\r\n      .replace(/\\s+/g, ' ')\r\n      // Trim whitespace\r\n      .trim();\r\n    \r\n    // For summaries, use paragraph format for better flow\r\n    if (type === 'summary') {\r\n      // Split into logical paragraphs by double line breaks first\r\n      const paragraphs = cleaned\r\n        .split(/\\n\\s*\\n+/)\r\n        .map(p => p.trim())\r\n        .filter(p => p.length > 20); // Filter out very short fragments\r\n      \r\n      // If we have multiple paragraphs, format them nicely\r\n      if (paragraphs.length > 1) {\r\n        return paragraphs.map(paragraph => `<p style=\"margin-bottom: 16px; line-height: 1.6;\">${paragraph}</p>`).join('');\r\n      }\r\n      // Single paragraph - split by sentences for better readability\r\n      else {\r\n        const sentences = cleaned.split(/(?<=\\.)\\s+(?=[A-Z])/).filter(s => s.trim().length > 10);\r\n        if (sentences.length > 2) {\r\n          // Group sentences into logical paragraphs (2-3 sentences each)\r\n          const groupedParagraphs = [];\r\n          for (let i = 0; i < sentences.length; i += 2) {\r\n            const group = sentences.slice(i, i + 2).join(' ').trim();\r\n            if (group) groupedParagraphs.push(group);\r\n          }\r\n          return groupedParagraphs.map(paragraph => `<p style=\"margin-bottom: 16px; line-height: 1.6;\">${paragraph}</p>`).join('');\r\n        }\r\n        return `<p style=\"line-height: 1.6;\">${cleaned}</p>`;\r\n      }\r\n    }\r\n    \r\n    // For other types (explain, rewrite, tone, cleanup), intelligently format the content\r\n    let points = [];\r\n    \r\n    // Special handling for rewrite suggestions - look for \"Issue\", \"Suggested Solution\", \"Example\"\r\n    if (type === 'rewrite' && (cleaned.includes('Issue') || cleaned.includes('Suggested Solution') || cleaned.includes('Example'))) {\r\n      // Split by \"Issue\" markers first\r\n      const issueSections = cleaned.split(/(?=Issue\\s+\\d+:|Additional Suggestions:)/);\r\n      points = issueSections.filter(section => section.trim().length > 10);\r\n    }\r\n    // First try to split by numbered items (1., 2., 3., etc.)\r\n    else if (cleaned.match(/\\d+\\.\\s/)) {\r\n      points = cleaned.split(/(?=\\d+\\.\\s)/).filter(p => p.trim());\r\n    }\r\n    // Split by periods followed by capital letters (new sentences/points)\r\n    else if (cleaned.match(/\\.\\s+[A-Z]/)) {\r\n      // Be more careful about splitting - only split on likely sentence boundaries\r\n      // Don't split on colons that are part of labels like \"Meaning:\", \"Analysis:\", etc.\r\n      const sentences = cleaned.split(/(?<=\\.)\\s+(?=[A-Z][a-z])/);\r\n      // Group related sentences together, keeping labels with their content\r\n      points = [];\r\n      let currentGroup = '';\r\n      for (const sentence of sentences) {\r\n        const trimmedSentence = sentence.trim();\r\n        \r\n        // If current group is getting long AND the new sentence doesn't contain a colon (label)\r\n        // AND it doesn't start with a continuation word, start a new group\r\n        const continuationWords = ['However', 'Additionally', 'Furthermore', 'Moreover', 'Also', 'Therefore', 'Thus', 'For example', 'In addition'];\r\n        const startsWithContinuation = continuationWords.some(word => trimmedSentence.startsWith(word));\r\n        const containsLabel = trimmedSentence.includes(':') && trimmedSentence.indexOf(':') < 50; // Colon within first 50 chars suggests a label\r\n        \r\n        if (currentGroup.length > 250 && !startsWithContinuation && !containsLabel) {\r\n          if (currentGroup) points.push(currentGroup.trim());\r\n          currentGroup = trimmedSentence;\r\n        } else {\r\n          currentGroup += (currentGroup ? ' ' : '') + trimmedSentence;\r\n        }\r\n      }\r\n      if (currentGroup) points.push(currentGroup.trim());\r\n    }\r\n    // If no clear structure, split by double line breaks or try to find natural breaks\r\n    else {\r\n      points = cleaned.split(/\\n\\s*\\n+/).filter(p => p.trim());\r\n      // If still just one big block, try to split by common transition words\r\n      if (points.length === 1) {\r\n        const transitionSplit = cleaned.split(/(?<=\\.)\\s+(?=However|Additionally|Furthermore|Moreover|In addition|Also|Therefore|Thus|Consequently)/);\r\n        if (transitionSplit.length > 1) {\r\n          points = transitionSplit;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Clean up and format each point\r\n    const formattedPoints = points\r\n      .map(point => point.trim())\r\n      .filter(point => point.length > 15) // Filter out very short fragments\r\n      .map(point => {\r\n        // Remove leading numbers if present\r\n        point = point.replace(/^\\d+\\.\\s*/, '');\r\n        // Ensure proper sentence ending\r\n        if (!point.endsWith('.') && !point.endsWith('!') && !point.endsWith('?') && !point.endsWith(':')) {\r\n          point += '.';\r\n        }\r\n        return point;\r\n      });\r\n    \r\n    // If we have multiple meaningful points, format as bulleted list\r\n    if (formattedPoints.length > 1) {\r\n      return `<ul style=\"line-height: 1.6; margin: 12px 0; padding-left: 20px;\">${formattedPoints.map(point => `<li style=\"margin-bottom: 12px;\">${point}</li>`).join('')}</ul>`;\r\n    }\r\n    // If only one point or no clear structure, return as well-formatted paragraph(s)\r\n    else {\r\n      // For single blocks, try to break into readable paragraphs\r\n      const sentences = cleaned.split(/(?<=\\.)\\s+(?=[A-Z])/);\r\n      if (sentences.length > 3) {\r\n        const paragraphs = [];\r\n        for (let i = 0; i < sentences.length; i += 2) {\r\n          const group = sentences.slice(i, i + 2).join(' ').trim();\r\n          if (group) paragraphs.push(group);\r\n        }\r\n        return paragraphs.map(p => `<p style=\"line-height: 1.6; margin-bottom: 12px;\">${p}</p>`).join('');\r\n      }\r\n      return `<p style=\"line-height: 1.6;\">${cleaned}</p>`;\r\n    }\r\n  }\r\n\r\n  // Format the response into the expected structure\r\n  formatResponse(type, content) {\r\n    const typeIcons = {\r\n      explain: 'üß†',\r\n      rewrite: '‚ú®',\r\n      summary: 'üìù',\r\n      tone: 'üé≠',\r\n      cleanup: 'üßπ'\r\n    };\r\n\r\n    const typeTitles = {\r\n      explain: 'Groq AI Explanation',\r\n      rewrite: 'Groq AI Rewrite Suggestions',\r\n      summary: 'Groq AI Summary',\r\n      tone: 'Groq AI Tone Analysis',\r\n      cleanup: 'Groq AI Text Cleanup'\r\n    };\r\n\r\n    return {\r\n      title: `${typeIcons[type] || 'ü§ñ'} ${typeTitles[type] || 'Groq AI Analysis'}`,\r\n      content: content,\r\n      type: type\r\n    };\r\n  }\r\n\r\n  // Test the Groq connection\r\n  async testConnection() {\r\n    console.log('Testing Groq connection...');\r\n    console.log('API Key configured:', this.isConfigured());\r\n    \r\n    if (!this.isConfigured()) {\r\n      return { success: false, error: 'API key not configured' };\r\n    }\r\n    \r\n    try {\r\n      const result = await this.callGroqAPI([\r\n        { role: \"user\", content: \"Say 'Hello, Groq API is working!' in a friendly way.\" }\r\n      ]);\r\n      console.log('API test result:', result);\r\n      return { success: true, response: result };\r\n    } catch (error) {\r\n      console.error('API test failed:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n\r\n  // Debug method\r\n  debugConfig() {\r\n    console.log('=== Groq Debug Info ===');\r\n    console.log('Environment API Key:', process.env.REACT_APP_GROQ_API_KEY ? 'Found' : 'Not found');\r\n    console.log('Config API Key:', this.config.apiKey ? 'Found' : 'Not found');\r\n    console.log('Is Configured:', this.isConfigured());\r\n    console.log('Base URL:', this.config.baseUrl);\r\n    console.log('Model:', this.config.model);\r\n    console.log('======================');\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}